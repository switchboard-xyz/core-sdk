[
  {
    "id": "aptos-account-airdrop",
    "permalink": "/cli/aptos/account/airdrop",
    "topic": "aptos",
    "command": "sb aptos account airdrop",
    "topics": [
      "aptos",
      "account",
      "airdrop"
    ],
    "markdown": "USAGE\n  $ sb aptos account airdrop --address <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--json] [-n <value>]\n\nFLAGS\n  -h, --help            Show CLI help.\n  -n, --amount=<value>  [default: 1000000] number of airdrops to request, 10_000 coins each\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --address=<value>     (required) HexString address of account to fund\n  --networkId=<option>  [default: testnet] Aptos network to connect to\n                        <options: devnet|testnet|mainnet>\n  --programId=<value>   Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  request an airdrop\n",
    "usage": "sb aptos account airdrop --address <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--json] [-n <value>]",
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-n, --amount=<value>",
        "description": "[default: 1000000] number of airdrops to request, 10_000 coins each"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--address=<value>",
        "description": "(required) HexString address of account to fund"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "request an airdrop"
  },
  {
    "id": "aptos-aggregator-add_job",
    "permalink": "/cli/aptos/aggregator/add_job",
    "topic": "aptos",
    "command": "sb aptos aggregator add job",
    "topics": [
      "aptos",
      "aggregator",
      "add",
      "job"
    ],
    "markdown": "USAGE\n  $ sb aptos aggregator add job AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [-a <value>] [--name <value> | --jobKey <value>]\n    [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --jobDefinition=<value>  filesystem path of job json definition file\n  --jobKey=<value>         public key of an existing job account to add to an aggregator\n  --jobWeight=<value>      [default: 1] job weight\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job account\n  --name=<value>           name of the job account\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sb aptos aggregator job add\n",
    "usage": "sb aptos aggregator add job AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [-a <value>] [--name <value> | --jobKey <value>]\n    [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]",
    "args": [
      {
        "arg": "AGGREGATORHEXSTRING",
        "description": "HexString address of the aggregator"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--jobDefinition=<value>",
        "description": "filesystem path of job json definition file"
      },
      {
        "flag": "--jobKey=<value>",
        "description": "public key of an existing job account to add to an aggregator"
      },
      {
        "flag": "--jobWeight=<value>",
        "description": "[default: 1] job weight"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the job account"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the job account"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      }
    ],
    "description": "add a job to an aggregator",
    "aliases": [
      "sb aptos aggregator job add"
    ]
  },
  {
    "id": "aptos-aggregator-create",
    "permalink": "/cli/aptos/aggregator/create",
    "topic": "aptos",
    "command": "sb aptos aggregator create",
    "topics": [
      "aptos",
      "aggregator",
      "create"
    ],
    "markdown": "USAGE\n  $ sb aptos aggregator create QUEUEHEXSTRING --keypair <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize <value>]\n    [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [-j <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>      alternate named account that will be the authority for the oracle\n  -h, --help                   Show CLI help.\n  -j, --job=<value>...         filesystem path to job definition file\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          number of oracles requested for each open round call\n  --crankAddress=<value>       optional, address of the crank to add the aggregator to\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --keypair=<value>            (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>           metadata of the aggregator for easier identification\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --name=<value>               name of the aggregator for easier identification\n  --networkId=<option>         [default: testnet] Aptos network to connect to\n                               <options: devnet|testnet|mainnet>\n  --new                        create account at new AptosAccount with authority set to --account\n  --profileName=<value>        [default: default] If --keypair is pointing to a yaml file, provide an optional profile\n                               to load. If none provided, default will be used\n  --programId=<value>          Switchboard programId on the selected Aptos network\n  --updateInterval=<value>     (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>  [default: 0] percentage change between a previous accepted result and the next round\n                               before an oracle reports a value on-chain. Used to conserve lease cost during low\n                               volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aptos aggregator for a given queue\n\nALIASES\n  $ sb aptos create aggregator\n",
    "usage": "sb aptos aggregator create QUEUEHEXSTRING --keypair <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize <value>]\n    [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [-j <value>] [--new]",
    "args": [
      {
        "arg": "QUEUEHEXSTRING",
        "description": "HexString address of the queue"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate named account that will be the authority for the oracle"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-j, --job=<value>...",
        "description": "filesystem path to job definition file"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--batchSize=<value>",
        "description": "number of oracles requested for each open round call"
      },
      {
        "flag": "--crankAddress=<value>",
        "description": "optional, address of the crank to add the aggregator to"
      },
      {
        "flag": "--forceReportPeriod=<value>",
        "description": "Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles."
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the aggregator for easier identification"
      },
      {
        "flag": "--minJobs=<value>",
        "description": "number of jobs that must respond before an oracle responds"
      },
      {
        "flag": "--minOracles=<value>",
        "description": "number of oracles that must respond before a value is accepted on-chain"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the aggregator for easier identification"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--new",
        "description": "create account at new AptosAccount with authority set to --account"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      },
      {
        "flag": "--updateInterval=<value>",
        "description": "(required) set an aggregator's minimum update delay"
      },
      {
        "flag": "--varianceThreshold=<value>",
        "description": "[default: 0] percentage change between a previous accepted result and the next round before an oracle reports a value on-chain. Used to conserve lease cost during low volatility GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create an aptos aggregator for a given queue",
    "aliases": [
      "sb aptos create aggregator"
    ]
  },
  {
    "id": "aptos-aggregator-job_add",
    "permalink": "/cli/aptos/aggregator/job_add",
    "topic": "aptos",
    "command": "sb aptos aggregator job add",
    "topics": [
      "aptos",
      "aggregator",
      "job",
      "add"
    ],
    "markdown": "USAGE\n  $ sb aptos aggregator job add AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [-a <value>] [--name <value> | --jobKey <value>]\n    [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --jobDefinition=<value>  filesystem path of job json definition file\n  --jobKey=<value>         public key of an existing job account to add to an aggregator\n  --jobWeight=<value>      [default: 1] job weight\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job account\n  --name=<value>           name of the job account\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sb aptos aggregator job add\n",
    "usage": "sb aptos aggregator job add AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [-a <value>] [--name <value> | --jobKey <value>]\n    [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]",
    "args": [
      {
        "arg": "AGGREGATORHEXSTRING",
        "description": "HexString address of the aggregator"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--jobDefinition=<value>",
        "description": "filesystem path of job json definition file"
      },
      {
        "flag": "--jobKey=<value>",
        "description": "public key of an existing job account to add to an aggregator"
      },
      {
        "flag": "--jobWeight=<value>",
        "description": "[default: 1] job weight"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the job account"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the job account"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      }
    ],
    "description": "add a job to an aggregator",
    "aliases": [
      "sb aptos aggregator job add"
    ]
  },
  {
    "id": "aptos-aggregator-update",
    "permalink": "/cli/aptos/aggregator/update",
    "topic": "aptos",
    "command": "sb aptos aggregator update",
    "topics": [
      "aptos",
      "aggregator",
      "update"
    ],
    "markdown": "USAGE\n  $ sb aptos aggregator update AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sb aptos update aggregator\n",
    "usage": "sb aptos aggregator update AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>]",
    "args": [
      {
        "arg": "AGGREGATORHEXSTRING",
        "description": "HexString address of the aggregator"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      }
    ],
    "description": "request a new value on-chain for an aggregator",
    "aliases": [
      "sb aptos update aggregator"
    ]
  },
  {
    "id": "aptos-crank-create",
    "permalink": "/cli/aptos/crank/create",
    "topic": "aptos",
    "command": "sb aptos crank create",
    "topics": [
      "aptos",
      "crank",
      "create"
    ],
    "markdown": "USAGE\n  $ sb aptos crank create QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [--name <value>] [--metadata <value>] [--maxRows\n    <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString of the oracle queue to create a crank for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --maxRows=<value>      [default: 100] maximum number of rows on the crank\n  --metadata=<value>     metadata of the queue for easier identification\n  --name=<value>         name of the queue for easier identification\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --new                  create account at new AptosAccount with authority set to --account\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sb aptos create crank\n",
    "usage": "sb aptos crank create QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [--name <value>] [--metadata <value>] [--maxRows\n    <value>] [--new]",
    "args": [
      {
        "arg": "QUEUEHEXSTRING",
        "description": "HexString of the oracle queue to create a crank for"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--maxRows=<value>",
        "description": "[default: 100] maximum number of rows on the crank"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the queue for easier identification"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the queue for easier identification"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--new",
        "description": "create account at new AptosAccount with authority set to --account"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new crank",
    "aliases": [
      "sb aptos create crank"
    ]
  },
  {
    "id": "aptos-crank-list",
    "permalink": "/cli/aptos/crank/list",
    "topic": "aptos",
    "command": "sb aptos crank list",
    "topics": [
      "aptos",
      "crank",
      "list"
    ],
    "markdown": "USAGE\n  $ sb aptos crank list CRANKHEXSTRING [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>] [-u\n    <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --networkId=<option>  [default: testnet] Aptos network to connect to\n                        <options: devnet|testnet|mainnet>\n  --programId=<value>   Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  sort the crank\n\nALIASES\n  $ sb aptos list crank\n",
    "usage": "sb aptos crank list CRANKHEXSTRING [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>] [-u\n    <value>] [--json]",
    "args": [
      {
        "arg": "CRANKHEXSTRING",
        "description": "HexString address of the crank"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "sort the crank",
    "aliases": [
      "sb aptos list crank"
    ]
  },
  {
    "id": "aptos-crank-pop",
    "permalink": "/cli/aptos/crank/pop",
    "topic": "aptos",
    "command": "sb aptos crank pop",
    "topics": [
      "aptos",
      "crank",
      "pop"
    ],
    "markdown": "USAGE\n  $ sb aptos crank pop CRANKHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sb aptos pop crank\n",
    "usage": "sb aptos crank pop CRANKHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json]",
    "args": [
      {
        "arg": "CRANKHEXSTRING",
        "description": "HexString address of the crank"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "pop the crank",
    "aliases": [
      "sb aptos pop crank"
    ]
  },
  {
    "id": "aptos-crank-push",
    "permalink": "/cli/aptos/crank/push",
    "topic": "aptos",
    "command": "sb aptos crank push",
    "topics": [
      "aptos",
      "crank",
      "push"
    ],
    "markdown": "USAGE\n  $ sb aptos crank push CRANKHEXSTRING --keypair <value> -a <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -a, --aggregatorHexString=<value>  (required) HexString address of the aggregator\n  -h, --help                         Show CLI help.\n  -s, --silent                       suppress cli prompts\n  -u, --rpcUrl=<value>               alternate RPC url\n  -v, --verbose                      log everything\n  --keypair=<value>                  (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>               [default: testnet] Aptos network to connect to\n                                     <options: devnet|testnet|mainnet>\n  --profileName=<value>              [default: default] If --keypair is pointing to a yaml file, provide an optional\n                                     profile to load. If none provided, default will be used\n  --programId=<value>                Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sb aptos push crank\n",
    "usage": "sb aptos crank push CRANKHEXSTRING --keypair <value> -a <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json]",
    "args": [
      {
        "arg": "CRANKHEXSTRING",
        "description": "HexString address of the crank"
      }
    ],
    "flags": [
      {
        "flag": " -a, --aggregatorHexString=<value>",
        "description": "(required) HexString address of the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "push an aggregator onto the crank",
    "aliases": [
      "sb aptos push crank"
    ]
  },
  {
    "id": "aptos-create-aggregator",
    "permalink": "/cli/aptos/create/aggregator",
    "topic": "aptos",
    "command": "sb aptos create aggregator",
    "topics": [
      "aptos",
      "create",
      "aggregator"
    ],
    "markdown": "USAGE\n  $ sb aptos create aggregator QUEUEHEXSTRING --keypair <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize <value>]\n    [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [-j <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>      alternate named account that will be the authority for the oracle\n  -h, --help                   Show CLI help.\n  -j, --job=<value>...         filesystem path to job definition file\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          number of oracles requested for each open round call\n  --crankAddress=<value>       optional, address of the crank to add the aggregator to\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --keypair=<value>            (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>           metadata of the aggregator for easier identification\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --name=<value>               name of the aggregator for easier identification\n  --networkId=<option>         [default: testnet] Aptos network to connect to\n                               <options: devnet|testnet|mainnet>\n  --new                        create account at new AptosAccount with authority set to --account\n  --profileName=<value>        [default: default] If --keypair is pointing to a yaml file, provide an optional profile\n                               to load. If none provided, default will be used\n  --programId=<value>          Switchboard programId on the selected Aptos network\n  --updateInterval=<value>     (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>  [default: 0] percentage change between a previous accepted result and the next round\n                               before an oracle reports a value on-chain. Used to conserve lease cost during low\n                               volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aptos aggregator for a given queue\n\nALIASES\n  $ sb aptos create aggregator\n",
    "usage": "sb aptos create aggregator QUEUEHEXSTRING --keypair <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize <value>]\n    [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [-j <value>] [--new]",
    "args": [
      {
        "arg": "QUEUEHEXSTRING",
        "description": "HexString address of the queue"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate named account that will be the authority for the oracle"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-j, --job=<value>...",
        "description": "filesystem path to job definition file"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--batchSize=<value>",
        "description": "number of oracles requested for each open round call"
      },
      {
        "flag": "--crankAddress=<value>",
        "description": "optional, address of the crank to add the aggregator to"
      },
      {
        "flag": "--forceReportPeriod=<value>",
        "description": "Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles."
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the aggregator for easier identification"
      },
      {
        "flag": "--minJobs=<value>",
        "description": "number of jobs that must respond before an oracle responds"
      },
      {
        "flag": "--minOracles=<value>",
        "description": "number of oracles that must respond before a value is accepted on-chain"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the aggregator for easier identification"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--new",
        "description": "create account at new AptosAccount with authority set to --account"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      },
      {
        "flag": "--updateInterval=<value>",
        "description": "(required) set an aggregator's minimum update delay"
      },
      {
        "flag": "--varianceThreshold=<value>",
        "description": "[default: 0] percentage change between a previous accepted result and the next round before an oracle reports a value on-chain. Used to conserve lease cost during low volatility GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create an aptos aggregator for a given queue",
    "aliases": [
      "sb aptos create aggregator"
    ]
  },
  {
    "id": "aptos-create-crank",
    "permalink": "/cli/aptos/create/crank",
    "topic": "aptos",
    "command": "sb aptos create crank",
    "topics": [
      "aptos",
      "create",
      "crank"
    ],
    "markdown": "USAGE\n  $ sb aptos create crank QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [--name <value>] [--metadata <value>] [--maxRows\n    <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString of the oracle queue to create a crank for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --maxRows=<value>      [default: 100] maximum number of rows on the crank\n  --metadata=<value>     metadata of the queue for easier identification\n  --name=<value>         name of the queue for easier identification\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --new                  create account at new AptosAccount with authority set to --account\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sb aptos create crank\n",
    "usage": "sb aptos create crank QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [--name <value>] [--metadata <value>] [--maxRows\n    <value>] [--new]",
    "args": [
      {
        "arg": "QUEUEHEXSTRING",
        "description": "HexString of the oracle queue to create a crank for"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--maxRows=<value>",
        "description": "[default: 100] maximum number of rows on the crank"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the queue for easier identification"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the queue for easier identification"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--new",
        "description": "create account at new AptosAccount with authority set to --account"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new crank",
    "aliases": [
      "sb aptos create crank"
    ]
  },
  {
    "id": "aptos-create-job",
    "permalink": "/cli/aptos/create/job",
    "topic": "aptos",
    "command": "sb aptos create job",
    "topics": [
      "aptos",
      "create",
      "job"
    ],
    "markdown": "USAGE\n  $ sb aptos create job QUEUEHEXSTRING JOBDEFINITION --keypair <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name\n    <value>] [--metadata <value>] [--new] [--weight <value>]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n  JOBDEFINITION   filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the job account\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job for easier identification\n  --name=<value>           name of the job for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n  --weight=<value>         [default: 1] job weight to assign\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new job\n\nALIASES\n  $ sb aptos create job\n",
    "usage": "sb aptos create job QUEUEHEXSTRING JOBDEFINITION --keypair <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name\n    <value>] [--metadata <value>] [--new] [--weight <value>]",
    "args": [
      {
        "arg": "QUEUEHEXSTRING",
        "description": "HexString address of the queue"
      },
      {
        "arg": "",
        "description": "JOBDEFINITION"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate named account that will be the authority for the job account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the job for easier identification"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the job for easier identification"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--new",
        "description": "create account at new AptosAccount with authority set to --account"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      },
      {
        "flag": "--weight=<value>",
        "description": "[default: 1] job weight to assign GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new job",
    "aliases": [
      "sb aptos create job"
    ]
  },
  {
    "id": "aptos-create-oracle",
    "permalink": "/cli/aptos/create/oracle",
    "topic": "aptos",
    "command": "sb aptos create oracle",
    "topics": [
      "aptos",
      "create",
      "oracle"
    ],
    "markdown": "USAGE\n  $ sb aptos create oracle QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the oracle\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the oracle for easier identification\n  --name=<value>           name of the oracle for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a oracle for a given queue\n\nALIASES\n  $ sb aptos create oracle\n",
    "usage": "sb aptos create oracle QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--new]",
    "args": [
      {
        "arg": "QUEUEHEXSTRING",
        "description": "HexString address of the queue"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate named account that will be the authority for the oracle"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the oracle for easier identification"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the oracle for easier identification"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--new",
        "description": "create account at new AptosAccount with authority set to --account"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a oracle for a given queue",
    "aliases": [
      "sb aptos create oracle"
    ]
  },
  {
    "id": "aptos-create-queue",
    "permalink": "/cli/aptos/create/queue",
    "topic": "aptos",
    "command": "sb aptos create queue",
    "topics": [
      "aptos",
      "create",
      "queue"
    ],
    "markdown": "USAGE\n  $ sb aptos create queue --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--minStake\n    <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled] [--unpermissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers] [--lockLeaseFunding] [--new]\n\nFLAGS\n  -a, --authority=<value>  alternate account HexString that will be the authority for the queue\n  -h, --help               Show CLI help.\n  -r, --reward=<value>     oracle rewards for successfully responding to an update request\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --enableBufferRelayers   enable oracles to fulfill buffer relayer requests\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --lockLeaseFunding       lock lease funding\n  --metadata=<value>       metadata of the queue for easier identification\n  --minStake=<value>       minimum stake required by an oracle to join the queue\n  --name=<value>           name of the queue for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --oracleTimeout=<value>  [default: 180] number of oracles to add to the queue\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n  --queueSize=<value>      [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled        permit slashing malicous oracles\n  --unpermissionedFeeds    permit unpermissioned feeds\n  --unpermissionedVrf      permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sb aptos create queue\n",
    "usage": "sb aptos create queue --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--minStake\n    <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled] [--unpermissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers] [--lockLeaseFunding] [--new]",
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate account HexString that will be the authority for the queue"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-r, --reward=<value>",
        "description": "oracle rewards for successfully responding to an update request"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--enableBufferRelayers",
        "description": "enable oracles to fulfill buffer relayer requests"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--lockLeaseFunding",
        "description": "lock lease funding"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the queue for easier identification"
      },
      {
        "flag": "--minStake=<value>",
        "description": "minimum stake required by an oracle to join the queue"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the queue for easier identification"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--new",
        "description": "create account at new AptosAccount with authority set to --account"
      },
      {
        "flag": "--oracleTimeout=<value>",
        "description": "[default: 180] number of oracles to add to the queue"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      },
      {
        "flag": "--queueSize=<value>",
        "description": "[default: 100] maximum number of oracles the queue can support"
      },
      {
        "flag": "--slashingEnabled",
        "description": "permit slashing malicous oracles"
      },
      {
        "flag": "--unpermissionedFeeds",
        "description": "permit unpermissioned feeds"
      },
      {
        "flag": "--unpermissionedVrf",
        "description": "permit unpermissioned VRF accounts GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new oracle queue",
    "aliases": [
      "sb aptos create queue"
    ]
  },
  {
    "id": "aptos-job-create",
    "permalink": "/cli/aptos/job/create",
    "topic": "aptos",
    "command": "sb aptos job create",
    "topics": [
      "aptos",
      "job",
      "create"
    ],
    "markdown": "USAGE\n  $ sb aptos job create QUEUEHEXSTRING JOBDEFINITION --keypair <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name\n    <value>] [--metadata <value>] [--new] [--weight <value>]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n  JOBDEFINITION   filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the job account\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job for easier identification\n  --name=<value>           name of the job for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n  --weight=<value>         [default: 1] job weight to assign\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new job\n\nALIASES\n  $ sb aptos create job\n",
    "usage": "sb aptos job create QUEUEHEXSTRING JOBDEFINITION --keypair <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name\n    <value>] [--metadata <value>] [--new] [--weight <value>]",
    "args": [
      {
        "arg": "QUEUEHEXSTRING",
        "description": "HexString address of the queue"
      },
      {
        "arg": "",
        "description": "JOBDEFINITION"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate named account that will be the authority for the job account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the job for easier identification"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the job for easier identification"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--new",
        "description": "create account at new AptosAccount with authority set to --account"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      },
      {
        "flag": "--weight=<value>",
        "description": "[default: 1] job weight to assign GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new job",
    "aliases": [
      "sb aptos create job"
    ]
  },
  {
    "id": "aptos-list-crank",
    "permalink": "/cli/aptos/list/crank",
    "topic": "aptos",
    "command": "sb aptos list crank",
    "topics": [
      "aptos",
      "list",
      "crank"
    ],
    "markdown": "USAGE\n  $ sb aptos list crank CRANKHEXSTRING [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>] [-u\n    <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --networkId=<option>  [default: testnet] Aptos network to connect to\n                        <options: devnet|testnet|mainnet>\n  --programId=<value>   Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  sort the crank\n\nALIASES\n  $ sb aptos list crank\n",
    "usage": "sb aptos list crank CRANKHEXSTRING [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>] [-u\n    <value>] [--json]",
    "args": [
      {
        "arg": "CRANKHEXSTRING",
        "description": "HexString address of the crank"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "sort the crank",
    "aliases": [
      "sb aptos list crank"
    ]
  },
  {
    "id": "aptos-oracle-create",
    "permalink": "/cli/aptos/oracle/create",
    "topic": "aptos",
    "command": "sb aptos oracle create",
    "topics": [
      "aptos",
      "oracle",
      "create"
    ],
    "markdown": "USAGE\n  $ sb aptos oracle create QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the oracle\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the oracle for easier identification\n  --name=<value>           name of the oracle for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a oracle for a given queue\n\nALIASES\n  $ sb aptos create oracle\n",
    "usage": "sb aptos oracle create QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--new]",
    "args": [
      {
        "arg": "QUEUEHEXSTRING",
        "description": "HexString address of the queue"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate named account that will be the authority for the oracle"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the oracle for easier identification"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the oracle for easier identification"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--new",
        "description": "create account at new AptosAccount with authority set to --account"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a oracle for a given queue",
    "aliases": [
      "sb aptos create oracle"
    ]
  },
  {
    "id": "aptos-oracle-metrics",
    "permalink": "/cli/aptos/oracle/metrics",
    "topic": "aptos",
    "command": "sb aptos oracle metrics",
    "topics": [
      "aptos",
      "oracle",
      "metrics"
    ],
    "markdown": "USAGE\n  $ sb aptos oracle metrics ORACLEHEXSTRING [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>] [-u\n    <value>] [--json]\n\nARGUMENTS\n  ORACLEHEXSTRING  HexString address of the oracle\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --networkId=<option>  [default: testnet] Aptos network to connect to\n                        <options: devnet|testnet|mainnet>\n  --programId=<value>   Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  list oracle metrics\n",
    "usage": "sb aptos oracle metrics ORACLEHEXSTRING [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>] [-u\n    <value>] [--json]",
    "args": [
      {
        "arg": "ORACLEHEXSTRING",
        "description": "HexString address of the oracle"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "list oracle metrics"
  },
  {
    "id": "aptos-oracle-up",
    "permalink": "/cli/aptos/oracle/up",
    "topic": "aptos",
    "command": "sb aptos oracle up",
    "topics": [
      "aptos",
      "oracle",
      "up"
    ],
    "markdown": "USAGE\n  $ sb aptos oracle up ORACLEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [-d <value>] [--releaseChannel testnet|mainnet |\n    --nodeImage <value>]\n\nARGUMENTS\n  ORACLEHEXSTRING  HexString address of the oracle\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress docker logging\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --keypair=<value>             (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>          [default: testnet] Aptos network to connect to\n                                <options: devnet|testnet|mainnet>\n  --nodeImage=<value>           [default: dev-v2-RC_04_11_23_17_12] public key of the oracle to start-up\n  --profileName=<value>         [default: default] If --keypair is pointing to a yaml file, provide an optional profile\n                                to load. If none provided, default will be used\n  --programId=<value>           Switchboard programId on the selected Aptos network\n  --releaseChannel=<option>     [default: testnet] the oracle release channel\n                                <options: testnet|mainnet>\n\nDESCRIPTION\n  start an aptos docker oracle\n",
    "usage": "sb aptos oracle up ORACLEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [-d <value>] [--releaseChannel testnet|mainnet |\n    --nodeImage <value>]",
    "args": [
      {
        "arg": "ORACLEHEXSTRING",
        "description": "HexString address of the oracle"
      }
    ],
    "flags": [
      {
        "flag": " -d, --switchboardDir=<value>",
        "description": "directory with switchboard.env to load a switchboard environment"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress docker logging"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--nodeImage=<value>",
        "description": "[default: dev-v2-RC_04_11_23_17_12] public key of the oracle to start-up"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      },
      {
        "flag": "--releaseChannel=<option>",
        "description": "[default: testnet] the oracle release channel <options: testnet|mainnet>"
      }
    ],
    "description": "start an aptos docker oracle"
  },
  {
    "id": "aptos-permission-create",
    "permalink": "/cli/aptos/permission/create",
    "topic": "aptos",
    "command": "sb aptos permission create",
    "topics": [
      "aptos",
      "permission",
      "create"
    ],
    "markdown": "USAGE\n  $ sb aptos permission create GRANTER --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId\n    <value>] [-u <value>] [--profileName <value>] [--json] [--aggregator <value> | --oracle <value>] [--enable]\n\nARGUMENTS\n  GRANTER  HexString of the oracle queue to create a permission for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --aggregator=<value>   HexString of  the aggregator address to create a permission for\n  --enable               whether to enable the permissions after creation\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --oracle=<value>       HexString of  the aggregator address to create a permission for\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new permission\n",
    "usage": "sb aptos permission create GRANTER --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId\n    <value>] [-u <value>] [--profileName <value>] [--json] [--aggregator <value> | --oracle <value>] [--enable]",
    "args": [
      {
        "arg": "GRANTER",
        "description": "HexString of the oracle queue to create a permission for"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--aggregator=<value>",
        "description": "HexString of the aggregator address to create a permission for"
      },
      {
        "flag": "--enable",
        "description": "whether to enable the permissions after creation"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--oracle=<value>",
        "description": "HexString of the aggregator address to create a permission for"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new permission"
  },
  {
    "id": "aptos-permission-set",
    "permalink": "/cli/aptos/permission/set",
    "topic": "aptos",
    "command": "sb aptos permission set",
    "topics": [
      "aptos",
      "permission",
      "set"
    ],
    "markdown": "USAGE\n  $ sb aptos permission set GRANTER --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId\n    <value>] [-u <value>] [--profileName <value>] [--json] [--aggregator <value> | --oracle <value>] [--enable]\n\nARGUMENTS\n  GRANTER  HexString of the oracle queue to create a permission for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --aggregator=<value>   HexString of  the aggregator address to create a permission for\n  --enable               whether to enable the permissions after creation\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --oracle=<value>       HexString of  the aggregator address to create a permission for\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new permission\n",
    "usage": "sb aptos permission set GRANTER --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId\n    <value>] [-u <value>] [--profileName <value>] [--json] [--aggregator <value> | --oracle <value>] [--enable]",
    "args": [
      {
        "arg": "GRANTER",
        "description": "HexString of the oracle queue to create a permission for"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--aggregator=<value>",
        "description": "HexString of the aggregator address to create a permission for"
      },
      {
        "flag": "--enable",
        "description": "whether to enable the permissions after creation"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--oracle=<value>",
        "description": "HexString of the aggregator address to create a permission for"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new permission"
  },
  {
    "id": "aptos-pop-crank",
    "permalink": "/cli/aptos/pop/crank",
    "topic": "aptos",
    "command": "sb aptos pop crank",
    "topics": [
      "aptos",
      "pop",
      "crank"
    ],
    "markdown": "USAGE\n  $ sb aptos pop crank CRANKHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sb aptos pop crank\n",
    "usage": "sb aptos pop crank CRANKHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json]",
    "args": [
      {
        "arg": "CRANKHEXSTRING",
        "description": "HexString address of the crank"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "pop the crank",
    "aliases": [
      "sb aptos pop crank"
    ]
  },
  {
    "id": "aptos-print",
    "permalink": "/cli/aptos/print",
    "topic": "aptos",
    "command": "sb aptos print",
    "topics": [
      "aptos",
      "print"
    ],
    "markdown": "USAGE\n  $ sb aptos print ACCOUNTTYPE ADDRESS [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--json]\n\nARGUMENTS\n  ACCOUNTTYPE  (queue|aggregator|crank|oracle|permission|lease|job|state) account type to print\n  ADDRESS      HexString address of the account to print\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --networkId=<option>  [default: testnet] Aptos network to connect to\n                        <options: devnet|testnet|mainnet>\n  --programId=<value>   Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aptos account\n\nALIASES\n  $ sb aptos print\n",
    "usage": "sb aptos print ACCOUNTTYPE ADDRESS [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--json]",
    "args": [
      {
        "arg": "ACCOUNTTYPE",
        "description": "(queue|aggregator|crank|oracle|permission|lease|job|state) account type to print"
      },
      {
        "arg": "",
        "description": "ADDRESS"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print an aptos account",
    "aliases": [
      "sb aptos print"
    ]
  },
  {
    "id": "aptos-push-crank",
    "permalink": "/cli/aptos/push/crank",
    "topic": "aptos",
    "command": "sb aptos push crank",
    "topics": [
      "aptos",
      "push",
      "crank"
    ],
    "markdown": "USAGE\n  $ sb aptos push crank CRANKHEXSTRING --keypair <value> -a <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -a, --aggregatorHexString=<value>  (required) HexString address of the aggregator\n  -h, --help                         Show CLI help.\n  -s, --silent                       suppress cli prompts\n  -u, --rpcUrl=<value>               alternate RPC url\n  -v, --verbose                      log everything\n  --keypair=<value>                  (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>               [default: testnet] Aptos network to connect to\n                                     <options: devnet|testnet|mainnet>\n  --profileName=<value>              [default: default] If --keypair is pointing to a yaml file, provide an optional\n                                     profile to load. If none provided, default will be used\n  --programId=<value>                Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sb aptos push crank\n",
    "usage": "sb aptos push crank CRANKHEXSTRING --keypair <value> -a <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json]",
    "args": [
      {
        "arg": "CRANKHEXSTRING",
        "description": "HexString address of the crank"
      }
    ],
    "flags": [
      {
        "flag": " -a, --aggregatorHexString=<value>",
        "description": "(required) HexString address of the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "push an aggregator onto the crank",
    "aliases": [
      "sb aptos push crank"
    ]
  },
  {
    "id": "aptos-queue-create",
    "permalink": "/cli/aptos/queue/create",
    "topic": "aptos",
    "command": "sb aptos queue create",
    "topics": [
      "aptos",
      "queue",
      "create"
    ],
    "markdown": "USAGE\n  $ sb aptos queue create --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--minStake\n    <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled] [--unpermissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers] [--lockLeaseFunding] [--new]\n\nFLAGS\n  -a, --authority=<value>  alternate account HexString that will be the authority for the queue\n  -h, --help               Show CLI help.\n  -r, --reward=<value>     oracle rewards for successfully responding to an update request\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --enableBufferRelayers   enable oracles to fulfill buffer relayer requests\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --lockLeaseFunding       lock lease funding\n  --metadata=<value>       metadata of the queue for easier identification\n  --minStake=<value>       minimum stake required by an oracle to join the queue\n  --name=<value>           name of the queue for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --oracleTimeout=<value>  [default: 180] number of oracles to add to the queue\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n  --queueSize=<value>      [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled        permit slashing malicous oracles\n  --unpermissionedFeeds    permit unpermissioned feeds\n  --unpermissionedVrf      permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sb aptos create queue\n",
    "usage": "sb aptos queue create --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--minStake\n    <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled] [--unpermissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers] [--lockLeaseFunding] [--new]",
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate account HexString that will be the authority for the queue"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-r, --reward=<value>",
        "description": "oracle rewards for successfully responding to an update request"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--enableBufferRelayers",
        "description": "enable oracles to fulfill buffer relayer requests"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--lockLeaseFunding",
        "description": "lock lease funding"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the queue for easier identification"
      },
      {
        "flag": "--minStake=<value>",
        "description": "minimum stake required by an oracle to join the queue"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the queue for easier identification"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--new",
        "description": "create account at new AptosAccount with authority set to --account"
      },
      {
        "flag": "--oracleTimeout=<value>",
        "description": "[default: 180] number of oracles to add to the queue"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      },
      {
        "flag": "--queueSize=<value>",
        "description": "[default: 100] maximum number of oracles the queue can support"
      },
      {
        "flag": "--slashingEnabled",
        "description": "permit slashing malicous oracles"
      },
      {
        "flag": "--unpermissionedFeeds",
        "description": "permit unpermissioned feeds"
      },
      {
        "flag": "--unpermissionedVrf",
        "description": "permit unpermissioned VRF accounts GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new oracle queue",
    "aliases": [
      "sb aptos create queue"
    ]
  },
  {
    "id": "aptos-update-aggregator",
    "permalink": "/cli/aptos/update/aggregator",
    "topic": "aptos",
    "command": "sb aptos update aggregator",
    "topics": [
      "aptos",
      "update",
      "aggregator"
    ],
    "markdown": "USAGE\n  $ sb aptos update aggregator AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sb aptos update aggregator\n",
    "usage": "sb aptos update aggregator AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>]",
    "args": [
      {
        "arg": "AGGREGATORHEXSTRING",
        "description": "HexString address of the aggregator"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--keypair=<value>",
        "description": "(required) Path to AptosAccount keypair or config.yaml file"
      },
      {
        "flag": "--networkId=<option>",
        "description": "[default: testnet] Aptos network to connect to <options: devnet|testnet|mainnet>"
      },
      {
        "flag": "--profileName=<value>",
        "description": "[default: default] If --keypair is pointing to a yaml file, provide an optional profile to load. If none provided, default will be used"
      },
      {
        "flag": "--programId=<value>",
        "description": "Switchboard programId on the selected Aptos network"
      }
    ],
    "description": "request a new value on-chain for an aggregator",
    "aliases": [
      "sb aptos update aggregator"
    ]
  },
  {
    "id": "config-print",
    "permalink": "/cli/config/print",
    "topic": "config",
    "command": "sb config print",
    "topics": [
      "config",
      "print"
    ],
    "markdown": "USAGE\n  $ sb config print [-h] [-v] [-s] [--json]\n\nFLAGS\n  -h, --help     Show CLI help.\n  -s, --silent   suppress cli prompts\n  -v, --verbose  log everything\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print cli config\n\nEXAMPLES\n  $ sb config:print\n",
    "usage": "sb config print [-h] [-v] [-s] [--json]",
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print cli config",
    "examples": [
      "sb config:print"
    ]
  },
  {
    "id": "config-set",
    "permalink": "/cli/config/set",
    "topic": "config",
    "command": "sb config set",
    "topics": [
      "config",
      "set"
    ],
    "markdown": "USAGE\n  $ sb config set CHAIN NETWORK PARAMETER [VALUE] [-h] [-v] [-s] [-r]\n\nARGUMENTS\n  CHAIN      chain to set a config parameter\n  NETWORK    network of chain to set parameter\n  PARAMETER  (rpc|default-account|account) parameter to set\n  VALUE      value of the param to set\n\nFLAGS\n  -h, --help     Show CLI help.\n  -r, --reset    remove value or set to default rpc\n  -s, --silent   suppress cli prompts\n  -v, --verbose  log everything\n\nDESCRIPTION\n  set a configuration option\n",
    "usage": "sb config set CHAIN NETWORK PARAMETER [VALUE] [-h] [-v] [-s] [-r]",
    "args": [
      {
        "arg": "CHAIN",
        "description": "chain to set a config parameter"
      },
      {
        "arg": "",
        "description": "NETWORK"
      },
      {
        "arg": "",
        "description": "PARAMETER"
      },
      {
        "arg": "",
        "description": "VALUE"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-r, --reset",
        "description": "remove value or set to default rpc"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      }
    ],
    "description": "set a configuration option"
  },
  {
    "id": "evm-enclave-print",
    "permalink": "/cli/evm/enclave/print",
    "topic": "evm",
    "command": "sb evm enclave print",
    "topics": [
      "evm",
      "enclave",
      "print"
    ],
    "markdown": "USAGE\n  $ sb evm enclave print ENCLAVEKEY [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao |\n    --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>]\n    [--programId <value>] [--json]\n\nARGUMENTS\n  ENCLAVEKEY  address of the enclave\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --mainnet             use the mainnet network\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print an enclave's state\n\nEXAMPLES\n  $ sb evm enclave print 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49\n",
    "usage": "sb evm enclave print ENCLAVEKEY [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao |\n    --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>]\n    [--programId <value>] [--json]",
    "args": [
      {
        "arg": "ENCLAVEKEY",
        "description": "address of the enclave"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Print an enclave's state",
    "examples": [
      "sb evm enclave print 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49"
    ]
  },
  {
    "id": "evm-function-add",
    "permalink": "/cli/evm/function/add",
    "topic": "evm",
    "command": "sb evm function add",
    "topics": [
      "evm",
      "function",
      "add"
    ],
    "markdown": "USAGE\n  $ sb evm function add-enclave FUNCTIONKEY --account <value> --mrEnclave <value> [-h] [-v] [-s] [--chain\n    coredao|arbitrum|optimism|base|aurora | --coredao | --arbitrum | --optimism | --base | --aurora] [--network\n    mainnet|testnet | --mainnet | --testnet] [-u <value>] [--programId <value>] [--json]\n\nARGUMENTS\n  FUNCTIONKEY  address of the function account\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --account=<value>     (required) Path to file containing the private key for the payer account\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --mainnet             use the mainnet network\n  --mrEnclave=<value>   (required) The MrEnclave to add\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Add MrEnclave to a function account\n\nEXAMPLES\n  $ sb evm function add-enclave $FUNCTION_ID --chain arbitrum --network testnet --mrEnclave $MEASUREMENT --account ../.kp.txt --programId $SWITCHBOARD_ADDRESS\n",
    "usage": "sb evm function add-enclave FUNCTIONKEY --account <value> --mrEnclave <value> [-h] [-v] [-s] [--chain\n    coredao|arbitrum|optimism|base|aurora | --coredao | --arbitrum | --optimism | --base | --aurora] [--network\n    mainnet|testnet | --mainnet | --testnet] [-u <value>] [--programId <value>] [--json]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "address of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--account=<value>",
        "description": "(required) Path to file containing the private key for the payer account"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--mrEnclave=<value>",
        "description": "(required) The MrEnclave to add"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Add MrEnclave to a function account",
    "examples": [
      "sb evm function add-enclave $FUNCTION_ID --chain arbitrum --network testnet --mrEnclave $MEASUREMENT --account ../.kp.txt --programId $SWITCHBOARD_ADDRESS"
    ]
  },
  {
    "id": "evm-function-configure",
    "permalink": "/cli/evm/function/configure",
    "topic": "evm",
    "command": "sb evm function configure",
    "topics": [
      "evm",
      "function",
      "configure"
    ],
    "markdown": "USAGE\n  $ sb evm function configure FUNCTIONKEY --account <value> [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora |\n    --coredao | --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u\n    <value>] [--programId <value>] [--json] [--name <value>] [--authority <value>] [--containerRegistry <value>]\n    [--container <value>] [--version <value>]\n\nARGUMENTS\n  FUNCTIONKEY  address of the function account\n\nFLAGS\n  -h, --help                   Show CLI help.\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --account=<value>            (required) Path to file containing the private key for the payer account\n  --arbitrum                   use the arbitrum chain\n  --aurora                     use the aurora chain\n  --authority=<value>          update the authority for the function\n  --base                       use the base chain\n  --chain=<option>             the evm chain to interact with\n                               <options: coredao|arbitrum|optimism|base|aurora>\n  --container=<value>          update the container for the function\n  --containerRegistry=<value>  update the container registry for the function\n  --coredao                    use the coredao chain\n  --mainnet                    use the mainnet network\n  --name=<value>               update the name for the function\n  --network=<option>           the EVM network to connect to\n                               <options: mainnet|testnet>\n  --optimism                   use the optimism chain\n  --programId=<value>          alternative Switchboard program ID to interact with\n  --testnet                    use the testnet network\n  --version=<value>            update the container version for the function\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Configure a function account\n\nEXAMPLES\n  $ sb evm function fund 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --fundAmount 0.02 --account ~/.arbitrum-kp.txt --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49\n",
    "usage": "sb evm function configure FUNCTIONKEY --account <value> [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora |\n    --coredao | --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u\n    <value>] [--programId <value>] [--json] [--name <value>] [--authority <value>] [--containerRegistry <value>]\n    [--container <value>] [--version <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "address of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--account=<value>",
        "description": "(required) Path to file containing the private key for the payer account"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--authority=<value>",
        "description": "update the authority for the function"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--container=<value>",
        "description": "update the container for the function"
      },
      {
        "flag": "--containerRegistry=<value>",
        "description": "update the container registry for the function"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--name=<value>",
        "description": "update the name for the function"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network"
      },
      {
        "flag": "--version=<value>",
        "description": "update the container version for the function GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Configure a function account",
    "examples": [
      "sb evm function fund 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --fundAmount 0.02 --account ~/.arbitrum-kp.txt --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49"
    ]
  },
  {
    "id": "evm-function-create",
    "permalink": "/cli/evm/function/create",
    "topic": "evm",
    "command": "sb evm function create",
    "topics": [
      "evm",
      "function",
      "create"
    ],
    "markdown": "USAGE\n  $ sb evm function create QUEUEKEY --account <value> --container <value> [-h] [-v] [-s] [--chain\n    coredao|arbitrum|optimism|base|aurora | --coredao | --arbitrum | --optimism | --base | --aurora] [--network\n    mainnet|testnet | --mainnet | --testnet] [-u <value>] [--programId <value>] [--json] [-n <value>] [-a <value>]\n    [--fundAmount <value>] [--containerRegistry dockerhub|ipfs] [--version <value>] [--mrEnclave <value>]\n\nARGUMENTS\n  QUEUEKEY  address of the attestation queue account\n\nFLAGS\n  -a, --authority=<value>       keypair or address to delegate authority to for managing the function account\n  -h, --help                    Show CLI help.\n  -n, --name=<value>            name of the function for easier identification\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --account=<value>             (required) Path to file containing the private key for the payer account\n  --arbitrum                    use the arbitrum chain\n  --aurora                      use the aurora chain\n  --base                        use the base chain\n  --chain=<option>              the evm chain to interact with\n                                <options: coredao|arbitrum|optimism|base|aurora>\n  --container=<value>           (required) the location of the container (Ex. switchboardlabs/basic-oracle-function)\n  --containerRegistry=<option>  [default: dockerhub] the registry to pull the container from (Ex. Docker or IPFS)\n                                <options: dockerhub|ipfs>\n  --coredao                     use the coredao chain\n  --fundAmount=<value>          [default: 0.0] token amount to load into the function's escrow wallet.\n  --mainnet                     use the mainnet network\n  --mrEnclave=<value>           the MrEnclave value to set for the function - if not provided, will be set automatically\n                                after its first run\n  --network=<option>            the EVM network to connect to\n                                <options: mainnet|testnet>\n  --optimism                    use the optimism chain\n  --programId=<value>           alternative Switchboard program ID to interact with\n  --testnet                     use the testnet network\n  --version=<value>             [default: latest] the version of the container to pull from the registry (Ex. 'latest'\n                                or 'mainnet')\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new function account for a given queue\n\nEXAMPLES\n  $ sb evm function create F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --name function-1 --fundAmount 0.25 --container switchboardlabs/basic-oracle-function --version latest\n",
    "usage": "sb evm function create QUEUEKEY --account <value> --container <value> [-h] [-v] [-s] [--chain\n    coredao|arbitrum|optimism|base|aurora | --coredao | --arbitrum | --optimism | --base | --aurora] [--network\n    mainnet|testnet | --mainnet | --testnet] [-u <value>] [--programId <value>] [--json] [-n <value>] [-a <value>]\n    [--fundAmount <value>] [--containerRegistry dockerhub|ipfs] [--version <value>] [--mrEnclave <value>]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "address of the attestation queue account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair or address to delegate authority to for managing the function account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-n, --name=<value>",
        "description": "name of the function for easier identification"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--account=<value>",
        "description": "(required) Path to file containing the private key for the payer account"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--container=<value>",
        "description": "(required) the location of the container (Ex. switchboardlabs/basic-oracle-function)"
      },
      {
        "flag": "--containerRegistry=<option>",
        "description": "[default: dockerhub] the registry to pull the container from (Ex. Docker or IPFS) <options: dockerhub|ipfs>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--fundAmount=<value>",
        "description": "[default: 0.0] token amount to load into the function's escrow wallet."
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--mrEnclave=<value>",
        "description": "the MrEnclave value to set for the function - if not provided, will be set automatically after its first run"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network"
      },
      {
        "flag": "--version=<value>",
        "description": "[default: latest] the version of the container to pull from the registry (Ex. 'latest' or 'mainnet') GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new function account for a given queue",
    "examples": [
      "sb evm function create F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --name function-1 --fundAmount 0.25 --container switchboardlabs/basic-oracle-function --version latest"
    ]
  },
  {
    "id": "evm-function-fund",
    "permalink": "/cli/evm/function/fund",
    "topic": "evm",
    "command": "sb evm function fund",
    "topics": [
      "evm",
      "function",
      "fund"
    ],
    "markdown": "USAGE\n  $ sb evm function fund FUNCTIONKEY --account <value> [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora |\n    --coredao | --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u\n    <value>] [--programId <value>] [--json] [--fundAmount <value>]\n\nARGUMENTS\n  FUNCTIONKEY  address of the function account\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --account=<value>     (required) Path to file containing the private key for the payer account\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --fundAmount=<value>  [default: 0.0] token amount to load into the function's escrow wallet.\n  --mainnet             use the mainnet network\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Fund a function account\n\nEXAMPLES\n  $ sb evm function fund 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --fundAmount 0.02 --account ~/.arbitrum-kp.txt --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49\n",
    "usage": "sb evm function fund FUNCTIONKEY --account <value> [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora |\n    --coredao | --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u\n    <value>] [--programId <value>] [--json] [--fundAmount <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "address of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--account=<value>",
        "description": "(required) Path to file containing the private key for the payer account"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--fundAmount=<value>",
        "description": "[default: 0.0] token amount to load into the function's escrow wallet."
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Fund a function account",
    "examples": [
      "sb evm function fund 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --fundAmount 0.02 --account ~/.arbitrum-kp.txt --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49"
    ]
  },
  {
    "id": "evm-function-print",
    "permalink": "/cli/evm/function/print",
    "topic": "evm",
    "command": "sb evm function print",
    "topics": [
      "evm",
      "function",
      "print"
    ],
    "markdown": "USAGE\n  $ sb evm function print FUNCTIONKEY [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao |\n    --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>]\n    [--programId <value>] [--json]\n\nARGUMENTS\n  FUNCTIONKEY  address of the function account\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --mainnet             use the mainnet network\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print a function account\n\nEXAMPLES\n  $ sb evm function print 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49\n",
    "usage": "sb evm function print FUNCTIONKEY [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao |\n    --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>]\n    [--programId <value>] [--json]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "address of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Print a function account",
    "examples": [
      "sb evm function print 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49"
    ]
  },
  {
    "id": "evm-function-remove",
    "permalink": "/cli/evm/function/remove",
    "topic": "evm",
    "command": "sb evm function remove",
    "topics": [
      "evm",
      "function",
      "remove"
    ],
    "markdown": "USAGE\n  $ sb evm function remove-enclave FUNCTIONKEY --account <value> --mrEnclave <value> [-h] [-v] [-s] [--chain\n    coredao|arbitrum|optimism|base|aurora | --coredao | --arbitrum | --optimism | --base | --aurora] [--network\n    mainnet|testnet | --mainnet | --testnet] [-u <value>] [--programId <value>] [--json]\n\nARGUMENTS\n  FUNCTIONKEY  address of the function account\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --account=<value>     (required) Path to file containing the private key for the payer account\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --mainnet             use the mainnet network\n  --mrEnclave=<value>   (required) The MrEnclave to remove\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Remove MrEnclave to a function account\n\nEXAMPLES\n  $ sb evm function removeMrEnclave 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --removeMrEnclace 0xDEADBEEF --account ~/.arbitrum-kp.txt --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49\n",
    "usage": "sb evm function remove-enclave FUNCTIONKEY --account <value> --mrEnclave <value> [-h] [-v] [-s] [--chain\n    coredao|arbitrum|optimism|base|aurora | --coredao | --arbitrum | --optimism | --base | --aurora] [--network\n    mainnet|testnet | --mainnet | --testnet] [-u <value>] [--programId <value>] [--json]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "address of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--account=<value>",
        "description": "(required) Path to file containing the private key for the payer account"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--mrEnclave=<value>",
        "description": "(required) The MrEnclave to remove"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Remove MrEnclave to a function account",
    "examples": [
      "sb evm function removeMrEnclave 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --removeMrEnclace 0xDEADBEEF --account ~/.arbitrum-kp.txt --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49"
    ]
  },
  {
    "id": "evm-function-test",
    "permalink": "/cli/evm/function/test",
    "topic": "evm",
    "command": "sb evm function test",
    "topics": [
      "evm",
      "function",
      "test"
    ],
    "markdown": "USAGE\n  $ sb evm function test [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao | --arbitrum |\n    --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>] [--programId\n    <value>] [--json] [--parameters <value>]\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --mainnet             use the mainnet network\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --parameters=<value>  Parameters to pass to the run\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Test a local function before publishing\n\nEXAMPLES\n  $ sb evm function test --parameters 'uint256:1,string:hello\n",
    "usage": "sb evm function test [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao | --arbitrum |\n    --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>] [--programId\n    <value>] [--json] [--parameters <value>]",
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--parameters=<value>",
        "description": "Parameters to pass to the run"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Test a local function before publishing",
    "examples": [
      "sb evm function test --parameters 'uint256:1,string:hello"
    ]
  },
  {
    "id": "evm-queue-print",
    "permalink": "/cli/evm/queue/print",
    "topic": "evm",
    "command": "sb evm queue print",
    "topics": [
      "evm",
      "queue",
      "print"
    ],
    "markdown": "USAGE\n  $ sb evm queue print QUEUEKEY [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao |\n    --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>]\n    [--programId <value>] [--json]\n\nARGUMENTS\n  QUEUEKEY  address of the attestation queue\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --mainnet             use the mainnet network\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print an attestation queue account\n\nEXAMPLES\n  $ sb evm queue print 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49\n",
    "usage": "sb evm queue print QUEUEKEY [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao |\n    --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>]\n    [--programId <value>] [--json]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "address of the attestation queue"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Print an attestation queue account",
    "examples": [
      "sb evm queue print 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49"
    ]
  },
  {
    "id": "evm-request-print",
    "permalink": "/cli/evm/request/print",
    "topic": "evm",
    "command": "sb evm request print",
    "topics": [
      "evm",
      "request",
      "print"
    ],
    "markdown": "USAGE\n  $ sb evm request print REQUESTKEY [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao |\n    --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>]\n    [--programId <value>] [--json]\n\nARGUMENTS\n  REQUESTKEY  address of the request account\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --mainnet             use the mainnet network\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print a function request\n\nEXAMPLES\n  $ sb evm request print 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49\n",
    "usage": "sb evm request print REQUESTKEY [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao |\n    --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>]\n    [--programId <value>] [--json]",
    "args": [
      {
        "arg": "REQUESTKEY",
        "description": "address of the request account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Print a function request",
    "examples": [
      "sb evm request print 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49"
    ]
  },
  {
    "id": "evm-request-send",
    "permalink": "/cli/evm/request/send",
    "topic": "evm",
    "command": "sb evm request send",
    "topics": [
      "evm",
      "request",
      "send"
    ],
    "markdown": "USAGE\n  $ sb evm request send FUNCTIONKEY --account <value> [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora |\n    --coredao | --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u\n    <value>] [--programId <value>] [--json] [-a <value>] [--fundAmount <value>] [--params <value>]\n\nARGUMENTS\n  FUNCTIONKEY  address of the function account\n\nFLAGS\n  -a, --authority=<value>  keypair or address to delegate authority to for managing the function account\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --account=<value>        (required) Path to file containing the private key for the payer account\n  --arbitrum               use the arbitrum chain\n  --aurora                 use the aurora chain\n  --base                   use the base chain\n  --chain=<option>         the evm chain to interact with\n                           <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao                use the coredao chain\n  --fundAmount=<value>     [default: 0.0] token amount to load into the function's escrow wallet.\n  --mainnet                use the mainnet network\n  --network=<option>       the EVM network to connect to\n                           <options: mainnet|testnet>\n  --optimism               use the optimism chain\n  --params=<value>         The parameters to send in this request\n  --programId=<value>      alternative Switchboard program ID to interact with\n  --testnet                use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new function account for a given queue\n\nEXAMPLES\n  $ sb evm function send F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --fundAmount 0.01 --params abc123\n",
    "usage": "sb evm request send FUNCTIONKEY --account <value> [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora |\n    --coredao | --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u\n    <value>] [--programId <value>] [--json] [-a <value>] [--fundAmount <value>] [--params <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "address of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair or address to delegate authority to for managing the function account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--account=<value>",
        "description": "(required) Path to file containing the private key for the payer account"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--fundAmount=<value>",
        "description": "[default: 0.0] token amount to load into the function's escrow wallet."
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--params=<value>",
        "description": "The parameters to send in this request"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new function account for a given queue",
    "examples": [
      "sb evm function send F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --fundAmount 0.01 --params abc123"
    ]
  },
  {
    "id": "evm-routine-create",
    "permalink": "/cli/evm/routine/create",
    "topic": "evm",
    "command": "sb evm routine create",
    "topics": [
      "evm",
      "routine",
      "create"
    ],
    "markdown": "USAGE\n  $ sb evm routine create FUNCTIONKEY --account <value> [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora |\n    --coredao | --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u\n    <value>] [--programId <value>] [--json] [--authority <value>] [--fundAmount <value>] [--schedule <value>] [--params\n    <value>]\n\nARGUMENTS\n  FUNCTIONKEY  address of the function account\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --account=<value>     (required) Path to file containing the private key for the payer account\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --authority=<value>   keypair or address to delegate authority to for managing the function account\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --fundAmount=<value>  [default: 0.0] token amount to load into the function's escrow wallet.\n  --mainnet             use the mainnet network\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --params=<value>      the parameters this routine should pass to the function\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --schedule=<value>    the cron schedule to execute the function periodically (Ex. '15 * * * * *' will execute the\n                        function every 15 seconds)\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new routine account for a given function\n\nEXAMPLES\n  $ sb evm routine create F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --fundAmount 0.25 --container \"mgild/randomness\" --version latest\n",
    "usage": "sb evm routine create FUNCTIONKEY --account <value> [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora |\n    --coredao | --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u\n    <value>] [--programId <value>] [--json] [--authority <value>] [--fundAmount <value>] [--schedule <value>] [--params\n    <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "address of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--account=<value>",
        "description": "(required) Path to file containing the private key for the payer account"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--authority=<value>",
        "description": "keypair or address to delegate authority to for managing the function account"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--fundAmount=<value>",
        "description": "[default: 0.0] token amount to load into the function's escrow wallet."
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--params=<value>",
        "description": "the parameters this routine should pass to the function"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--schedule=<value>",
        "description": "the cron schedule to execute the function periodically (Ex. '15 * * * * *' will execute the function every 15 seconds)"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new routine account for a given function",
    "examples": [
      "sb evm routine create F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --fundAmount 0.25 --container \"mgild/randomness\" --version latest"
    ]
  },
  {
    "id": "evm-routine-fund",
    "permalink": "/cli/evm/routine/fund",
    "topic": "evm",
    "command": "sb evm routine fund",
    "topics": [
      "evm",
      "routine",
      "fund"
    ],
    "markdown": "USAGE\n  $ sb evm routine fund ROUTINEKEY --account <value> [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora |\n    --coredao | --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u\n    <value>] [--programId <value>] [--json] [--fundAmount <value>]\n\nARGUMENTS\n  ROUTINEKEY  address of the routine account\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --account=<value>     (required) Path to file containing the private key for the payer account\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --fundAmount=<value>  [default: 0.0] token amount to load into the function's escrow wallet.\n  --mainnet             use the mainnet network\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new routine account for a given function\n\nEXAMPLES\n  $ sb evm routine fund F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --fundAmount 0.25\n",
    "usage": "sb evm routine fund ROUTINEKEY --account <value> [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora |\n    --coredao | --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u\n    <value>] [--programId <value>] [--json] [--fundAmount <value>]",
    "args": [
      {
        "arg": "ROUTINEKEY",
        "description": "address of the routine account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--account=<value>",
        "description": "(required) Path to file containing the private key for the payer account"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--fundAmount=<value>",
        "description": "[default: 0.0] token amount to load into the function's escrow wallet."
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new routine account for a given function",
    "examples": [
      "sb evm routine fund F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --fundAmount 0.25"
    ]
  },
  {
    "id": "evm-routine-print",
    "permalink": "/cli/evm/routine/print",
    "topic": "evm",
    "command": "sb evm routine print",
    "topics": [
      "evm",
      "routine",
      "print"
    ],
    "markdown": "USAGE\n  $ sb evm routine print ROUTINEKEY [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao |\n    --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>]\n    [--programId <value>] [--json]\n\nARGUMENTS\n  ROUTINEKEY  address of the routine account\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --arbitrum            use the arbitrum chain\n  --aurora              use the aurora chain\n  --base                use the base chain\n  --chain=<option>      the evm chain to interact with\n                        <options: coredao|arbitrum|optimism|base|aurora>\n  --coredao             use the coredao chain\n  --mainnet             use the mainnet network\n  --network=<option>    the EVM network to connect to\n                        <options: mainnet|testnet>\n  --optimism            use the optimism chain\n  --programId=<value>   alternative Switchboard program ID to interact with\n  --testnet             use the testnet network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print a function routine\n\nEXAMPLES\n  $ sb evm routine print 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49\n",
    "usage": "sb evm routine print ROUTINEKEY [-h] [-v] [-s] [--chain coredao|arbitrum|optimism|base|aurora | --coredao |\n    --arbitrum | --optimism | --base | --aurora] [--network mainnet|testnet | --mainnet | --testnet] [-u <value>]\n    [--programId <value>] [--json]",
    "args": [
      {
        "arg": "ROUTINEKEY",
        "description": "address of the routine account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--arbitrum",
        "description": "use the arbitrum chain"
      },
      {
        "flag": "--aurora",
        "description": "use the aurora chain"
      },
      {
        "flag": "--base",
        "description": "use the base chain"
      },
      {
        "flag": "--chain=<option>",
        "description": "the evm chain to interact with <options: coredao|arbitrum|optimism|base|aurora>"
      },
      {
        "flag": "--coredao",
        "description": "use the coredao chain"
      },
      {
        "flag": "--mainnet",
        "description": "use the mainnet network"
      },
      {
        "flag": "--network=<option>",
        "description": "the EVM network to connect to <options: mainnet|testnet>"
      },
      {
        "flag": "--optimism",
        "description": "use the optimism chain"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--testnet",
        "description": "use the testnet network GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Print a function routine",
    "examples": [
      "sb evm routine print 0xaA43ba6f18b138A0B3313dDbFaC2b920D240108E --chain arbitrum --network testnet --programId 0x4F706C62535d171883A6cc9384f3f3d926A6BA49"
    ]
  },
  {
    "id": "solana-aggregator-add_history",
    "permalink": "/cli/solana/aggregator/add_history",
    "topic": "solana",
    "command": "sb solana aggregator add history",
    "topics": [
      "solana",
      "aggregator",
      "add",
      "history"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator add history AGGREGATORKEY --historyLimit <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--force] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the aggregator\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --force                         overwrite an existing history buffer if one already exists\n  --historyLimit=<value>          (required) the number of samples to store before overwriting old samples\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  add a history buffer to an aggregator\n\nEXAMPLES\n  $ sb solana:aggregator:add:history\n",
    "usage": "sb solana aggregator add history AGGREGATORKEY --historyLimit <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--force] [-a <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--force",
        "description": "overwrite an existing history buffer if one already exists"
      },
      {
        "flag": "--historyLimit=<value>",
        "description": "(required) the number of samples to store before overwriting old samples"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "add a history buffer to an aggregator",
    "examples": [
      "sb solana:aggregator:add:history"
    ]
  },
  {
    "id": "solana-aggregator-add_job",
    "permalink": "/cli/solana/aggregator/add_job",
    "topic": "solana",
    "command": "sb solana aggregator add job",
    "topics": [
      "solana",
      "aggregator",
      "add",
      "job"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator add job AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--jobDefinition <value>] [--jobKey <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the aggregator\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --jobDefinition=<value>...      filesystem path of job json definition file\n  --jobKey=<value>...             public key of an existing job account to add to an aggregator\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  add jobs to an aggregator\n\nEXAMPLES\n  $ sb solana aggregator add job\n",
    "usage": "sb solana aggregator add job AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--jobDefinition <value>] [--jobKey <value>] [-a <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--jobDefinition=<value>...",
        "description": "filesystem path of job json definition file"
      },
      {
        "flag": "--jobKey=<value>...",
        "description": "public key of an existing job account to add to an aggregator"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "add jobs to an aggregator",
    "examples": [
      "sb solana aggregator add job"
    ]
  },
  {
    "id": "solana-aggregator-authority",
    "permalink": "/cli/solana/aggregator/authority",
    "topic": "solana",
    "command": "sb solana aggregator authority",
    "topics": [
      "solana",
      "aggregator",
      "authority"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator authority AGGREGATORKEY --newAuthority <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the aggregator and required to make config\n                                  changes\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --newAuthority=<value>          (required)\n  --programId=<value>             alternative Switchboard program ID to interact with\n",
    "usage": "sb solana aggregator authority AGGREGATORKEY --newAuthority <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the aggregator and required to make config\n                                  changes\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --newAuthority=<value>          (required)\n  --programId=<value>             alternative Switchboard program ID to interact with"
  },
  {
    "id": "solana-aggregator-close",
    "permalink": "/cli/solana/aggregator/close",
    "topic": "solana",
    "command": "sb solana aggregator close",
    "topics": [
      "solana",
      "aggregator",
      "close"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator close AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the aggregator and required to make config\n                                  changes\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  close an aggregator and associated PDA accounts on devnet\n\nEXAMPLES\n  $ sb solana aggregator close J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n",
    "usage": "sb solana aggregator close AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator and required to make config changes"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "close an aggregator and associated PDA accounts on devnet",
    "examples": [
      "sb solana aggregator close J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-aggregator-create",
    "permalink": "/cli/solana/aggregator/create",
    "topic": "solana",
    "command": "sb solana aggregator create",
    "topics": [
      "solana",
      "aggregator",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator create QUEUEKEY --updateInterval <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--aggregatorKeypair <value>] [--name <value>] [--metadata <value>] [--batchSize <value>] [--minJobs <value>]\n    [--minOracles <value>] [--forceReportPeriod <value>] [--varianceThreshold <value>] [--historyLimit <value>]\n    [--crankKey <value> | --disableCrank] [--queueAuthority <value>] [--enable] [--leaseAmount <value>] [-j <value>]\n    [--jobKey <value>] [--slidingWindow] [--basePriorityFee <value>] [--priorityFeeBump <value>]\n    [--priorityFeeBumpPeriod <value>] [--maxPriorityFeeMultiplier <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create an aggregator on\n\nFLAGS\n  -a, --authority=<value>             alternate keypair that is the authority for the aggregator\n  -h, --help                          Show CLI help.\n  -j, --job=<value>...                filesystem path to job definition file\n  -k, --keypair=<value>               keypair that will pay for onchain transactions. defaults to new account authority\n                                      if no alternate authority provided\n  -s, --silent                        suppress cli prompts\n  -u, --rpcUrl=<value>                alternate RPC url\n  -v, --verbose                       log everything\n  --aggregatorKeypair=<value>         keypair to use for aggregator account. This will be the account's publicKey\n  --attestationProgramId=<value>      alternative Switchboard Attestation program ID to interact with\n  --basePriorityFee=<value>\n  --batchSize=<value>                 [default: 1] number of oracles requested for each open round call\n  --cluster=<option>                  the solana cluster to connect to\n                                      <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>               [default: confirmed] transaction commitment level to use\n                                      <options: confirmed|finalized|processed>\n  --crankKey=<value>                  public key of the crank to join\n  --disableCrank                      whether the newly created feed can be pushed onto a crank. irreversible\n  --enable                            set permissions to PERMIT_ORACLE_QUEUE_USAGE\n  --forceReportPeriod=<value>         Number of seconds for which, even if the variance threshold is not passed, accept\n                                      new responses from oracles.\n  --historyLimit=<value>              number of historical samples to store\n  --jobKey=<value>...                 public key of existing job account\n  --leaseAmount=<value>               [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5\n                                      wSOL\n  --ledger                            enable ledger support\n  --ledgerPath=<value>                HID path to the ledger\n  --mainnetBeta                       WARNING: use mainnet-beta solana cluster\n  --maxPriorityFeeMultiplier=<value>\n  --metadata=<value>                  metadata of the aggregator\n  --minJobs=<value>                   [default: 1] number of jobs that must respond before an oracle responds\n  --minOracles=<value>                [default: 1] number of oracles that must respond before a value is accepted\n                                      on-chain\n  --name=<value>                      name of the aggregator\n  --priorityFeeBump=<value>\n  --priorityFeeBumpPeriod=<value>\n  --programId=<value>                 alternative Switchboard program ID to interact with\n  --queueAuthority=<value>            alternative keypair to use for queue authority\n  --slidingWindow                     enable sliding window resolution mode\n  --updateInterval=<value>            (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>         [default: 0] percentage change between a previous accepted result and the next\n                                      round before an oracle reports a value on-chain. Used to conserve lease cost\n                                      during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator account\n",
    "usage": "sb solana aggregator create QUEUEKEY --updateInterval <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--aggregatorKeypair <value>] [--name <value>] [--metadata <value>] [--batchSize <value>] [--minJobs <value>]\n    [--minOracles <value>] [--forceReportPeriod <value>] [--varianceThreshold <value>] [--historyLimit <value>]\n    [--crankKey <value> | --disableCrank] [--queueAuthority <value>] [--enable] [--leaseAmount <value>] [-j <value>]\n    [--jobKey <value>] [--slidingWindow] [--basePriorityFee <value>] [--priorityFeeBump <value>]\n    [--priorityFeeBumpPeriod <value>] [--maxPriorityFeeMultiplier <value>]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the oracle queue to create an aggregator on"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-j, --job=<value>...",
        "description": "filesystem path to job definition file"
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--aggregatorKeypair=<value>",
        "description": "keypair to use for aggregator account. This will be the account's publicKey"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--basePriorityFee=<value>",
        "description": ""
      },
      {
        "flag": "--batchSize=<value>",
        "description": "[default: 1] number of oracles requested for each open round call"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--crankKey=<value>",
        "description": "public key of the crank to join"
      },
      {
        "flag": "--disableCrank",
        "description": "whether the newly created feed can be pushed onto a crank. irreversible"
      },
      {
        "flag": "--enable",
        "description": "set permissions to PERMIT_ORACLE_QUEUE_USAGE"
      },
      {
        "flag": "--forceReportPeriod=<value>",
        "description": "Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles."
      },
      {
        "flag": "--historyLimit=<value>",
        "description": "number of historical samples to store"
      },
      {
        "flag": "--jobKey=<value>...",
        "description": "public key of existing job account"
      },
      {
        "flag": "--leaseAmount=<value>",
        "description": "[default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5 wSOL"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--maxPriorityFeeMultiplier=<value>",
        "description": ""
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the aggregator"
      },
      {
        "flag": "--minJobs=<value>",
        "description": "[default: 1] number of jobs that must respond before an oracle responds"
      },
      {
        "flag": "--minOracles=<value>",
        "description": "[default: 1] number of oracles that must respond before a value is accepted on-chain"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the aggregator"
      },
      {
        "flag": "--priorityFeeBump=<value>",
        "description": ""
      },
      {
        "flag": "--priorityFeeBumpPeriod=<value>",
        "description": ""
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queueAuthority=<value>",
        "description": "alternative keypair to use for queue authority"
      },
      {
        "flag": "--slidingWindow",
        "description": "enable sliding window resolution mode"
      },
      {
        "flag": "--updateInterval=<value>",
        "description": "(required) set an aggregator's minimum update delay"
      },
      {
        "flag": "--varianceThreshold=<value>",
        "description": "[default: 0] percentage change between a previous accepted result and the next round before an oracle reports a value on-chain. Used to conserve lease cost during low volatility GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create an aggregator account"
  },
  {
    "id": "solana-aggregator-create_json",
    "permalink": "/cli/solana/aggregator/create_json",
    "topic": "solana",
    "command": "sb solana aggregator create json",
    "topics": [
      "solana",
      "aggregator",
      "create",
      "json"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator create json DEFINITIONFILE [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-q <value>] [-a <value>] [--leaseAmount <value>]\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of queue definition json file\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that will be the authority for the aggregator\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -q, --queueKey=<value>          public key of the oracle queue to create aggregator for\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --leaseAmount=<value>           [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5 wSOL\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator from a json file\n\nALIASES\n  $ sb solana json create aggregator\n\nEXAMPLES\n  $ sb solana aggregator create json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json\n",
    "usage": "sb solana aggregator create json DEFINITIONFILE [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-q <value>] [-a <value>] [--leaseAmount <value>]",
    "args": [
      {
        "arg": "DEFINITIONFILE",
        "description": "filesystem path of queue definition json file"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that will be the authority for the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-q, --queueKey=<value>",
        "description": "public key of the oracle queue to create aggregator for"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--leaseAmount=<value>",
        "description": "[default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5 wSOL"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create an aggregator from a json file",
    "aliases": [
      "sb solana json create aggregator"
    ],
    "examples": [
      "sb solana aggregator create json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json"
    ]
  },
  {
    "id": "solana-aggregator-deposit",
    "permalink": "/cli/solana/aggregator/deposit",
    "topic": "solana",
    "command": "sb solana aggregator deposit",
    "topics": [
      "solana",
      "aggregator",
      "deposit"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator deposit AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --amount=<value>                (required) amount to deposit into the lease escrow\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sb solana aggregator fund\n  $ sb solana aggregator deposit\n  $ sb solana aggregator extend\n\nEXAMPLES\n  $ sb solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n",
    "usage": "sb solana aggregator deposit AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--amount=<value>",
        "description": "(required) amount to deposit into the lease escrow"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "fund and re-enable an aggregator lease",
    "aliases": [
      "sb solana aggregator fund",
      "sb solana aggregator deposit",
      "sb solana aggregator extend"
    ],
    "examples": [
      "sb solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-aggregator-extend",
    "permalink": "/cli/solana/aggregator/extend",
    "topic": "solana",
    "command": "sb solana aggregator extend",
    "topics": [
      "solana",
      "aggregator",
      "extend"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator extend AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --amount=<value>                (required) amount to deposit into the lease escrow\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sb solana aggregator fund\n  $ sb solana aggregator deposit\n  $ sb solana aggregator extend\n\nEXAMPLES\n  $ sb solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n",
    "usage": "sb solana aggregator extend AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--amount=<value>",
        "description": "(required) amount to deposit into the lease escrow"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "fund and re-enable an aggregator lease",
    "aliases": [
      "sb solana aggregator fund",
      "sb solana aggregator deposit",
      "sb solana aggregator extend"
    ],
    "examples": [
      "sb solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-aggregator-fund",
    "permalink": "/cli/solana/aggregator/fund",
    "topic": "solana",
    "command": "sb solana aggregator fund",
    "topics": [
      "solana",
      "aggregator",
      "fund"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator fund AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --amount=<value>                (required) amount to deposit into the lease escrow\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sb solana aggregator fund\n  $ sb solana aggregator deposit\n  $ sb solana aggregator extend\n\nEXAMPLES\n  $ sb solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n",
    "usage": "sb solana aggregator fund AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--amount=<value>",
        "description": "(required) amount to deposit into the lease escrow"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "fund and re-enable an aggregator lease",
    "aliases": [
      "sb solana aggregator fund",
      "sb solana aggregator deposit",
      "sb solana aggregator extend"
    ],
    "examples": [
      "sb solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-aggregator-history",
    "permalink": "/cli/solana/aggregator/history",
    "topic": "solana",
    "command": "sb solana aggregator history",
    "topics": [
      "solana",
      "aggregator",
      "history"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator history AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json] [--metrics]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --metrics                       print metrics on an aggregators history like average update interval\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aggregator's history'\n",
    "usage": "sb solana aggregator history AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json] [--metrics]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--metrics",
        "description": "print metrics on an aggregators history like average update interval"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print an aggregator's history'"
  },
  {
    "id": "solana-aggregator-lease_set",
    "permalink": "/cli/solana/aggregator/lease_set",
    "topic": "solana",
    "command": "sb solana aggregator lease set",
    "topics": [
      "solana",
      "aggregator",
      "lease",
      "set"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator lease set AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>] [--queuePubkey <value>] [--newAuthority <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair delegated as the authority for managing the lease account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --newAuthority=<value>          new lease withdraw authority. if not set, defaults to the aggregator authority\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --queuePubkey=<value>           override the aggregators current queue. useful for withdrawing from a lease after\n                                  moving to a new queue\n\nDESCRIPTION\n  set a lease's withdraw authority\n\nALIASES\n  $ sb solana aggregator lease set\n\nEXAMPLES\n  $ sb solana:lease:set GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --keypair ../payer-keypair.json\n",
    "usage": "sb solana aggregator lease set AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>] [--queuePubkey <value>] [--newAuthority <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair delegated as the authority for managing the lease account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--newAuthority=<value>",
        "description": "new lease withdraw authority. if not set, defaults to the aggregator authority"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queuePubkey=<value>",
        "description": "override the aggregators current queue. useful for withdrawing from a lease after moving to a new queue"
      }
    ],
    "description": "set a lease's withdraw authority",
    "aliases": [
      "sb solana aggregator lease set"
    ],
    "examples": [
      "sb solana:lease:set GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-aggregator-list",
    "permalink": "/cli/solana/aggregator/list",
    "topic": "solana",
    "command": "sb solana aggregator list",
    "topics": [
      "solana",
      "aggregator",
      "list"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator list AUTHORITYKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  AUTHORITYKEY  public key of the aggregator authority\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  get a list of aggregators from a provided authority pubkey\n",
    "usage": "sb solana aggregator list AUTHORITYKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "AUTHORITYKEY",
        "description": "public key of the aggregator authority"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "get a list of aggregators from a provided authority pubkey"
  },
  {
    "id": "solana-aggregator-lock",
    "permalink": "/cli/solana/aggregator/lock",
    "topic": "solana",
    "command": "sb solana aggregator lock",
    "topics": [
      "solana",
      "aggregator",
      "lock"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator lock AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the aggregator\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  lock an aggregator's configuration and prevent further changes\n",
    "usage": "sb solana aggregator lock AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "lock an aggregator's configuration and prevent further changes"
  },
  {
    "id": "solana-aggregator-metrics",
    "permalink": "/cli/solana/aggregator/metrics",
    "topic": "solana",
    "command": "sb solana aggregator metrics",
    "topics": [
      "solana",
      "aggregator",
      "metrics"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator metrics AGGREGATORKEY --period <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --period=<value>...             (required) the period to collect metrics for. Ex. 3600 will collect update metrics for\n                                  the last 1hr\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aggregator's metrics'\n",
    "usage": "sb solana aggregator metrics AGGREGATORKEY --period <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [--json]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--period=<value>...",
        "description": "(required) the period to collect metrics for. Ex. 3600 will collect update metrics for the last 1hr"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print an aggregator's metrics'"
  },
  {
    "id": "solana-aggregator-mode",
    "permalink": "/cli/solana/aggregator/mode",
    "topic": "solana",
    "command": "sb solana aggregator mode",
    "topics": [
      "solana",
      "aggregator",
      "mode"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator mode AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--slidingWindow | --roundResolution]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the aggregator and required to make config\n                                  changes\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --roundResolution               enable sliding window mode\n  --slidingWindow                 enable sliding window mode\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set an aggregators resolution mode config\n",
    "usage": "sb solana aggregator mode AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--slidingWindow | --roundResolution]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator and required to make config changes"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--roundResolution",
        "description": "enable sliding window mode"
      },
      {
        "flag": "--slidingWindow",
        "description": "enable sliding window mode GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "set an aggregators resolution mode config"
  },
  {
    "id": "solana-aggregator-open",
    "permalink": "/cli/solana/aggregator/open",
    "topic": "solana",
    "command": "sb solana aggregator open",
    "topics": [
      "solana",
      "aggregator",
      "open"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator open-round AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new aggregator result from a set of oracles\n\nALIASES\n  $ sb solana aggregator open-round\n\nEXAMPLES\n  $ sb solana aggregator update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n",
    "usage": "sb solana aggregator open-round AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "request a new aggregator result from a set of oracles",
    "aliases": [
      "sb solana aggregator open-round"
    ],
    "examples": [
      "sb solana aggregator update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-aggregator-permission_create",
    "permalink": "/cli/solana/aggregator/permission_create",
    "topic": "solana",
    "command": "sb solana aggregator permission create",
    "topics": [
      "solana",
      "aggregator",
      "permission",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator permission create AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a permission account for an aggregator\n",
    "usage": "sb solana aggregator permission create AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "create a permission account for an aggregator"
  },
  {
    "id": "solana-aggregator-print",
    "permalink": "/cli/solana/aggregator/print",
    "topic": "solana",
    "command": "sb solana aggregator print",
    "topics": [
      "solana",
      "aggregator",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator print AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json] [--queuePubkey <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --queuePubkey=<value>           override the aggregators current queue. useful for viewing permission lease accounts\n                                  if an aggregator has moved queues\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aggregator and it's associated accounts\n",
    "usage": "sb solana aggregator print AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json] [--queuePubkey <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queuePubkey=<value>",
        "description": "override the aggregators current queue. useful for viewing permission lease accounts if an aggregator has moved queues GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print an aggregator and it's associated accounts"
  },
  {
    "id": "solana-aggregator-remove_job",
    "permalink": "/cli/solana/aggregator/remove_job",
    "topic": "solana",
    "command": "sb solana aggregator remove job",
    "topics": [
      "solana",
      "aggregator",
      "remove",
      "job"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator remove job AGGREGATORKEY JOBKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  JOBKEY         public key of an existing job account to remove from an aggregator\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the aggregator\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  remove a switchboard job account from an aggregator\n",
    "usage": "sb solana aggregator remove job AGGREGATORKEY JOBKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      },
      {
        "arg": "",
        "description": "JOBKEY"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "remove a switchboard job account from an aggregator"
  },
  {
    "id": "solana-aggregator-set",
    "permalink": "/cli/solana/aggregator/set",
    "topic": "solana",
    "command": "sb solana aggregator set",
    "topics": [
      "solana",
      "aggregator",
      "set"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator set AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--batchSize\n    <value>] [--minJobs <value>] [--minOracles <value>] [--updateInterval <value>] [--varianceThreshold <value>]\n    [--forceReportPeriod <value>] [--basePriorityFee <value>] [--priorityFeeBump <value>] [--priorityFeeBumpPeriod\n    <value>] [--maxPriorityFeeMultiplier <value>] [--enableSlidingWindow]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>             alternate keypair that is the authority for the aggregator and required to make\n                                      config changes\n  -h, --help                          Show CLI help.\n  -k, --keypair=<value>               keypair that will pay for onchain transactions. defaults to new account authority\n                                      if no alternate authority provided\n  -s, --silent                        suppress cli prompts\n  -u, --rpcUrl=<value>                alternate RPC url\n  -v, --verbose                       log everything\n  --attestationProgramId=<value>      alternative Switchboard Attestation program ID to interact with\n  --basePriorityFee=<value>\n  --batchSize=<value>                 number of oracles requested for each open round call\n  --cluster=<option>                  the solana cluster to connect to\n                                      <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>               [default: confirmed] transaction commitment level to use\n                                      <options: confirmed|finalized|processed>\n  --enableSlidingWindow               set the aggregator resolution mode\n  --forceReportPeriod=<value>         Number of seconds for which, even if the variance threshold is not passed, accept\n                                      new responses from oracles.\n  --ledger                            enable ledger support\n  --ledgerPath=<value>                HID path to the ledger\n  --mainnetBeta                       WARNING: use mainnet-beta solana cluster\n  --maxPriorityFeeMultiplier=<value>\n  --metadata=<value>                  metadata of the aggregator\n  --minJobs=<value>                   number of jobs that must respond before an oracle responds\n  --minOracles=<value>                number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                      name of the aggregator\n  --priorityFeeBump=<value>\n  --priorityFeeBumpPeriod=<value>\n  --programId=<value>                 alternative Switchboard program ID to interact with\n  --updateInterval=<value>            set an aggregator's minimum update delay\n  --varianceThreshold=<value>         percentage change between a previous accepted result and the next round before an\n                                      oracle reports a value on-chain. Used to conserve lease cost during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set an aggregators config\n",
    "usage": "sb solana aggregator set AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--batchSize\n    <value>] [--minJobs <value>] [--minOracles <value>] [--updateInterval <value>] [--varianceThreshold <value>]\n    [--forceReportPeriod <value>] [--basePriorityFee <value>] [--priorityFeeBump <value>] [--priorityFeeBumpPeriod\n    <value>] [--maxPriorityFeeMultiplier <value>] [--enableSlidingWindow]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator and required to make config changes"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--basePriorityFee=<value>",
        "description": ""
      },
      {
        "flag": "--batchSize=<value>",
        "description": "number of oracles requested for each open round call"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--enableSlidingWindow",
        "description": "set the aggregator resolution mode"
      },
      {
        "flag": "--forceReportPeriod=<value>",
        "description": "Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles."
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--maxPriorityFeeMultiplier=<value>",
        "description": ""
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the aggregator"
      },
      {
        "flag": "--minJobs=<value>",
        "description": "number of jobs that must respond before an oracle responds"
      },
      {
        "flag": "--minOracles=<value>",
        "description": "number of oracles that must respond before a value is accepted on-chain"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the aggregator"
      },
      {
        "flag": "--priorityFeeBump=<value>",
        "description": ""
      },
      {
        "flag": "--priorityFeeBumpPeriod=<value>",
        "description": ""
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--updateInterval=<value>",
        "description": "set an aggregator's minimum update delay"
      },
      {
        "flag": "--varianceThreshold=<value>",
        "description": "percentage change between a previous accepted result and the next round before an oracle reports a value on-chain. Used to conserve lease cost during low volatility GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "set an aggregators config"
  },
  {
    "id": "solana-aggregator-transfer",
    "permalink": "/cli/solana/aggregator/transfer",
    "topic": "solana",
    "command": "sb solana aggregator transfer",
    "topics": [
      "solana",
      "aggregator",
      "transfer"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator transfer AGGREGATORKEY --newQueue <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>] [--newCrank\n    <value>] [--loadAmount <value>] [--enable] [--queueAuthority <value>] [--force]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the aggregator\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --enable                        enable permissions on the new queue\n  --force                         skip permission checks\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --loadAmount=<value>            [default: 0.0] amount of funds to load into the new lease, in addition to the funds\n                                  remaining in the old lease account\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --newCrank=<value>              publicKey of the crank to transfer to\n  --newQueue=<value>              (required) publicKey of the new queue to transfer to\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --queueAuthority=<value>        alternate keypair that is the authority for the queue. only used if enabling\n                                  permissions in one transaction\n\nDESCRIPTION\n  transfer an aggregator to a new queue\n\nEXAMPLES\n  $ sb solana aggregator transfer GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --mainnetBeta --loadAmount 0.1 --newQueue 3HBb2DQqDfuMdzWxNk1Eo9RTMkFYmuEAd32RiLKn9pAn --newCrank GdNVLWzcE6h9SPuSbmu69YzxAj8enim9t6mjzuqTXgLd --keypair ~/.config/solana/id.json\n",
    "usage": "sb solana aggregator transfer AGGREGATORKEY --newQueue <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>] [--newCrank\n    <value>] [--loadAmount <value>] [--enable] [--queueAuthority <value>] [--force]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--enable",
        "description": "enable permissions on the new queue"
      },
      {
        "flag": "--force",
        "description": "skip permission checks"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--loadAmount=<value>",
        "description": "[default: 0.0] amount of funds to load into the new lease, in addition to the funds remaining in the old lease account"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--newCrank=<value>",
        "description": "publicKey of the crank to transfer to"
      },
      {
        "flag": "--newQueue=<value>",
        "description": "(required) publicKey of the new queue to transfer to"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queueAuthority=<value>",
        "description": "alternate keypair that is the authority for the queue. only used if enabling permissions in one transaction"
      }
    ],
    "description": "transfer an aggregator to a new queue",
    "examples": [
      "sb solana aggregator transfer GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --mainnetBeta --loadAmount 0.1 --newQueue 3HBb2DQqDfuMdzWxNk1Eo9RTMkFYmuEAd32RiLKn9pAn --newCrank GdNVLWzcE6h9SPuSbmu69YzxAj8enim9t6mjzuqTXgLd --keypair ~/.config/solana/id.json"
    ]
  },
  {
    "id": "solana-aggregator-update",
    "permalink": "/cli/solana/aggregator/update",
    "topic": "solana",
    "command": "sb solana aggregator update",
    "topics": [
      "solana",
      "aggregator",
      "update"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator update AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new aggregator result from a set of oracles\n\nALIASES\n  $ sb solana aggregator open-round\n\nEXAMPLES\n  $ sb solana aggregator update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n",
    "usage": "sb solana aggregator update AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "request a new aggregator result from a set of oracles",
    "aliases": [
      "sb solana aggregator open-round"
    ],
    "examples": [
      "sb solana aggregator update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-aggregator-watch",
    "permalink": "/cli/solana/aggregator/watch",
    "topic": "solana",
    "command": "sb solana aggregator watch",
    "topics": [
      "solana",
      "aggregator",
      "watch"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator watch AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-t\n    <value>] [-f <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -f, --outfile=<value>           save results to a file\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -t, --timeout=<value>           time to watch feed for updates\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch an aggregator account and stream the results\n",
    "usage": "sb solana aggregator watch AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-t\n    <value>] [-f <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -f, --outfile=<value>",
        "description": "save results to a file"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-t, --timeout=<value>",
        "description": "time to watch feed for updates"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "watch an aggregator account and stream the results"
  },
  {
    "id": "solana-aggregator-withdraw",
    "permalink": "/cli/solana/aggregator/withdraw",
    "topic": "solana",
    "command": "sb solana aggregator withdraw",
    "topics": [
      "solana",
      "aggregator",
      "withdraw"
    ],
    "markdown": "USAGE\n  $ sb solana aggregator withdraw AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n    [--queuePubkey <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         keypair delegated as the authority for managing the lease account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --amount=<value>                (required) token amount to withdraw from lease account\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --queuePubkey=<value>           override the aggregators current queue. useful for withdrawing from a lease after\n                                  moving to a new queue\n\nDESCRIPTION\n  withdraw funds from an aggregator lease\n\nALIASES\n  $ sb solana aggregator withdraw\n\nEXAMPLES\n  $ sb solana:aggregator:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n",
    "usage": "sb solana aggregator withdraw AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n    [--queuePubkey <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair delegated as the authority for managing the lease account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--amount=<value>",
        "description": "(required) token amount to withdraw from lease account"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queuePubkey=<value>",
        "description": "override the aggregators current queue. useful for withdrawing from a lease after moving to a new queue"
      }
    ],
    "description": "withdraw funds from an aggregator lease",
    "aliases": [
      "sb solana aggregator withdraw"
    ],
    "examples": [
      "sb solana:aggregator:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-anchor-test",
    "permalink": "/cli/solana/anchor/test",
    "topic": "solana",
    "command": "sb solana anchor test",
    "topics": [
      "solana",
      "anchor",
      "test"
    ],
    "markdown": "USAGE\n  $ sb solana anchor test [-h] [-v] [-s] [--mainnetBeta | --cluster localnet|devnet] [-u <value>] [--mainnetRpcUrl\n    <value>] [--programId <value>] [-d <value>] [--oracleKey <value>] [-k <value>] [--releaseChannel testnet|mainnet |\n    --nodeImage <value>] [-t <value>] [--detach] [--testValidatorArgs <value>]\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -k, --keypair=<value>         keypair that will pay for onchain transactions. defaults to new account authority if no\n                                alternate authority provided\n  -s, --silent                  suppress docker logging\n  -t, --timeout=<value>         [default: 120] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --cluster=<option>            [default: localnet] cluster\n                                <options: localnet|devnet>\n  --detach                      keep the localnet rpc running\n  --mainnetBeta                 WARNING: use mainnet-beta solana cluster\n  --mainnetRpcUrl=<value>       [default: https://api.mainnet-beta.solana.com/] Solana mainnet RPC URL to use for the\n                                oracle task runner\n  --nodeImage=<value>           [default: dev-v2-RC_04_11_23_17_12] public key of the oracle to start-up\n  --oracleKey=<value>           public key of the oracle to start-up\n  --programId=<value>           alternative Switchboard program ID to interact with\n  --releaseChannel=<option>     [default: testnet] the oracle release channel\n                                <options: testnet|mainnet>\n  --testValidatorArgs=<value>   additional args passed to the local solana validator\n\nDESCRIPTION\n  run anchor test and a switchboard oracle in parallel\n\nALIASES\n  $ sb anchor test\n",
    "usage": "sb solana anchor test [-h] [-v] [-s] [--mainnetBeta | --cluster localnet|devnet] [-u <value>] [--mainnetRpcUrl\n    <value>] [--programId <value>] [-d <value>] [--oracleKey <value>] [-k <value>] [--releaseChannel testnet|mainnet |\n    --nodeImage <value>] [-t <value>] [--detach] [--testValidatorArgs <value>]",
    "flags": [
      {
        "flag": " -d, --switchboardDir=<value>",
        "description": "directory with switchboard.env to load a switchboard environment"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress docker logging"
      },
      {
        "flag": "-t, --timeout=<value>",
        "description": "[default: 120] number of seconds before ending the docker process"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--cluster=<option>",
        "description": "[default: localnet] cluster <options: localnet|devnet>"
      },
      {
        "flag": "--detach",
        "description": "keep the localnet rpc running"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--mainnetRpcUrl=<value>",
        "description": "[default: https://api.mainnet-beta.solana.com/] Solana mainnet RPC URL to use for the oracle task runner"
      },
      {
        "flag": "--nodeImage=<value>",
        "description": "[default: dev-v2-RC_04_11_23_17_12] public key of the oracle to start-up"
      },
      {
        "flag": "--oracleKey=<value>",
        "description": "public key of the oracle to start-up"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--releaseChannel=<option>",
        "description": "[default: testnet] the oracle release channel <options: testnet|mainnet>"
      },
      {
        "flag": "--testValidatorArgs=<value>",
        "description": "additional args passed to the local solana validator"
      }
    ],
    "description": "run anchor test and a switchboard oracle in parallel",
    "aliases": [
      "sb anchor test"
    ]
  },
  {
    "id": "solana-attestation",
    "permalink": "/cli/solana/attestation",
    "topic": "solana",
    "command": "sb solana attestation",
    "topics": [
      "solana",
      "attestation"
    ],
    "markdown": "USAGE\n  $ sb solana attestation-queue add-enclave QUEUEKEY --mrEnclave <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--force]\n\nARGUMENTS\n  QUEUEKEY  public key of the attestation queue account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the attestation queue and is required to\n                                  approve config changes\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --force                         remove old enclaves if the addition will exceed the maximum allowable enclaves (32)\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --mrEnclave=<value>...          (required) Hex encoded MRENCLAVE's to add to the attestation queue's config\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add enclave(s) to an attestation queue's config\n",
    "usage": "sb solana attestation-queue add-enclave QUEUEKEY --mrEnclave <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--force]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the attestation queue account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the attestation queue and is required to approve config changes"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--force",
        "description": "remove old enclaves if the addition will exceed the maximum allowable enclaves (32)"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--mrEnclave=<value>...",
        "description": "(required) Hex encoded MRENCLAVE's to add to the attestation queue's config"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "add enclave(s) to an attestation queue's config"
  },
  {
    "id": "solana-attestation",
    "permalink": "/cli/solana/attestation",
    "topic": "solana",
    "command": "sb solana attestation",
    "topics": [
      "solana",
      "attestation"
    ],
    "markdown": "USAGE\n  $ sb solana attestation-queue create [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n    [--ledgerPath <value> --ledger] [--json] [-a <value>] [--queueKeypair <value>] [--reward <value>]\n    [--allowAuthorityOverrideAfter <value>] [--maxQuoteVerificationAge <value>] [--nodeTimeout <value>]\n    [--requireAuthorityHeartbeatPermissions] [--requireUsagePermissions]\n\nFLAGS\n  -a, --authority=<value>                 alternate keypair that is the authority for the queue and is required to\n                                          approve permissions\n  -h, --help                              Show CLI help.\n  -k, --keypair=<value>                   keypair that will pay for onchain transactions. defaults to new account\n                                          authority if no alternate authority provided\n  -s, --silent                            suppress cli prompts\n  -u, --rpcUrl=<value>                    alternate RPC url\n  -v, --verbose                           log everything\n  --allowAuthorityOverrideAfter=<value>   [default: 86400] Allow authority to force add a node after X seconds with no\n                                          heartbeat.\n  --attestationProgramId=<value>          alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>                      the solana cluster to connect to\n                                          <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                   [default: confirmed] transaction commitment level to use\n                                          <options: confirmed|finalized|processed>\n  --ledger                                enable ledger support\n  --ledgerPath=<value>                    HID path to the ledger\n  --mainnetBeta                           WARNING: use mainnet-beta solana cluster\n  --maxQuoteVerificationAge=<value>       [default: 604800] The maximum allowable time until a EnclaveAccount needs to\n                                          be re-verified on-chain.\n  --nodeTimeout=<value>                   [default: 86400] The maximum allowable time until a node needs to send a\n                                          heartbeat.\n  --programId=<value>                     alternative Switchboard program ID to interact with\n  --queueKeypair=<value>                  keypair to use for the attestation queue account. This will be the account's\n                                          publicKey\n  --requireAuthorityHeartbeatPermissions  Even if a heartbeating machine quote verifies with proper measurement, require\n                                          authority signoff.\n  --requireUsagePermissions               Require FunctionAccounts to have PermitQueueUsage before they are executed.\n  --reward=<value>                        [default: 0] the reward payed out to oracles for responding to an update\n                                          request on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4\n                                          would deduct (4 * 0.0000075) wSOL from an aggregators lease each round.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an attestation queue\n",
    "usage": "sb solana attestation-queue create [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n    [--ledgerPath <value> --ledger] [--json] [-a <value>] [--queueKeypair <value>] [--reward <value>]\n    [--allowAuthorityOverrideAfter <value>] [--maxQuoteVerificationAge <value>] [--nodeTimeout <value>]\n    [--requireAuthorityHeartbeatPermissions] [--requireUsagePermissions]",
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the queue and is required to approve permissions"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--allowAuthorityOverrideAfter=<value>",
        "description": "[default: 86400] Allow authority to force add a node after X seconds with no heartbeat."
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--maxQuoteVerificationAge=<value>",
        "description": "[default: 604800] The maximum allowable time until a EnclaveAccount needs to be re-verified on-chain."
      },
      {
        "flag": "--nodeTimeout=<value>",
        "description": "[default: 86400] The maximum allowable time until a node needs to send a heartbeat."
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queueKeypair=<value>",
        "description": "keypair to use for the attestation queue account. This will be the account's publicKey"
      },
      {
        "flag": "--requireAuthorityHeartbeatPermissions",
        "description": "Even if a heartbeating machine quote verifies with proper measurement, require authority signoff."
      },
      {
        "flag": "--requireUsagePermissions",
        "description": "Require FunctionAccounts to have PermitQueueUsage before they are executed."
      },
      {
        "flag": "--reward=<value>",
        "description": "[default: 0] the reward payed out to oracles for responding to an update request on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4 would deduct (4 * 0.0000075) wSOL from an aggregators lease each round. GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create an attestation queue"
  },
  {
    "id": "solana-attestation",
    "permalink": "/cli/solana/attestation",
    "topic": "solana",
    "command": "sb solana attestation",
    "topics": [
      "solana",
      "attestation"
    ],
    "markdown": "USAGE\n  $ sb solana attestation-queue print QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  QUEUEKEY  public key of the attestation queue account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an attestation queue account\n",
    "usage": "sb solana attestation-queue print QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the attestation queue account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print an attestation queue account"
  },
  {
    "id": "solana-attestation",
    "permalink": "/cli/solana/attestation",
    "topic": "solana",
    "command": "sb solana attestation",
    "topics": [
      "solana",
      "attestation"
    ],
    "markdown": "USAGE\n  $ sb solana attestation-queue remove-enclave QUEUEKEY --mrEnclave <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the attestation queue account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the attestation queue and is required to\n                                  approve config changes\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --mrEnclave=<value>...          (required) Hex encoded MRENCLAVE's to remove from the attestation queue's config\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  remove enclave(s) from an attestation queue's config\n",
    "usage": "sb solana attestation-queue remove-enclave QUEUEKEY --mrEnclave <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the attestation queue account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the attestation queue and is required to approve config changes"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--mrEnclave=<value>...",
        "description": "(required) Hex encoded MRENCLAVE's to remove from the attestation queue's config"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "remove enclave(s) from an attestation queue's config"
  },
  {
    "id": "solana-buffer-create",
    "permalink": "/cli/solana/buffer/create",
    "topic": "solana",
    "command": "sb solana buffer create",
    "topics": [
      "solana",
      "buffer",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana buffer create QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--bufferKeypair <value>] [-a <value>] [-n <value>]\n    [--minUpdateDelaySeconds <value>] [--jobDefinition <value> | --jobKey <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account\n\nFLAGS\n  -a, --authority=<value>          alternate keypair that will be the buffer relayer authority\n  -h, --help                       Show CLI help.\n  -k, --keypair=<value>            keypair that will pay for onchain transactions. defaults to new account authority if\n                                   no alternate authority provided\n  -n, --name=<value>               name of the buffer account\n  -s, --silent                     suppress cli prompts\n  -u, --rpcUrl=<value>             alternate RPC url\n  -v, --verbose                    log everything\n  --attestationProgramId=<value>   alternative Switchboard Attestation program ID to interact with\n  --bufferKeypair=<value>          keypair to use for the buffer relayer account. This will be the account's publicKey\n  --cluster=<option>               the solana cluster to connect to\n                                   <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>            [default: confirmed] transaction commitment level to use\n                                   <options: confirmed|finalized|processed>\n  --jobDefinition=<value>          filesystem path to job definition\n  --jobKey=<value>                 public key of existing job account\n  --ledger                         enable ledger support\n  --ledgerPath=<value>             HID path to the ledger\n  --mainnetBeta                    WARNING: use mainnet-beta solana cluster\n  --minUpdateDelaySeconds=<value>  [default: 30] minimum number of seconds between update calls\n  --programId=<value>              alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a buffer relayer account\n",
    "usage": "sb solana buffer create QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--bufferKeypair <value>] [-a <value>] [-n <value>]\n    [--minUpdateDelaySeconds <value>] [--jobDefinition <value> | --jobKey <value>]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the oracle queue account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that will be the buffer relayer authority"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-n, --name=<value>",
        "description": "name of the buffer account"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--bufferKeypair=<value>",
        "description": "keypair to use for the buffer relayer account. This will be the account's publicKey"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--jobDefinition=<value>",
        "description": "filesystem path to job definition"
      },
      {
        "flag": "--jobKey=<value>",
        "description": "public key of existing job account"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--minUpdateDelaySeconds=<value>",
        "description": "[default: 30] minimum number of seconds between update calls"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a buffer relayer account"
  },
  {
    "id": "solana-buffer-open",
    "permalink": "/cli/solana/buffer/open",
    "topic": "solana",
    "command": "sb solana buffer open",
    "topics": [
      "solana",
      "buffer",
      "open"
    ],
    "markdown": "USAGE\n  $ sb solana buffer open-round BUFFERRELAYERKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  BUFFERRELAYERKEY  public key of the buffer relayer account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new buffer relayer result\n\nALIASES\n  $ sb solana buffer open-round\n\nEXAMPLES\n  $ sb solana buffer update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n",
    "usage": "sb solana buffer open-round BUFFERRELAYERKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]",
    "args": [
      {
        "arg": "BUFFERRELAYERKEY",
        "description": "public key of the buffer relayer account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "request a new buffer relayer result",
    "aliases": [
      "sb solana buffer open-round"
    ],
    "examples": [
      "sb solana buffer update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-buffer-update",
    "permalink": "/cli/solana/buffer/update",
    "topic": "solana",
    "command": "sb solana buffer update",
    "topics": [
      "solana",
      "buffer",
      "update"
    ],
    "markdown": "USAGE\n  $ sb solana buffer update BUFFERRELAYERKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  BUFFERRELAYERKEY  public key of the buffer relayer account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new buffer relayer result\n\nALIASES\n  $ sb solana buffer open-round\n\nEXAMPLES\n  $ sb solana buffer update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n",
    "usage": "sb solana buffer update BUFFERRELAYERKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]",
    "args": [
      {
        "arg": "BUFFERRELAYERKEY",
        "description": "public key of the buffer relayer account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "request a new buffer relayer result",
    "aliases": [
      "sb solana buffer open-round"
    ],
    "examples": [
      "sb solana buffer update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-crank-create",
    "permalink": "/cli/solana/crank/create",
    "topic": "solana",
    "command": "sb solana crank create",
    "topics": [
      "solana",
      "crank",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana crank create QUEUEKEY -s <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>]\n    [--metadata <value>] [--crankKeypair <value>] [--dataBufferKeypair <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create a crank on\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -n, --name=<value>              name of the crank for easier identification\n  -s, --silent                    suppress cli prompts\n  -s, --size=<value>              (required) maximum number of rows a crank can support\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --crankKeypair=<value>          keypair to use for the crank account. This will be the account's publicKey\n  --dataBufferKeypair=<value>     keypair to use for the crank data buffer account.\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --metadata=<value>              metadata of the crank for easier identification\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank account\n",
    "usage": "sb solana crank create QUEUEKEY -s <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>]\n    [--metadata <value>] [--crankKeypair <value>] [--dataBufferKeypair <value>]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the oracle queue to create a crank on"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-n, --name=<value>",
        "description": "name of the crank for easier identification"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-s, --size=<value>",
        "description": "(required) maximum number of rows a crank can support"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--crankKeypair=<value>",
        "description": "keypair to use for the crank account. This will be the account's publicKey"
      },
      {
        "flag": "--dataBufferKeypair=<value>",
        "description": "keypair to use for the crank data buffer account."
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the crank for easier identification"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new crank account"
  },
  {
    "id": "solana-crank-events",
    "permalink": "/cli/solana/crank/events",
    "topic": "solana",
    "command": "sb solana crank events",
    "topics": [
      "solana",
      "crank",
      "events"
    ],
    "markdown": "USAGE\n  $ sb solana crank events AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-t\n    <value>] [-f <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -f, --outfile=<value>           save results to a file\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -t, --timeout=<value>           time to watch feed for updates\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch an aggregator account and stream the on-chain events\n",
    "usage": "sb solana crank events AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-t\n    <value>] [-f <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -f, --outfile=<value>",
        "description": "save results to a file"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-t, --timeout=<value>",
        "description": "time to watch feed for updates"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "watch an aggregator account and stream the on-chain events"
  },
  {
    "id": "solana-crank-pop",
    "permalink": "/cli/solana/crank/pop",
    "topic": "solana",
    "command": "sb solana crank pop",
    "topics": [
      "solana",
      "crank",
      "pop"
    ],
    "markdown": "USAGE\n  $ sb solana crank pop CRANKKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  CRANKKEY  public key of the crank account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  pop the crank\n",
    "usage": "sb solana crank pop CRANKKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger]",
    "args": [
      {
        "arg": "CRANKKEY",
        "description": "public key of the crank account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "pop the crank"
  },
  {
    "id": "solana-crank-print",
    "permalink": "/cli/solana/crank/print",
    "topic": "solana",
    "command": "sb solana crank print",
    "topics": [
      "solana",
      "crank",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana crank print CRANKKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json] [--rows]\n\nARGUMENTS\n  CRANKKEY  public key of the crank account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --rows                          print the crank rows in order\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a crank\n",
    "usage": "sb solana crank print CRANKKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json] [--rows]",
    "args": [
      {
        "arg": "CRANKKEY",
        "description": "public key of the crank account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--rows",
        "description": "print the crank rows in order GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a crank"
  },
  {
    "id": "solana-crank-push",
    "permalink": "/cli/solana/crank/push",
    "topic": "solana",
    "command": "sb solana crank push",
    "topics": [
      "solana",
      "crank",
      "push"
    ],
    "markdown": "USAGE\n  $ sb solana crank push AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--crankKey <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --crankKey=<value>              push onto a new crank, if provided\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  push the crank\n",
    "usage": "sb solana crank push AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--crankKey <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--crankKey=<value>",
        "description": "push onto a new crank, if provided"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "push the crank"
  },
  {
    "id": "solana-crank-reset",
    "permalink": "/cli/solana/crank/reset",
    "topic": "solana",
    "command": "sb solana crank reset",
    "topics": [
      "solana",
      "crank",
      "reset"
    ],
    "markdown": "USAGE\n  $ sb solana crank reset AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the aggregator and required to make config\n                                  changes\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  reset an aggregators crank\n",
    "usage": "sb solana crank reset AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the aggregator and required to make config changes"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "reset an aggregators crank"
  },
  {
    "id": "solana-function-add",
    "permalink": "/cli/solana/function/add",
    "topic": "solana",
    "command": "sb solana function add",
    "topics": [
      "solana",
      "function",
      "add"
    ],
    "markdown": "USAGE\n  $ sb solana function add-enclave FUNCTIONKEY -e <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--force]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -a, --authority=<value>         keypair or public key to delegate authority to for managing the function account\n  -e, --mrEnclave=<value>...      (required) set the mr enclave to add\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --force                         remove an enclave if the function's config has the maximum number of enclaves (32)\n                                  already present\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Configure a solana funciton's mrEnclave settings\n\nALIASES\n  $ sb solana function addMrEnclave\n",
    "usage": "sb solana function add-enclave FUNCTIONKEY -e <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--force]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair or public key to delegate authority to for managing the function account"
      },
      {
        "flag": "-e, --mrEnclave=<value>...",
        "description": "(required) set the mr enclave to add"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--force",
        "description": "remove an enclave if the function's config has the maximum number of enclaves (32) already present"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Configure a solana funciton's mrEnclave settings",
    "aliases": [
      "sb solana function addMrEnclave"
    ]
  },
  {
    "id": "solana-function-add",
    "permalink": "/cli/solana/function/add",
    "topic": "solana",
    "command": "sb solana function add",
    "topics": [
      "solana",
      "function",
      "add"
    ],
    "markdown": "USAGE\n  $ sb solana function addMrEnclave FUNCTIONKEY -e <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--force]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -a, --authority=<value>         keypair or public key to delegate authority to for managing the function account\n  -e, --mrEnclave=<value>...      (required) set the mr enclave to add\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --force                         remove an enclave if the function's config has the maximum number of enclaves (32)\n                                  already present\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Configure a solana funciton's mrEnclave settings\n\nALIASES\n  $ sb solana function addMrEnclave\n",
    "usage": "sb solana function addMrEnclave FUNCTIONKEY -e <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--force]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair or public key to delegate authority to for managing the function account"
      },
      {
        "flag": "-e, --mrEnclave=<value>...",
        "description": "(required) set the mr enclave to add"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--force",
        "description": "remove an enclave if the function's config has the maximum number of enclaves (32) already present"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Configure a solana funciton's mrEnclave settings",
    "aliases": [
      "sb solana function addMrEnclave"
    ]
  },
  {
    "id": "solana-function-close",
    "permalink": "/cli/solana/function/close",
    "topic": "solana",
    "command": "sb solana function close",
    "topics": [
      "solana",
      "function",
      "close"
    ],
    "markdown": "USAGE\n  $ sb solana function close FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--authority <value>]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --authority=<value>\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  close a function account\n",
    "usage": "sb solana function close FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--authority <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--authority=<value>",
        "description": ""
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "close a function account"
  },
  {
    "id": "solana-function-configure",
    "permalink": "/cli/solana/function/configure",
    "topic": "solana",
    "command": "sb solana function configure",
    "topics": [
      "solana",
      "function",
      "configure"
    ],
    "markdown": "USAGE\n  $ sb solana function configure FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--name <value>] [--metadata <value>] [--container <value>]\n    [--containerRegistry <value>] [--version <value>] [--schedule <value>]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --container=<value>             set the function container\n  --containerRegistry=<value>     set the function containerRegistry\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --metadata=<value>              set the function metadata\n  --name=<value>                  set the function name\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --schedule=<value>              set the function schedule\n  --version=<value>               set the function version\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Configure a solana funciton's settings\n",
    "usage": "sb solana function configure FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--name <value>] [--metadata <value>] [--container <value>]\n    [--containerRegistry <value>] [--version <value>] [--schedule <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--container=<value>",
        "description": "set the function container"
      },
      {
        "flag": "--containerRegistry=<value>",
        "description": "set the function containerRegistry"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--metadata=<value>",
        "description": "set the function metadata"
      },
      {
        "flag": "--name=<value>",
        "description": "set the function name"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--schedule=<value>",
        "description": "set the function schedule"
      },
      {
        "flag": "--version=<value>",
        "description": "set the function version GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Configure a solana funciton's settings"
  },
  {
    "id": "solana-function-create",
    "permalink": "/cli/solana/function/create",
    "topic": "solana",
    "command": "sb solana function create",
    "topics": [
      "solana",
      "function",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana function create QUEUEKEY --container <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>]\n    [--metadata <value>] [-a <value>] [--fundAmount <value>] [--containerRegistry dockerhub|ipfs] [--version <value>]\n    [--mrEnclave <value>] [--requestsDisabled] [--requestsFee <value>] [--requestsRequireAuthorization]\n    [--routinesDisabled] [--routinesFee <value>] [--routinesRequireAuthorization]\n\nARGUMENTS\n  QUEUEKEY  public key of the attestation queue account\n\nFLAGS\n  -a, --authority=<value>         keypair or public key to delegate authority to for managing the function account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -n, --name=<value>              name of the function for easier identification\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --container=<value>             (required) the location of the container (Ex. switchboardlabs/basic-oracle-function)\n  --containerRegistry=<option>    [default: dockerhub] the registry to pull the container from (Ex. Docker or IPFS)\n                                  <options: dockerhub|ipfs>\n  --fundAmount=<value>            [default: 0.0] token amount to load into the function's escrow wallet.\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --metadata=<value>              metadata of the function for easier identification\n  --mrEnclave=<value>             the MrEnclave value to set for the function - if not provided, will be set\n                                  automatically after its first run\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --requestsDisabled              whether custom requests can be created for this function\n  --requestsFee=<value>           [default: 0.0] the costs each request must pay the function authority for each\n                                  sub-request (Ex. 0.00002)\n  --requestsRequireAuthorization  whether custom requests require the function authority to authorize\n  --routinesDisabled              whether custom routines can be created for this function\n  --routinesFee=<value>           [default: 0.0] the costs each routine must pay the function authority for each\n                                  sub-request (Ex. 0.00002)\n  --routinesRequireAuthorization  whether custom routines require the function authority to authorize\n  --version=<value>               [default: latest] the version of the container to pull from the registry (Ex. 'latest'\n                                  or 'mainnet')\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new function account for a given queue\n\nEXAMPLES\n  $ sb solana function create CkvizjVnm2zA5Wuwan34NhVT3zFc7vqUyGnA6tuEF5aE --name function-1 --fundAmount 1.25 --container switchboardlabs/basic-oracle-function --version solana\n",
    "usage": "sb solana function create QUEUEKEY --container <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>]\n    [--metadata <value>] [-a <value>] [--fundAmount <value>] [--containerRegistry dockerhub|ipfs] [--version <value>]\n    [--mrEnclave <value>] [--requestsDisabled] [--requestsFee <value>] [--requestsRequireAuthorization]\n    [--routinesDisabled] [--routinesFee <value>] [--routinesRequireAuthorization]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the attestation queue account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair or public key to delegate authority to for managing the function account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-n, --name=<value>",
        "description": "name of the function for easier identification"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--container=<value>",
        "description": "(required) the location of the container (Ex. switchboardlabs/basic-oracle-function)"
      },
      {
        "flag": "--containerRegistry=<option>",
        "description": "[default: dockerhub] the registry to pull the container from (Ex. Docker or IPFS) <options: dockerhub|ipfs>"
      },
      {
        "flag": "--fundAmount=<value>",
        "description": "[default: 0.0] token amount to load into the function's escrow wallet."
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the function for easier identification"
      },
      {
        "flag": "--mrEnclave=<value>",
        "description": "the MrEnclave value to set for the function - if not provided, will be set automatically after its first run"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--requestsDisabled",
        "description": "whether custom requests can be created for this function"
      },
      {
        "flag": "--requestsFee=<value>",
        "description": "[default: 0.0] the costs each request must pay the function authority for each sub-request (Ex. 0.00002)"
      },
      {
        "flag": "--requestsRequireAuthorization",
        "description": "whether custom requests require the function authority to authorize"
      },
      {
        "flag": "--routinesDisabled",
        "description": "whether custom routines can be created for this function"
      },
      {
        "flag": "--routinesFee=<value>",
        "description": "[default: 0.0] the costs each routine must pay the function authority for each sub-request (Ex. 0.00002)"
      },
      {
        "flag": "--routinesRequireAuthorization",
        "description": "whether custom routines require the function authority to authorize"
      },
      {
        "flag": "--version=<value>",
        "description": "[default: latest] the version of the container to pull from the registry (Ex. 'latest' or 'mainnet') GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new function account for a given queue",
    "examples": [
      "sb solana function create CkvizjVnm2zA5Wuwan34NhVT3zFc7vqUyGnA6tuEF5aE --name function-1 --fundAmount 1.25 --container switchboardlabs/basic-oracle-function --version solana"
    ]
  },
  {
    "id": "solana-function-fund",
    "permalink": "/cli/solana/function/fund",
    "topic": "solana",
    "command": "sb solana function fund",
    "topics": [
      "solana",
      "function",
      "fund"
    ],
    "markdown": "USAGE\n  $ sb solana function fund FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--amount <value>]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --amount=<value>                [default: 0.0]\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  wrap SOL into a function accounts escrow wallet\n",
    "usage": "sb solana function fund FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--amount <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--amount=<value>",
        "description": "[default: 0.0]"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "wrap SOL into a function accounts escrow wallet"
  },
  {
    "id": "solana-function-get",
    "permalink": "/cli/solana/function/get",
    "topic": "solana",
    "command": "sb solana function get",
    "topics": [
      "solana",
      "function",
      "get"
    ],
    "markdown": "USAGE\n  $ sb solana function get [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [--json]\n    [--authority <value>]\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --authority=<value>             filter functions by authority pubkey\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a function account\n",
    "usage": "sb solana function get [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [--json]\n    [--authority <value>]",
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--authority=<value>",
        "description": "filter functions by authority pubkey"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a function account"
  },
  {
    "id": "solana-function-print",
    "permalink": "/cli/solana/function/print",
    "topic": "solana",
    "command": "sb solana function print",
    "topics": [
      "solana",
      "function",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana function print FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a function account\n",
    "usage": "sb solana function print FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a function account"
  },
  {
    "id": "solana-function-remove",
    "permalink": "/cli/solana/function/remove",
    "topic": "solana",
    "command": "sb solana function remove",
    "topics": [
      "solana",
      "function",
      "remove"
    ],
    "markdown": "USAGE\n  $ sb solana function remove-enclave FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] (--all | -e <value>)\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -a, --authority=<value>         keypair or public key to delegate authority to for managing the function account\n  -e, --mrEnclave=<value>...      (required) set the mr enclave to remove\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --all\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Configure a solana funciton's mrEnclave settings\n",
    "usage": "sb solana function remove-enclave FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] (--all | -e <value>)",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair or public key to delegate authority to for managing the function account"
      },
      {
        "flag": "-e, --mrEnclave=<value>...",
        "description": "(required) set the mr enclave to remove"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--all",
        "description": ""
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Configure a solana funciton's mrEnclave settings"
  },
  {
    "id": "solana-function-rm",
    "permalink": "/cli/solana/function/rm",
    "topic": "solana",
    "command": "sb solana function rm",
    "topics": [
      "solana",
      "function",
      "rm"
    ],
    "markdown": "USAGE\n  $ sb solana function rmMrEnclave FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] (--all | -e <value>)\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -a, --authority=<value>         keypair or public key to delegate authority to for managing the function account\n  -e, --mrEnclave=<value>...      (required) set the mr enclave to remove\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --all\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Configure a solana funciton's mrEnclave settings\n",
    "usage": "sb solana function rmMrEnclave FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] (--all | -e <value>)",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair or public key to delegate authority to for managing the function account"
      },
      {
        "flag": "-e, --mrEnclave=<value>...",
        "description": "(required) set the mr enclave to remove"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--all",
        "description": ""
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Configure a solana funciton's mrEnclave settings"
  },
  {
    "id": "solana-function-send",
    "permalink": "/cli/solana/function/send",
    "topic": "solana",
    "command": "sb solana function send",
    "topics": [
      "solana",
      "function",
      "send"
    ],
    "markdown": "USAGE\n  $ sb solana function send-request FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--parameters <value>]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --parameters=<value>            Parameters to pass to your function\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Init and trigger a request to a function.\n",
    "usage": "sb solana function send-request FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--parameters <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--parameters=<value>",
        "description": "Parameters to pass to your function"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Init and trigger a request to a function."
  },
  {
    "id": "solana-function-sync",
    "permalink": "/cli/solana/function/sync",
    "topic": "solana",
    "command": "sb solana function sync",
    "topics": [
      "solana",
      "function",
      "sync"
    ],
    "markdown": "USAGE\n  $ sb solana function sync-enclave FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--force]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -a, --authority=<value>         keypair or public key to delegate authority to for managing the function account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --force                         remove an enclave if the function's config has the maximum number of enclaves (32)\n                                  already present\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Fetch the MrEnclave value for your function and add if neccessary, add it to the function config\n",
    "usage": "sb solana function sync-enclave FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--force]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair or public key to delegate authority to for managing the function account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--force",
        "description": "remove an enclave if the function's config has the maximum number of enclaves (32) already present"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Fetch the MrEnclave value for your function and add if neccessary, add it to the function config"
  },
  {
    "id": "solana-function-test",
    "permalink": "/cli/solana/function/test",
    "topic": "solana",
    "command": "sb solana function test",
    "topics": [
      "solana",
      "function",
      "test"
    ],
    "markdown": "USAGE\n  $ sb solana function test [-h] [-v] [-s] [--mainnetBeta | --cluster <value>] [-u <value>] [--programId <value>]\n    [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [--parameters <value>]\n    [--devnetSimulate]\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<value>               The cluster to load if your function dynamically loads it\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --devnetSimulate                If the cluster is set to devnet, attempt to simulate\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --parameters=<value>            Parameters to pass to your function\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Simulate the switchboard function runtime to test your functions locally\n",
    "usage": "sb solana function test [-h] [-v] [-s] [--mainnetBeta | --cluster <value>] [-u <value>] [--programId <value>]\n    [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [--parameters <value>]\n    [--devnetSimulate]",
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<value>",
        "description": "The cluster to load if your function dynamically loads it"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--devnetSimulate",
        "description": "If the cluster is set to devnet, attempt to simulate"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--parameters=<value>",
        "description": "Parameters to pass to your function"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "Simulate the switchboard function runtime to test your functions locally"
  },
  {
    "id": "solana-function-withdraw",
    "permalink": "/cli/solana/function/withdraw",
    "topic": "solana",
    "command": "sb solana function withdraw",
    "topics": [
      "solana",
      "function",
      "withdraw"
    ],
    "markdown": "USAGE\n  $ sb solana function withdraw FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--withdrawAmount <value>] [--authority <value>]\n    [--destinationWallet <value>]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --authority=<value>             path to authority keypair if different from payer keypair\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --destinationWallet=<value>     pubkey of tokenWallet to receive withdrawed funds. Defaults to payer associated token\n                                  wallet\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --withdrawAmount=<value>        Amount of wrapped SOL to withdraw from the function's escrow\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Withdraw funds from a function's escrow\n",
    "usage": "sb solana function withdraw FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--withdrawAmount <value>] [--authority <value>]\n    [--destinationWallet <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--authority=<value>",
        "description": "path to authority keypair if different from payer keypair"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--destinationWallet=<value>",
        "description": "pubkey of tokenWallet to receive withdrawed funds. Defaults to payer associated token wallet"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--withdrawAmount=<value>",
        "description": "Amount of wrapped SOL to withdraw from the function's escrow GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Withdraw funds from a function's escrow"
  },
  {
    "id": "solana-job-create",
    "permalink": "/cli/solana/job/create",
    "topic": "solana",
    "command": "sb solana job create",
    "topics": [
      "solana",
      "job",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana job create --jobDefinition <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--jobKeypair\n    <value>] [-a <value>] [-n <value>]\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that will be the buffer relayer authority\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -n, --name=<value>              name of the buffer account\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --jobDefinition=<value>         (required) filesystem path to job definition\n  --jobKeypair=<value>            keypair to use for the job account. This will be the account's publicKey\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a job account\n",
    "usage": "sb solana job create --jobDefinition <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--jobKeypair\n    <value>] [-a <value>] [-n <value>]",
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that will be the buffer relayer authority"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-n, --name=<value>",
        "description": "name of the buffer account"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--jobDefinition=<value>",
        "description": "(required) filesystem path to job definition"
      },
      {
        "flag": "--jobKeypair=<value>",
        "description": "keypair to use for the job account. This will be the account's publicKey"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a job account"
  },
  {
    "id": "solana-job-print",
    "permalink": "/cli/solana/job/print",
    "topic": "solana",
    "command": "sb solana job print",
    "topics": [
      "solana",
      "job",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana job print JOBKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  JOBKEY  public key of the job account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an job and it's associated accounts\n",
    "usage": "sb solana job print JOBKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "JOBKEY",
        "description": "public key of the job account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print an job and it's associated accounts"
  },
  {
    "id": "solana-json-create_aggregator",
    "permalink": "/cli/solana/json/create_aggregator",
    "topic": "solana",
    "command": "sb solana json create aggregator",
    "topics": [
      "solana",
      "json",
      "create",
      "aggregator"
    ],
    "markdown": "USAGE\n  $ sb solana json create aggregator DEFINITIONFILE [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-q <value>] [-a <value>] [--leaseAmount <value>]\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of queue definition json file\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that will be the authority for the aggregator\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -q, --queueKey=<value>          public key of the oracle queue to create aggregator for\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --leaseAmount=<value>           [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5 wSOL\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator from a json file\n\nALIASES\n  $ sb solana json create aggregator\n\nEXAMPLES\n  $ sb solana aggregator create json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json\n",
    "usage": "sb solana json create aggregator DEFINITIONFILE [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-q <value>] [-a <value>] [--leaseAmount <value>]",
    "args": [
      {
        "arg": "DEFINITIONFILE",
        "description": "filesystem path of queue definition json file"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that will be the authority for the aggregator"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-q, --queueKey=<value>",
        "description": "public key of the oracle queue to create aggregator for"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--leaseAmount=<value>",
        "description": "[default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5 wSOL"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create an aggregator from a json file",
    "aliases": [
      "sb solana json create aggregator"
    ],
    "examples": [
      "sb solana aggregator create json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json"
    ]
  },
  {
    "id": "solana-lease-create",
    "permalink": "/cli/solana/lease/create",
    "topic": "solana",
    "command": "sb solana lease create",
    "topics": [
      "solana",
      "lease",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana lease create AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--amount <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --amount=<value>                token amount to load into the lease escrow. If decimals provided, amount will be\n                                  normalized to raw tokenAmount\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nEXAMPLES\n  $ sb solana lease create GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.5 --keypair ../payer-keypair.json\n",
    "usage": "sb solana lease create AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--amount <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--amount=<value>",
        "description": "token amount to load into the lease escrow. If decimals provided, amount will be normalized to raw tokenAmount"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "fund and re-enable an aggregator lease",
    "examples": [
      "sb solana lease create GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.5 --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-lease-extend",
    "permalink": "/cli/solana/lease/extend",
    "topic": "solana",
    "command": "sb solana lease extend",
    "topics": [
      "solana",
      "lease",
      "extend"
    ],
    "markdown": "USAGE\n  $ sb solana lease extend AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --amount=<value>                (required) amount to deposit into the lease escrow\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sb solana aggregator fund\n  $ sb solana aggregator deposit\n  $ sb solana aggregator extend\n\nEXAMPLES\n  $ sb solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n",
    "usage": "sb solana lease extend AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--amount=<value>",
        "description": "(required) amount to deposit into the lease escrow"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "fund and re-enable an aggregator lease",
    "aliases": [
      "sb solana aggregator fund",
      "sb solana aggregator deposit",
      "sb solana aggregator extend"
    ],
    "examples": [
      "sb solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-lease-print",
    "permalink": "/cli/solana/lease/print",
    "topic": "solana",
    "command": "sb solana lease print",
    "topics": [
      "solana",
      "lease",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana lease print LEASEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  LEASEKEY  public key of the lease account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a lease account\n",
    "usage": "sb solana lease print LEASEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "LEASEKEY",
        "description": "public key of the lease account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a lease account"
  },
  {
    "id": "solana-lease-set",
    "permalink": "/cli/solana/lease/set",
    "topic": "solana",
    "command": "sb solana lease set",
    "topics": [
      "solana",
      "lease",
      "set"
    ],
    "markdown": "USAGE\n  $ sb solana lease set AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>] [--queuePubkey <value>] [--newAuthority <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair delegated as the authority for managing the lease account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --newAuthority=<value>          new lease withdraw authority. if not set, defaults to the aggregator authority\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --queuePubkey=<value>           override the aggregators current queue. useful for withdrawing from a lease after\n                                  moving to a new queue\n\nDESCRIPTION\n  set a lease's withdraw authority\n\nALIASES\n  $ sb solana aggregator lease set\n\nEXAMPLES\n  $ sb solana:lease:set GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --keypair ../payer-keypair.json\n",
    "usage": "sb solana lease set AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>] [--queuePubkey <value>] [--newAuthority <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair delegated as the authority for managing the lease account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--newAuthority=<value>",
        "description": "new lease withdraw authority. if not set, defaults to the aggregator authority"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queuePubkey=<value>",
        "description": "override the aggregators current queue. useful for withdrawing from a lease after moving to a new queue"
      }
    ],
    "description": "set a lease's withdraw authority",
    "aliases": [
      "sb solana aggregator lease set"
    ],
    "examples": [
      "sb solana:lease:set GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-lease-withdraw",
    "permalink": "/cli/solana/lease/withdraw",
    "topic": "solana",
    "command": "sb solana lease withdraw",
    "topics": [
      "solana",
      "lease",
      "withdraw"
    ],
    "markdown": "USAGE\n  $ sb solana lease withdraw AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n    [--queuePubkey <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>         keypair delegated as the authority for managing the lease account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --amount=<value>                (required) token amount to withdraw from lease account\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --queuePubkey=<value>           override the aggregators current queue. useful for withdrawing from a lease after\n                                  moving to a new queue\n\nDESCRIPTION\n  withdraw funds from an aggregator lease\n\nALIASES\n  $ sb solana aggregator withdraw\n\nEXAMPLES\n  $ sb solana:aggregator:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n",
    "usage": "sb solana lease withdraw AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n    [--queuePubkey <value>]",
    "args": [
      {
        "arg": "AGGREGATORKEY",
        "description": "public key of the aggregator account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair delegated as the authority for managing the lease account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--amount=<value>",
        "description": "(required) token amount to withdraw from lease account"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queuePubkey=<value>",
        "description": "override the aggregators current queue. useful for withdrawing from a lease after moving to a new queue"
      }
    ],
    "description": "withdraw funds from an aggregator lease",
    "aliases": [
      "sb solana aggregator withdraw"
    ],
    "examples": [
      "sb solana:aggregator:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json"
    ]
  },
  {
    "id": "solana-network-create",
    "permalink": "/cli/solana/network/create",
    "topic": "solana",
    "command": "sb solana network create",
    "topics": [
      "solana",
      "network",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana network create --configFile <value> --schemaFile <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--force]\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --configFile=<value>            (required)\n  --force\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --schemaFile=<value>            (required)\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an oracle queue\n",
    "usage": "sb solana network create --configFile <value> --schemaFile <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--force]",
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--configFile=<value>",
        "description": "(required)"
      },
      {
        "flag": "--force",
        "description": ""
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--schemaFile=<value>",
        "description": "(required) GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create an oracle queue"
  },
  {
    "id": "solana-network-save",
    "permalink": "/cli/solana/network/save",
    "topic": "solana",
    "command": "sb solana network save",
    "topics": [
      "solana",
      "network",
      "save"
    ],
    "markdown": "USAGE\n  $ sb solana network save --queueKey <value> --outputFile <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [--json] [--force]\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --force\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --outputFile=<value>            (required) outputFile to save accounts in JSON format\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --queueKey=<value>              (required) queue account to load\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  save an existing switchboard network\n",
    "usage": "sb solana network save --queueKey <value> --outputFile <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [--json] [--force]",
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--force",
        "description": ""
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--outputFile=<value>",
        "description": "(required) outputFile to save accounts in JSON format"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queueKey=<value>",
        "description": "(required) queue account to load GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "save an existing switchboard network"
  },
  {
    "id": "solana-network-start",
    "permalink": "/cli/solana/network/start",
    "topic": "solana",
    "command": "sb solana network start",
    "topics": [
      "solana",
      "network",
      "start"
    ],
    "markdown": "USAGE\n  $ sb solana network start [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n    [--ledgerPath <value> --ledger] [--json] [--configFile <value>] [--schemaFile <value>] [--nodeImage <value>] [--arm]\n    [-t <value>] [--mainnetRpcUrl <value>]\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress docker logging\n  -t, --timeout=<value>           [default: 300] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --arm                           apple silicon needs to use a docker image for linux/arm64\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --configFile=<value>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --mainnetRpcUrl=<value>         [default: https://api.mainnet-beta.solana.com/] Solana mainnet RPC URL to use for the\n                                  oracle task runner\n  --nodeImage=<value>             [default: dev-v2-RC_02_24_23_18_43] public key of the oracle to start-up\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --schemaFile=<value>\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  start a switchboard network from a JSON file\n",
    "usage": "sb solana network start [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n    [--ledgerPath <value> --ledger] [--json] [--configFile <value>] [--schemaFile <value>] [--nodeImage <value>] [--arm]\n    [-t <value>] [--mainnetRpcUrl <value>]",
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress docker logging"
      },
      {
        "flag": "-t, --timeout=<value>",
        "description": "[default: 300] number of seconds before ending the docker process"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--arm",
        "description": "apple silicon needs to use a docker image for linux/arm64"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--configFile=<value>",
        "description": ""
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--mainnetRpcUrl=<value>",
        "description": "[default: https://api.mainnet-beta.solana.com/] Solana mainnet RPC URL to use for the oracle task runner"
      },
      {
        "flag": "--nodeImage=<value>",
        "description": "[default: dev-v2-RC_02_24_23_18_43] public key of the oracle to start-up"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--schemaFile=<value>",
        "description": "GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "start a switchboard network from a JSON file"
  },
  {
    "id": "solana-oracle-create",
    "permalink": "/cli/solana/oracle/create",
    "topic": "solana",
    "command": "sb solana oracle create",
    "topics": [
      "solana",
      "oracle",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana oracle create QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>] [--metadata <value>] [-a <value>] [--enable]\n    [--queueAuthority <value>] [--stakeAmount <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account\n\nFLAGS\n  -a, --authority=<value>         keypair to delegate authority to for managing the oracle account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -n, --name=<value>              name of the oracle for easier identification\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --enable                        enable oracle heartbeat permissions\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --metadata=<value>              metadata of the oracle for easier identification\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --queueAuthority=<value>        alternative keypair to use for queue authority\n  --stakeAmount=<value>           token amount to load into the oracle's staking wallet.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle account for a given queue\n\nEXAMPLES\n  $ sb solana:oracle:create F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --name oracle-1 --stakeAmount 1\n",
    "usage": "sb solana oracle create QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>] [--metadata <value>] [-a <value>] [--enable]\n    [--queueAuthority <value>] [--stakeAmount <value>]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the oracle queue account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair to delegate authority to for managing the oracle account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-n, --name=<value>",
        "description": "name of the oracle for easier identification"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--enable",
        "description": "enable oracle heartbeat permissions"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the oracle for easier identification"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queueAuthority=<value>",
        "description": "alternative keypair to use for queue authority"
      },
      {
        "flag": "--stakeAmount=<value>",
        "description": "token amount to load into the oracle's staking wallet. GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new oracle account for a given queue",
    "examples": [
      "sb solana:oracle:create F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --name oracle-1 --stakeAmount 1"
    ]
  },
  {
    "id": "solana-oracle-print",
    "permalink": "/cli/solana/oracle/print",
    "topic": "solana",
    "command": "sb solana oracle print",
    "topics": [
      "solana",
      "oracle",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana oracle print ORACLEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an oracle account\n",
    "usage": "sb solana oracle print ORACLEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "ORACLEKEY",
        "description": "public key of the oracle account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print an oracle account"
  },
  {
    "id": "solana-oracle-up",
    "permalink": "/cli/solana/oracle/up",
    "topic": "solana",
    "command": "sb solana oracle up",
    "topics": [
      "solana",
      "oracle",
      "up"
    ],
    "markdown": "USAGE\n  $ sb solana oracle up --oracleKey <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--releaseChannel\n    testnet|mainnet | --nodeImage <value>] [-t <value>]\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress docker logging\n  -t, --timeout=<value>           [default: 120] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --nodeImage=<value>             [default: dev-v2-RC_04_11_23_17_12] public key of the oracle to start-up\n  --oracleKey=<value>             (required) public key of the oracle to start-up\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --releaseChannel=<option>       [default: testnet] the oracle release channel\n                                  <options: testnet|mainnet>\n\nDESCRIPTION\n  start a solana docker oracle\n",
    "usage": "sb solana oracle up --oracleKey <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--releaseChannel\n    testnet|mainnet | --nodeImage <value>] [-t <value>]",
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress docker logging"
      },
      {
        "flag": "-t, --timeout=<value>",
        "description": "[default: 120] number of seconds before ending the docker process"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--nodeImage=<value>",
        "description": "[default: dev-v2-RC_04_11_23_17_12] public key of the oracle to start-up"
      },
      {
        "flag": "--oracleKey=<value>",
        "description": "(required) public key of the oracle to start-up"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--releaseChannel=<option>",
        "description": "[default: testnet] the oracle release channel <options: testnet|mainnet>"
      }
    ],
    "description": "start a solana docker oracle"
  },
  {
    "id": "solana-oracle-withdraw",
    "permalink": "/cli/solana/oracle/withdraw",
    "topic": "solana",
    "command": "sb solana oracle withdraw",
    "topics": [
      "solana",
      "oracle",
      "withdraw"
    ],
    "markdown": "USAGE\n  $ sb solana oracle withdraw ORACLEKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>] [-f]\n    [--unwrap] [--withdrawDestination <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair for the oracle authority\n  -f, --force                     allow withdrawing more than the queues minStake requirement\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --amount=<value>                (required) amount to withdraw\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --unwrap                        whether to unwrap the withdrawed funds\n  --withdrawDestination=<value>   the account to withdraw funds to. if unwrap is set, this should be a SystemProgram\n                                  owned account. if unwrap is not set, this should be a TokenAccount.\n\nDESCRIPTION\n  withdraw from an oracle's staking wallet\n",
    "usage": "sb solana oracle withdraw ORACLEKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>] [-f]\n    [--unwrap] [--withdrawDestination <value>]",
    "args": [
      {
        "arg": "ORACLEKEY",
        "description": "public key of the oracle account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair for the oracle authority"
      },
      {
        "flag": "-f, --force",
        "description": "allow withdrawing more than the queues minStake requirement"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--amount=<value>",
        "description": "(required) amount to withdraw"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--unwrap",
        "description": "whether to unwrap the withdrawed funds"
      },
      {
        "flag": "--withdrawDestination=<value>",
        "description": "the account to withdraw funds to. if unwrap is set, this should be a SystemProgram owned account. if unwrap is not set, this should be a TokenAccount."
      }
    ],
    "description": "withdraw from an oracle's staking wallet"
  },
  {
    "id": "solana-permission-create",
    "permalink": "/cli/solana/permission/create",
    "topic": "solana",
    "command": "sb solana permission create",
    "topics": [
      "solana",
      "permission",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana permission create --granter <value> --grantee <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--enable] [-a\n    <value>]\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the granter\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --enable                        whether to enable permissions on the resource. --keypair or --authority must be\n                                  provided\n  --grantee=<value>               (required) publicKey of the resource that is being granted permissions. This is\n                                  typically an AggregatorAccount, BufferRelayerAccount, OracleAccount, or VrfAccount.\n  --granter=<value>               (required) publicKey of the resource that is granting permissions. This is typically\n                                  the QueueAccount.\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account\n",
    "usage": "sb solana permission create --granter <value> --grantee <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--enable] [-a\n    <value>]",
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the granter"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--enable",
        "description": "whether to enable permissions on the resource. --keypair or --authority must be provided"
      },
      {
        "flag": "--grantee=<value>",
        "description": "(required) publicKey of the resource that is being granted permissions. This is typically an AggregatorAccount, BufferRelayerAccount, OracleAccount, or VrfAccount."
      },
      {
        "flag": "--granter=<value>",
        "description": "(required) publicKey of the resource that is granting permissions. This is typically the QueueAccount."
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a permission account"
  },
  {
    "id": "solana-permission-grant",
    "permalink": "/cli/solana/permission/grant",
    "topic": "solana",
    "command": "sb solana permission grant",
    "topics": [
      "solana",
      "permission",
      "grant"
    ],
    "markdown": "USAGE\n  $ sb solana permission grant PERMISSIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the permission account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  enable a resources permissions\n",
    "usage": "sb solana permission grant PERMISSIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>]",
    "args": [
      {
        "arg": "PERMISSIONKEY",
        "description": "public key of the permission account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the permission account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "enable a resources permissions"
  },
  {
    "id": "solana-permission-print",
    "permalink": "/cli/solana/permission/print",
    "topic": "solana",
    "command": "sb solana permission print",
    "topics": [
      "solana",
      "permission",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana permission print PERMISSIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a permission account\n",
    "usage": "sb solana permission print PERMISSIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "PERMISSIONKEY",
        "description": "public key of the permission account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a permission account"
  },
  {
    "id": "solana-permission-revoke",
    "permalink": "/cli/solana/permission/revoke",
    "topic": "solana",
    "command": "sb solana permission revoke",
    "topics": [
      "solana",
      "permission",
      "revoke"
    ],
    "markdown": "USAGE\n  $ sb solana permission revoke PERMISSIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the permission account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  disable a resources permissions\n",
    "usage": "sb solana permission revoke PERMISSIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [-a <value>]",
    "args": [
      {
        "arg": "PERMISSIONKEY",
        "description": "public key of the permission account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the permission account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "disable a resources permissions"
  },
  {
    "id": "solana-print",
    "permalink": "/cli/solana/print",
    "topic": "solana",
    "command": "sb solana print",
    "topics": [
      "solana",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana print PUBKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  PUBKEY  publicKey of the Switchboard account to search for\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a Switchboard account\n",
    "usage": "sb solana print PUBKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "PUBKEY",
        "description": "publicKey of the Switchboard account to search for"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a Switchboard account"
  },
  {
    "id": "solana-queue-create",
    "permalink": "/cli/solana/queue/create",
    "topic": "solana",
    "command": "sb solana queue create",
    "topics": [
      "solana",
      "queue",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana queue create [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n    [--ledgerPath <value> --ledger] [--json] [-a <value>] [--queueKeypair <value>] [--dataBufferKeypair <value>] [--size\n    <value>] [--name <value>] [--metadata <value>] [--reward <value>] [--minStake <value>] [--oracleTimeout <value>]\n    [--slashingEnabled] [--permissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [--feedProbationPeriod\n    <value>] [--consecutiveFeedFailureLimit <value>] [--consecutiveOracleFailureLimit <value>]\n\nFLAGS\n  -a, --authority=<value>                  alternate keypair that is the authority for the queue and is required to\n                                           approve permissions\n  -h, --help                               Show CLI help.\n  -k, --keypair=<value>                    keypair that will pay for onchain transactions. defaults to new account\n                                           authority if no alternate authority provided\n  -s, --silent                             suppress cli prompts\n  -u, --rpcUrl=<value>                     alternate RPC url\n  -v, --verbose                            log everything\n  --attestationProgramId=<value>           alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>                       the solana cluster to connect to\n                                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                    [default: confirmed] transaction commitment level to use\n                                           <options: confirmed|finalized|processed>\n  --consecutiveFeedFailureLimit=<value>    [default: 1000] consecutive failure limit for a feed before feed permission\n                                           is revoked.\n  --consecutiveOracleFailureLimit=<value>  [default: 1000] consecutive failure limit for an oracle before oracle\n                                           permission is revoked.\n  --dataBufferKeypair=<value>              keypair to use for the oracle queue data buffer account.\n  --enableBufferRelayers                   enabling this setting will allow buffer relayer accounts to call openRound.\n  --feedProbationPeriod=<value>            [default: 1000] After a feed lease is funded or re-funded, it must\n                                           consecutively succeed N amount of times or its authorization to use the queue\n                                           is auto-revoked.\n  --ledger                                 enable ledger support\n  --ledgerPath=<value>                     HID path to the ledger\n  --mainnetBeta                            WARNING: use mainnet-beta solana cluster\n  --metadata=<value>                       metadata of the aggregator\n  --minStake=<value>                       [default: 0] the reward payed out to oracles for responding to an update\n                                           request on-chain, Ex: 2 requires oracles to have 2 wSOL in their staking\n                                           wallet before heartbeating\n  --name=<value>                           name of the aggregator\n  --oracleTimeout=<value>                  [default: 180] time period (in seconds) we should remove an oracle after if\n                                           no response\n  --permissionedFeeds                      enabling this setting means data feeds need explicit permission to join the\n                                           queue.\n  --programId=<value>                      alternative Switchboard program ID to interact with\n  --queueKeypair=<value>                   keypair to use for the oracle queue account. This will be the account's\n                                           publicKey\n  --reward=<value>                         [default: 0] the reward payed out to oracles for responding to an update\n                                           request on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4\n                                           would deduct (4 * 0.0000075) wSOL from an aggregators lease each round.\n  --size=<value>                           [default: 100] set the size of the queue\n  --slashingEnabled                        whether slashing is enabled on this queue.\n  --unpermissionedVrf                      enabling this setting means data feeds do not need explicit permission to\n                                           request VRF proofs and verifications from this queue.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an oracle queue\n",
    "usage": "sb solana queue create [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n    [--ledgerPath <value> --ledger] [--json] [-a <value>] [--queueKeypair <value>] [--dataBufferKeypair <value>] [--size\n    <value>] [--name <value>] [--metadata <value>] [--reward <value>] [--minStake <value>] [--oracleTimeout <value>]\n    [--slashingEnabled] [--permissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [--feedProbationPeriod\n    <value>] [--consecutiveFeedFailureLimit <value>] [--consecutiveOracleFailureLimit <value>]",
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the queue and is required to approve permissions"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--consecutiveFeedFailureLimit=<value>",
        "description": "[default: 1000] consecutive failure limit for a feed before feed permission is revoked."
      },
      {
        "flag": "--consecutiveOracleFailureLimit=<value>",
        "description": "[default: 1000] consecutive failure limit for an oracle before oracle permission is revoked."
      },
      {
        "flag": "--dataBufferKeypair=<value>",
        "description": "keypair to use for the oracle queue data buffer account."
      },
      {
        "flag": "--enableBufferRelayers",
        "description": "enabling this setting will allow buffer relayer accounts to call openRound."
      },
      {
        "flag": "--feedProbationPeriod=<value>",
        "description": "[default: 1000] After a feed lease is funded or re-funded, it must consecutively succeed N amount of times or its authorization to use the queue is auto-revoked."
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the aggregator"
      },
      {
        "flag": "--minStake=<value>",
        "description": "[default: 0] the reward payed out to oracles for responding to an update request on-chain, Ex: 2 requires oracles to have 2 wSOL in their staking wallet before heartbeating"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the aggregator"
      },
      {
        "flag": "--oracleTimeout=<value>",
        "description": "[default: 180] time period (in seconds) we should remove an oracle after if no response"
      },
      {
        "flag": "--permissionedFeeds",
        "description": "enabling this setting means data feeds need explicit permission to join the queue."
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queueKeypair=<value>",
        "description": "keypair to use for the oracle queue account. This will be the account's publicKey"
      },
      {
        "flag": "--reward=<value>",
        "description": "[default: 0] the reward payed out to oracles for responding to an update request on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4 would deduct (4 * 0.0000075) wSOL from an aggregators lease each round."
      },
      {
        "flag": "--size=<value>",
        "description": "[default: 100] set the size of the queue"
      },
      {
        "flag": "--slashingEnabled",
        "description": "whether slashing is enabled on this queue."
      },
      {
        "flag": "--unpermissionedVrf",
        "description": "enabling this setting means data feeds do not need explicit permission to request VRF proofs and verifications from this queue. GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create an oracle queue"
  },
  {
    "id": "solana-queue-print",
    "permalink": "/cli/solana/queue/print",
    "topic": "solana",
    "command": "sb solana queue print",
    "topics": [
      "solana",
      "queue",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana queue print QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json] [--oracles]\n\nARGUMENTS\n  QUEUEKEY  public key of the queue account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --oracles                       print the queue oracles\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a queue account\n",
    "usage": "sb solana queue print QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json] [--oracles]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the queue account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--oracles",
        "description": "print the queue oracles"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a queue account"
  },
  {
    "id": "solana-queue-set",
    "permalink": "/cli/solana/queue/set",
    "topic": "solana",
    "command": "sb solana queue set",
    "topics": [
      "solana",
      "queue",
      "set"
    ],
    "markdown": "USAGE\n  $ sb solana queue set QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--reward\n    <value>] [--minStake <value>] [--oracleTimeout <value>] [--slashingEnabled] [--unpermissionedFeeds |\n    --permissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [--consecutiveFeedFailureLimit <value>]\n    [--consecutiveOracleFailureLimit <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the queue account\n\nFLAGS\n  -a, --authority=<value>                  alternate keypair that is the authority for the queue and is required to\n                                           approve permissions\n  -h, --help                               Show CLI help.\n  -k, --keypair=<value>                    keypair that will pay for onchain transactions. defaults to new account\n                                           authority if no alternate authority provided\n  -s, --silent                             suppress cli prompts\n  -u, --rpcUrl=<value>                     alternate RPC url\n  -v, --verbose                            log everything\n  --attestationProgramId=<value>           alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>                       the solana cluster to connect to\n                                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                    [default: confirmed] transaction commitment level to use\n                                           <options: confirmed|finalized|processed>\n  --consecutiveFeedFailureLimit=<value>    consecutive failure limit for a feed before feed permission is revoked.\n  --consecutiveOracleFailureLimit=<value>  consecutive failure limit for an oracle before oracle permission is revoked.\n  --enableBufferRelayers                   enabling this setting will allow buffer relayer accounts to call openRound.\n  --ledger                                 enable ledger support\n  --ledgerPath=<value>                     HID path to the ledger\n  --mainnetBeta                            WARNING: use mainnet-beta solana cluster\n  --metadata=<value>                       metadata of the aggregator\n  --minStake=<value>                       the reward payed out to oracles for responding to an update request on-chain,\n                                           Ex: 2 requires oracles to have 2 wSOL in their staking wallet before\n                                           heartbeating\n  --name=<value>                           name of the aggregator\n  --oracleTimeout=<value>                  time period (in seconds) we should remove an oracle after if no response\n  --permissionedFeeds                      enabling this setting means data feeds need explicit permission to join the\n                                           queue.\n  --programId=<value>                      alternative Switchboard program ID to interact with\n  --reward=<value>                         the reward payed out to oracles for responding to an update request on-chain,\n                                           Ex: A reward of 0.0000075 with a feed with a batchSize of 4 would deduct (4 *\n                                           0.0000075) wSOL from an aggregators lease each round.\n  --slashingEnabled                        whether slashing is enabled on this queue.\n  --unpermissionedFeeds                    enabling this setting means data feeds do not need explicit permission to\n                                           join the queue.\n  --unpermissionedVrf                      enabling this setting means data feeds do not need explicit permission to\n                                           request VRF proofs and verifications from this queue.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set an oracle queue's config\n",
    "usage": "sb solana queue set QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--reward\n    <value>] [--minStake <value>] [--oracleTimeout <value>] [--slashingEnabled] [--unpermissionedFeeds |\n    --permissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [--consecutiveFeedFailureLimit <value>]\n    [--consecutiveOracleFailureLimit <value>]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the queue account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the queue and is required to approve permissions"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--consecutiveFeedFailureLimit=<value>",
        "description": "consecutive failure limit for a feed before feed permission is revoked."
      },
      {
        "flag": "--consecutiveOracleFailureLimit=<value>",
        "description": "consecutive failure limit for an oracle before oracle permission is revoked."
      },
      {
        "flag": "--enableBufferRelayers",
        "description": "enabling this setting will allow buffer relayer accounts to call openRound."
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the aggregator"
      },
      {
        "flag": "--minStake=<value>",
        "description": "the reward payed out to oracles for responding to an update request on-chain, Ex: 2 requires oracles to have 2 wSOL in their staking wallet before heartbeating"
      },
      {
        "flag": "--name=<value>",
        "description": "name of the aggregator"
      },
      {
        "flag": "--oracleTimeout=<value>",
        "description": "time period (in seconds) we should remove an oracle after if no response"
      },
      {
        "flag": "--permissionedFeeds",
        "description": "enabling this setting means data feeds need explicit permission to join the queue."
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--reward=<value>",
        "description": "the reward payed out to oracles for responding to an update request on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4 would deduct (4 * 0.0000075) wSOL from an aggregators lease each round."
      },
      {
        "flag": "--slashingEnabled",
        "description": "whether slashing is enabled on this queue."
      },
      {
        "flag": "--unpermissionedFeeds",
        "description": "enabling this setting means data feeds do not need explicit permission to join the queue."
      },
      {
        "flag": "--unpermissionedVrf",
        "description": "enabling this setting means data feeds do not need explicit permission to request VRF proofs and verifications from this queue. GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "set an oracle queue's config"
  },
  {
    "id": "solana-request-print",
    "permalink": "/cli/solana/request/print",
    "topic": "solana",
    "command": "sb solana request print",
    "topics": [
      "solana",
      "request",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana request print REQUESTKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  REQUESTKEY  public key of the request account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a function request account\n",
    "usage": "sb solana request print REQUESTKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "REQUESTKEY",
        "description": "public key of the request account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a function request account"
  },
  {
    "id": "solana-request-send",
    "permalink": "/cli/solana/request/send",
    "topic": "solana",
    "command": "sb solana request send",
    "topics": [
      "solana",
      "request",
      "send"
    ],
    "markdown": "USAGE\n  $ sb solana request send FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--parameters <value>]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --parameters=<value>            Parameters to pass to your function\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Init and trigger a request to a function.\n",
    "usage": "sb solana request send FUNCTIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--parameters <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--parameters=<value>",
        "description": "Parameters to pass to your function"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Init and trigger a request to a function."
  },
  {
    "id": "solana-routine-configure",
    "permalink": "/cli/solana/routine/configure",
    "topic": "solana",
    "command": "sb solana routine configure",
    "topics": [
      "solana",
      "routine",
      "configure"
    ],
    "markdown": "USAGE\n  $ sb solana routine configure ROUTINEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>] [--metadata <value>] [-a <value>] [--schedule\n    <value>] [--parameters <value>] [--appendParams]\n\nARGUMENTS\n  ROUTINEKEY  public key of the routine account\n\nFLAGS\n  -a, --authority=<value>         keypair or public key to delegate authority to for managing the function account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -n, --name=<value>              name of the function for easier identification\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --appendParams                  append to current container parameters\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --metadata=<value>              metadata of the function for easier identification\n  --parameters=<value>            parameters to pass to the function\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --schedule=<value>              cron schedule\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new routine account for a given function\n\nEXAMPLES\n  $ sb solana routine create CkvizjVnm2zA5Wuwan34NhVT3zFc7vqUyGnA6tuEF5aE --name function-1 --fundAmount 1.25 --container switchboardlabs/basic-oracle-function --version solana --schedule \"*/10 * * * * *\" --params=xyz\n",
    "usage": "sb solana routine configure ROUTINEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>] [--metadata <value>] [-a <value>] [--schedule\n    <value>] [--parameters <value>] [--appendParams]",
    "args": [
      {
        "arg": "ROUTINEKEY",
        "description": "public key of the routine account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair or public key to delegate authority to for managing the function account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-n, --name=<value>",
        "description": "name of the function for easier identification"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--appendParams",
        "description": "append to current container parameters"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the function for easier identification"
      },
      {
        "flag": "--parameters=<value>",
        "description": "parameters to pass to the function"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--schedule=<value>",
        "description": "cron schedule GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new routine account for a given function",
    "examples": [
      "sb solana routine create CkvizjVnm2zA5Wuwan34NhVT3zFc7vqUyGnA6tuEF5aE --name function-1 --fundAmount 1.25 --container switchboardlabs/basic-oracle-function --version solana --schedule \"*/10 * * * * *\" --params=xyz"
    ]
  },
  {
    "id": "solana-routine-create",
    "permalink": "/cli/solana/routine/create",
    "topic": "solana",
    "command": "sb solana routine create",
    "topics": [
      "solana",
      "routine",
      "create"
    ],
    "markdown": "USAGE\n  $ sb solana routine create FUNCTIONKEY --schedule <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>]\n    [--metadata <value>] [-a <value>] [--parameters <value>]\n\nARGUMENTS\n  FUNCTIONKEY  public key of the function account\n\nFLAGS\n  -a, --authority=<value>         keypair or public key to delegate authority to for managing the function account\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -n, --name=<value>              name of the function for easier identification\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --metadata=<value>              metadata of the function for easier identification\n  --parameters=<value>            parameters to pass to the function\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --schedule=<value>              (required) cron schedule\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new routine account for a given function\n\nEXAMPLES\n  $ sb solana routine create CkvizjVnm2zA5Wuwan34NhVT3zFc7vqUyGnA6tuEF5aE --name function-1 --fundAmount 1.25 --container switchboardlabs/basic-oracle-function --version solana --schedule \"*/10 * * * * *\" --params=xyz\n",
    "usage": "sb solana routine create FUNCTIONKEY --schedule <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--attestationProgramId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>]\n    [--metadata <value>] [-a <value>] [--parameters <value>]",
    "args": [
      {
        "arg": "FUNCTIONKEY",
        "description": "public key of the function account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "keypair or public key to delegate authority to for managing the function account"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-n, --name=<value>",
        "description": "name of the function for easier identification"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--metadata=<value>",
        "description": "metadata of the function for easier identification"
      },
      {
        "flag": "--parameters=<value>",
        "description": "parameters to pass to the function"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--schedule=<value>",
        "description": "(required) cron schedule GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a new routine account for a given function",
    "examples": [
      "sb solana routine create CkvizjVnm2zA5Wuwan34NhVT3zFc7vqUyGnA6tuEF5aE --name function-1 --fundAmount 1.25 --container switchboardlabs/basic-oracle-function --version solana --schedule \"*/10 * * * * *\" --params=xyz"
    ]
  },
  {
    "id": "solana-routine-fund",
    "permalink": "/cli/solana/routine/fund",
    "topic": "solana",
    "command": "sb solana routine fund",
    "topics": [
      "solana",
      "routine",
      "fund"
    ],
    "markdown": "USAGE\n  $ sb solana routine fund ROUTINEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--fundAmount <value>]\n\nARGUMENTS\n  ROUTINEKEY  public key of the routine account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --fundAmount=<value>            [default: 0.0] token amount to load into the routines's escrow wallet.\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Fund a new routine account\n\nEXAMPLES\n  $ sb solana routine fund CkvizjVnm2zA5Wuwan34NhVT3zFc7vqUyGnA6tuEF5aE --fundAmount 1.25\n",
    "usage": "sb solana routine fund ROUTINEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [--fundAmount <value>]",
    "args": [
      {
        "arg": "ROUTINEKEY",
        "description": "public key of the routine account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--fundAmount=<value>",
        "description": "[default: 0.0] token amount to load into the routines's escrow wallet."
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "Fund a new routine account",
    "examples": [
      "sb solana routine fund CkvizjVnm2zA5Wuwan34NhVT3zFc7vqUyGnA6tuEF5aE --fundAmount 1.25"
    ]
  },
  {
    "id": "solana-routine-print",
    "permalink": "/cli/solana/routine/print",
    "topic": "solana",
    "command": "sb solana routine print",
    "topics": [
      "solana",
      "routine",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana routine print ROUTINEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  ROUTINEKEY  public key of the routine account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a function routine account\n",
    "usage": "sb solana routine print ROUTINEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "ROUTINEKEY",
        "description": "public key of the routine account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a function routine account"
  },
  {
    "id": "solana-verifier",
    "permalink": "/cli/solana/verifier",
    "topic": "solana",
    "command": "sb solana verifier",
    "topics": [
      "solana",
      "verifier"
    ],
    "markdown": "USAGE\n  $ sb solana verifier-oracle create QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--verifierKeypair <value>] [--registryKey <value>]\n    [--queueAuthority <value> --enable]\n\nARGUMENTS\n  QUEUEKEY  public key of the attestation queue account\n\nFLAGS\n  -a, --authority=<value>         alternate keypair that is the authority for the verifier and is required to approve\n                                  config changes and withdraw rewards\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --enable                        enable verifier heartbeat permissions\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n  --queueAuthority=<value>        alternative keypair to use for attestation queue authority\n  --registryKey=<value>           [default: Key to lookup the buffer data on IPFS or an alternative decentralized\n                                  storage solution.]\n  --verifierKeypair=<value>       keypair to use for the verifier account. This will be the account's publicKey\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a verifier oracle for a given attestation queue\n",
    "usage": "sb solana verifier-oracle create QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--verifierKeypair <value>] [--registryKey <value>]\n    [--queueAuthority <value> --enable]",
    "args": [
      {
        "arg": "QUEUEKEY",
        "description": "public key of the attestation queue account"
      }
    ],
    "flags": [
      {
        "flag": " -a, --authority=<value>",
        "description": "alternate keypair that is the authority for the verifier and is required to approve config changes and withdraw rewards"
      },
      {
        "flag": "-h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--enable",
        "description": "enable verifier heartbeat permissions"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      },
      {
        "flag": "--queueAuthority=<value>",
        "description": "alternative keypair to use for attestation queue authority"
      },
      {
        "flag": "--registryKey=<value>",
        "description": "[default: Key to lookup the buffer data on IPFS or an alternative decentralized storage solution.]"
      },
      {
        "flag": "--verifierKeypair=<value>",
        "description": "keypair to use for the verifier account. This will be the account's publicKey GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "create a verifier oracle for a given attestation queue"
  },
  {
    "id": "solana-verifier",
    "permalink": "/cli/solana/verifier",
    "topic": "solana",
    "command": "sb solana verifier",
    "topics": [
      "solana",
      "verifier"
    ],
    "markdown": "USAGE\n  $ sb solana verifier-oracle print VERIFIERKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  VERIFIERKEY  public key of the verifier account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a verifier oracle account\n",
    "usage": "sb solana verifier-oracle print VERIFIERKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "VERIFIERKEY",
        "description": "public key of the verifier account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a verifier oracle account"
  },
  {
    "id": "solana-version",
    "permalink": "/cli/solana/version",
    "topic": "solana",
    "command": "sb solana version",
    "topics": [
      "solana",
      "version"
    ],
    "markdown": "USAGE\n  $ sb solana version [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n    [--ledgerPath <value> --ledger] [--json]\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a Switchboard account\n",
    "usage": "sb solana version [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n    [--ledgerPath <value> --ledger] [--json]",
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a Switchboard account"
  },
  {
    "id": "solana-vrf-open",
    "permalink": "/cli/solana/vrf/open",
    "topic": "solana",
    "command": "sb solana vrf open",
    "topics": [
      "solana",
      "vrf",
      "open"
    ],
    "markdown": "USAGE\n  $ sb solana vrf open-round VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --authority=<value>             alternative keypair that is the VRF authority\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new vrf result from a set of oracles\n\nALIASES\n  $ sb solana vrf update\n  $ sb solana vrf open-round\n\nEXAMPLES\n  $ sb solana vrf request\n",
    "usage": "sb solana vrf open-round VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--authority <value>]",
    "args": [
      {
        "arg": "VRFKEY",
        "description": "public key of the VRF account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--authority=<value>",
        "description": "alternative keypair that is the VRF authority"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "request a new vrf result from a set of oracles",
    "aliases": [
      "sb solana vrf update",
      "sb solana vrf open-round"
    ],
    "examples": [
      "sb solana vrf request"
    ]
  },
  {
    "id": "solana-vrf-print",
    "permalink": "/cli/solana/vrf/print",
    "topic": "solana",
    "command": "sb solana vrf print",
    "topics": [
      "solana",
      "vrf",
      "print"
    ],
    "markdown": "USAGE\n  $ sb solana vrf print VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a VRF and it's associated accounts\n",
    "usage": "sb solana vrf print VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed]\n    [--json]",
    "args": [
      {
        "arg": "VRFKEY",
        "description": "public key of the VRF account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with GLOBAL FLAGS"
      },
      {
        "flag": "--json",
        "description": "Format output as json."
      }
    ],
    "description": "print a VRF and it's associated accounts"
  },
  {
    "id": "solana-vrf-request",
    "permalink": "/cli/solana/vrf/request",
    "topic": "solana",
    "command": "sb solana vrf request",
    "topics": [
      "solana",
      "vrf",
      "request"
    ],
    "markdown": "USAGE\n  $ sb solana vrf request VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --authority=<value>             alternative keypair that is the VRF authority\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new vrf result from a set of oracles\n\nALIASES\n  $ sb solana vrf update\n  $ sb solana vrf open-round\n\nEXAMPLES\n  $ sb solana vrf request\n",
    "usage": "sb solana vrf request VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--authority <value>]",
    "args": [
      {
        "arg": "VRFKEY",
        "description": "public key of the VRF account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--authority=<value>",
        "description": "alternative keypair that is the VRF authority"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "request a new vrf result from a set of oracles",
    "aliases": [
      "sb solana vrf update",
      "sb solana vrf open-round"
    ],
    "examples": [
      "sb solana vrf request"
    ]
  },
  {
    "id": "solana-vrf-update",
    "permalink": "/cli/solana/vrf/update",
    "topic": "solana",
    "command": "sb solana vrf update",
    "topics": [
      "solana",
      "vrf",
      "update"
    ],
    "markdown": "USAGE\n  $ sb solana vrf update VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account\n\nFLAGS\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --attestationProgramId=<value>  alternative Switchboard Attestation program ID to interact with\n  --authority=<value>             alternative keypair that is the VRF authority\n  --cluster=<option>              the solana cluster to connect to\n                                  <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --ledger                        enable ledger support\n  --ledgerPath=<value>            HID path to the ledger\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new vrf result from a set of oracles\n\nALIASES\n  $ sb solana vrf update\n  $ sb solana vrf open-round\n\nEXAMPLES\n  $ sb solana vrf request\n",
    "usage": "sb solana vrf update VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--attestationProgramId <value>] [--commitment confirmed|finalized|processed] [-k\n    <value>] [--ledgerPath <value> --ledger] [--authority <value>]",
    "args": [
      {
        "arg": "VRFKEY",
        "description": "public key of the VRF account"
      }
    ],
    "flags": [
      {
        "flag": " -h, --help",
        "description": "Show CLI help."
      },
      {
        "flag": "-k, --keypair=<value>",
        "description": "keypair that will pay for onchain transactions. defaults to new account authority if no alternate authority provided"
      },
      {
        "flag": "-s, --silent",
        "description": "suppress cli prompts"
      },
      {
        "flag": "-u, --rpcUrl=<value>",
        "description": "alternate RPC url"
      },
      {
        "flag": "-v, --verbose",
        "description": "log everything"
      },
      {
        "flag": "--attestationProgramId=<value>",
        "description": "alternative Switchboard Attestation program ID to interact with"
      },
      {
        "flag": "--authority=<value>",
        "description": "alternative keypair that is the VRF authority"
      },
      {
        "flag": "--cluster=<option>",
        "description": "the solana cluster to connect to <options: devnet|mainnet-beta|mainnet|localnet>"
      },
      {
        "flag": "--commitment=<option>",
        "description": "[default: confirmed] transaction commitment level to use <options: confirmed|finalized|processed>"
      },
      {
        "flag": "--ledger",
        "description": "enable ledger support"
      },
      {
        "flag": "--ledgerPath=<value>",
        "description": "HID path to the ledger"
      },
      {
        "flag": "--mainnetBeta",
        "description": "WARNING: use mainnet-beta solana cluster"
      },
      {
        "flag": "--programId=<value>",
        "description": "alternative Switchboard program ID to interact with"
      }
    ],
    "description": "request a new vrf result from a set of oracles",
    "aliases": [
      "sb solana vrf update",
      "sb solana vrf open-round"
    ],
    "examples": [
      "sb solana vrf request"
    ]
  }
]