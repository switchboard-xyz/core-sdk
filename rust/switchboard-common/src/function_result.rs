use crate::*;
use base64::{engine::general_purpose::STANDARD as b64, Engine as _};
use hex::FromHex;
use serde::{Deserialize, Serialize};
use sha3::{Digest, Keccak256};
use std::str::FromStr;

////////////////////////////////////////////////////////////////////////////
/// EVM
////////////////////////////////////////////////////////////////////////////

/// Represents an Ethereum Virtual Machine (EVM) transaction.
#[derive(Clone, PartialEq, Debug, Serialize, Deserialize)]
pub struct EvmTransaction {
    /// The expiration time of the transaction in seconds.
    pub expiration_time_seconds: u64,
    /// The maximum amount of gas that can be used for the transaction.
    pub gas_limit: String,
    /// The value of the transaction in wei.
    pub value: String,
    /// The address of the recipient of the transaction.
    pub to: Vec<u8>,
    /// The address of the sender of the transaction.
    pub from: Vec<u8>,
    /// The data payload of the transaction.
    pub data: Vec<u8>,
}

#[derive(Default, Clone, PartialEq, Debug, Serialize, Deserialize)]
pub struct EvmFunctionResultV0 {
    // NOTE: tx.len() == signatures.len() must be true
    pub txs: Vec<EvmTransaction>,
    pub signatures: Vec<Vec<u8>>,

    // NOTE: call_ids.len() == checksums.len() must be true - must also be mapped to txs
    // these params should be default if not used (i.e. empty)
    pub call_ids: Vec<Vec<u8>>,
    pub checksums: Vec<Vec<u8>>,
}

#[derive(Default, Clone, PartialEq, Debug, Serialize, Deserialize)]
pub struct EvmFunctionResultV1 {
    // id of the executed function
    pub function_id: String,

    // delegated signer address of the executed function
    pub signer: String,

    pub txs: Vec<EvmTransaction>,

    pub signatures: Vec<String>,

    // -- ids resolved by the function output --
    pub resolved_ids: Vec<String>,

    // -- checksums of the params used in the function call --
    pub checksums: Vec<String>,

    // -- error codes assigned to each request id --
    pub error_codes: Vec<u8>,
}

impl EvmFunctionResultV1 {
    /// Appends all fields of the structure to a Vec<u8> and hashes it using Keccak256.
    pub fn hash(&self) -> Vec<u8> {
        let mut buffer = Vec::new();

        buffer.extend(self.function_id.as_bytes());

        buffer.extend(self.signer.as_bytes());

        for tx in &self.txs {
            buffer.extend(&tx.expiration_time_seconds.to_le_bytes());
            buffer.extend(tx.gas_limit.as_bytes());
            buffer.extend(tx.value.as_bytes());
            buffer.extend(&tx.to);
            buffer.extend(&tx.from);
            buffer.extend(&tx.data);
        }

        for signature in &self.signatures {
            buffer.extend(signature.as_bytes());
        }

        for resolved_id in &self.resolved_ids {
            buffer.extend(resolved_id.as_bytes());
        }

        for checksum in &self.checksums {
            buffer.extend(checksum.as_bytes());
        }

        buffer.extend(&self.error_codes);

        let mut hasher = Keccak256::new();
        hasher.update(buffer);
        hasher.finalize().to_vec()
    }
}

/// Enum representing the result of an EVM function call.
#[derive(Clone, PartialEq, Debug, Serialize, Deserialize)]
#[serde(tag = "version")]
pub enum EvmFunctionResult {
    V0(EvmFunctionResultV0),
    V1(EvmFunctionResultV1),
}
impl Default for EvmFunctionResult {
    fn default() -> Self {
        Self::V0(EvmFunctionResultV0::default())
    }
}
#[derive(Default, Clone, PartialEq, Debug, Serialize, Deserialize)]
pub struct LegacyEvmFunctionResult {
    // NOTE: tx.len() == signatures.len() must be true
    pub txs: Vec<EvmTransaction>,
    pub signatures: Vec<Vec<u8>>,

    // NOTE: call_ids.len() == checksums.len() must be true - must also be mapped to txs
    // these params should be default if not used (i.e. empty)
    pub call_ids: Vec<Vec<u8>>,
    pub checksums: Vec<Vec<u8>>,
}
impl From<LegacyEvmFunctionResult> for EvmFunctionResult {
    fn from(item: LegacyEvmFunctionResult) -> EvmFunctionResult {
        EvmFunctionResult::V0(EvmFunctionResultV0 {
            txs: item.txs,
            signatures: item.signatures,
            call_ids: item.call_ids,
            checksums: item.checksums,
        })
    }
}
////////////////////////////////////////////////////////////////////////////
/// Solana
////////////////////////////////////////////////////////////////////////////

/// Represents the result of a Solana function call.
// @TODO: This should be a Solana transaction, not a serialized transaction.
#[derive(Default, Clone, PartialEq, Debug, Serialize, Deserialize)]
pub struct SolanaFunctionResultV0 {
    /// The serialized, partially-signed transaction.
    pub serialized_tx: Vec<u8>,
}

#[derive(Clone, PartialEq, Debug, Serialize, Deserialize)]
pub enum SolanaFunctionRequestType {
    Routine(Vec<u8>),
    Request(Vec<u8>),
    // keep at the end so we can deprecate
    Function(Vec<u8>),
}
impl Default for SolanaFunctionRequestType {
    fn default() -> Self {
        Self::Function(vec![])
    }
}
impl SolanaFunctionRequestType {
    pub fn is_routine(&self) -> bool {
        matches!(self, SolanaFunctionRequestType::Routine(_))
    }

    pub fn is_request(&self) -> bool {
        matches!(self, SolanaFunctionRequestType::Request(_))
    }
}

/// Represents the result of a Solana function call.
#[derive(Default, Clone, PartialEq, Debug, Serialize, Deserialize)]
pub struct SolanaFunctionResultV1 {
    pub fn_key: Vec<u8>,
    /// The serialized, partially-signed transaction.
    pub serialized_tx: Vec<u8>,
    /// The request pubkey
    pub request_type: SolanaFunctionRequestType,
    /// A sha-256 hash of the parameters used in the request call.
    pub request_hash: Vec<u8>,
}

#[derive(Clone, PartialEq, Debug, Serialize, Deserialize)]
#[serde(tag = "version")]
pub enum SolanaFunctionResult {
    V0(SolanaFunctionResultV0),
    V1(SolanaFunctionResultV1),
}
impl Default for SolanaFunctionResult {
    fn default() -> Self {
        Self::V1(SolanaFunctionResultV1::default())
    }
}
impl SolanaFunctionResult {
    pub fn serialized_tx(&self) -> Vec<u8> {
        match self {
            SolanaFunctionResult::V0(SolanaFunctionResultV0 { serialized_tx }) => {
                serialized_tx.clone()
            }
            SolanaFunctionResult::V1(SolanaFunctionResultV1 { serialized_tx, .. }) => {
                serialized_tx.clone()
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////
/// Function result info
////////////////////////////////////////////////////////////////////////////

#[derive(Default, PartialEq, Clone, Debug, Serialize, Deserialize)]
#[serde(tag = "chain")]
pub enum ChainResultInfo {
    #[default]
    None,
    Solana(SolanaFunctionResult),
    Evm(EvmFunctionResult),
}

/// The schema of the output data that will be sent to the quote verification sidecar.
#[derive(Clone, PartialEq, Default, Debug, Serialize, Deserialize)]
pub struct FunctionResultV0 {
    /// Buffer containing the quote signing the output
    pub quote: Vec<u8>,
    /// key of the executed function
    pub fn_key: Vec<u8>,
    /// The oracle's signer used to sign off on the execution
    pub signer: Vec<u8>,
    /// If the call was a funciton request, the address of the request account.
    pub fn_request_key: Vec<u8>,
    /// A sha-256 hash of the parameters used in this request call.
    pub fn_request_hash: Vec<u8>,
    /// Chain specific info
    pub chain_result_info: ChainResultInfo,
    /// On function failure, users should emit with error code to avoid
    /// aggressive backoffs
    #[serde(default)]
    pub error_code: u8,
}

/// The schema of the output data that will be sent to the quote verification sidecar.
#[derive(Clone, PartialEq, Default, Debug, Serialize, Deserialize)]
pub struct FunctionResultV1 {
    /// Buffer containing the quote signing the output
    pub quote: Vec<u8>,
    /// The enclave generated signer's pubkey. This is used to verify the quote
    pub signer: Vec<u8>,
    /// The signature of the chain_result_info signed by the enclave generated signer.
    pub signature: Vec<u8>,
    /// Chain specific info
    pub chain_result_info: ChainResultInfo,
    /// On function failure, users should emit with error code to avoid aggressive backoffs
    #[serde(default)]
    pub error_code: u8,
}

#[derive(Clone, PartialEq, Debug, Serialize, Deserialize)]
#[serde(tag = "version")]
pub enum FunctionResult {
    V0(FunctionResultV0),
    V1(FunctionResultV1),
}
impl Default for FunctionResult {
    fn default() -> Self {
        Self::V1(FunctionResultV1::default())
    }
}

pub static FUNCTION_RESULT_PREFIX: &str = "FN_OUT: ";

impl FunctionResult {
    pub fn is_solana(&self) -> bool {
        match self {
            FunctionResult::V0(FunctionResultV0 {
                chain_result_info, ..
            }) => matches!(chain_result_info, ChainResultInfo::Solana(_)),
            FunctionResult::V1(FunctionResultV1 {
                chain_result_info, ..
            }) => matches!(chain_result_info, ChainResultInfo::Solana(_)),
        }
    }

    pub fn is_evm(&self) -> bool {
        match self {
            FunctionResult::V0(FunctionResultV0 {
                chain_result_info, ..
            }) => matches!(chain_result_info, ChainResultInfo::Evm(_)),
            FunctionResult::V1(FunctionResultV1 {
                chain_result_info, ..
            }) => matches!(chain_result_info, ChainResultInfo::Evm(_)),
        }
    }

    pub fn error_code(&self) -> u8 {
        match self {
            FunctionResult::V0(FunctionResultV0 { error_code, .. }) => *error_code,
            FunctionResult::V1(FunctionResultV1 { error_code, .. }) => *error_code,
        }
    }

    pub fn set_error_code(&mut self, error_code: u8) {
        match self {
            FunctionResult::V0(v) => {
                v.error_code = error_code;
            }
            FunctionResult::V1(v) => {
                v.error_code = error_code;
            }
        }
    }

    pub fn is_err(&self) -> bool {
        self.error_code() != 0
    }

    pub fn version(&self) -> u32 {
        match self {
            FunctionResult::V0(_) => 0,
            FunctionResult::V1(_) => 1,
        }
    }

    pub fn fn_key(&self) -> Result<Vec<u8>, SbError> {
        let fn_key = match self {
            FunctionResult::V0(FunctionResultV0 { fn_key, .. }) => fn_key.clone(),
            FunctionResult::V1(FunctionResultV1 {
                chain_result_info, ..
            }) => match chain_result_info {
                ChainResultInfo::Solana(sol) => match sol {
                    SolanaFunctionResult::V0(_) => vec![],
                    SolanaFunctionResult::V1(v) => v.fn_key.clone(),
                },
                ChainResultInfo::Evm(evm) => match evm {
                    EvmFunctionResult::V0(_v) => vec![],
                    EvmFunctionResult::V1(v) => v.function_id.as_str().as_bytes().to_vec(),
                },
                _ => vec![],
            },
        };

        if fn_key.is_empty() {
            Err("Failed to get fn_key from FunctionResult".into())
        } else {
            Ok(fn_key)
        }
    }

    pub fn chain_result_info(&self) -> Result<ChainResultInfo, SbError> {
        let chain_result_info = match self {
            FunctionResult::V0(v) => v.chain_result_info.clone(),
            FunctionResult::V1(v) => v.chain_result_info.clone(),
        };

        Ok(chain_result_info)
    }

    pub fn quote_bytes(&self) -> &[u8] {
        match self {
            FunctionResult::V0(FunctionResultV0 { quote, .. }) => quote,
            FunctionResult::V1(FunctionResultV1 { quote, .. }) => quote,
        }
    }

    cfg_client! {
        pub fn quote(&self) -> Result<sgx_quote::Quote, SbError> {
            sgx_quote::Quote::parse(&self.quote_bytes()).map_err(|_| SbError::QuoteParseError)
        }
    }

    pub fn signer(&self) -> &[u8] {
        match self {
            FunctionResult::V0(FunctionResultV0 { signer, .. }) => signer,
            FunctionResult::V1(FunctionResultV1 { signer, .. }) => signer,
        }
    }

    pub fn to_string(&self) -> Result<String, SbError> {
        serde_json::to_string(&self).map_err(|e| SbError::CustomError {
            message: "Failed to convert FunctionResult to string".to_string(),
            source: std::sync::Arc::new(e),
        })
    }

    pub fn hex_encode(&self) -> String {
        hex::encode(self.to_string().unwrap_or_default())
    }

    pub fn emit_hex(&self) {
        println!(
            "{}{}",
            FUNCTION_RESULT_PREFIX,
            hex::encode(self.to_string().unwrap())
        );
    }

    pub fn emit_base64(&self) {
        println!(
            "{}{}",
            FUNCTION_RESULT_PREFIX,
            b64.encode(self.to_string().unwrap().as_bytes())
        );
    }

    pub fn emit(&self) {
        self.emit_hex()
    }

    pub fn decode(s: &str) -> std::result::Result<Self, SbError> {
        Self::from_str(s)
    }
}
impl From<LegacyFunctionResult> for FunctionResult {
    fn from(item: LegacyFunctionResult) -> FunctionResult {
        FunctionResult::V0(FunctionResultV0 {
            quote: item.quote,
            fn_key: item.fn_key,
            signer: item.signer,
            fn_request_key: item.fn_request_key,
            fn_request_hash: item.fn_request_hash,
            chain_result_info: item.chain_result_info.into(),
            error_code: item.error_code,
        })
    }
}
impl FromHex for FunctionResult {
    type Error = SbError;

    // Does not account for FN_OUT prefix
    fn from_hex<T: AsRef<[u8]>>(hex: T) -> std::result::Result<Self, Self::Error> {
        let bytes = hex::decode(hex)?;

        bytes.try_into()
    }
}
impl FromStr for FunctionResult {
    type Err = SbError;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        // Strip the FN_OUT prefix if its in the string
        let s = s.strip_prefix(FUNCTION_RESULT_PREFIX).unwrap_or(s);

        // Try to hex decode the string, fallback to utf-8
        let bytes = match hex::decode(s) {
            Ok(b) => b,
            // TODO: handle base64 decoding
            Err(_) => s.as_bytes().to_vec(),
        };

        bytes.try_into()
    }
}

impl TryFrom<Vec<u8>> for FunctionResult {
    type Error = SbError;

    fn try_from(bytes: Vec<u8>) -> Result<Self, Self::Error> {
        // First try to deserialize into the correct type
        let error_msg = match serde_json::from_slice::<FunctionResult>(&bytes) {
            Ok(deserialized) => {
                return Ok(deserialized);
            }
            Err(e) => {
                format!("Failed to decode FunctionResult: {:?}", e)
            }
        };

        // Fallback to using the LegacyFunctionResult if it cant be deserialized
        match serde_json::from_slice::<LegacyFunctionResult>(&bytes) {
            Ok(deserialized) => {
                return Ok(deserialized.into());
            }
            Err(e) => {
                log::info!("Failed to decode LegacyFunctionResult: {:?}", e);
            }
        }

        println!("{}", String::from_utf8(bytes).unwrap_or_default());

        Err(SbError::CustomMessage(format!(
            "Failed to decode FunctionResult {:?}",
            error_msg
        )))
    }
}

/// The schema of the output data that will be sent to the quote verification sidecar.
/// This implementation has been deprecated in favor of `FunctionResult`.
#[derive(Clone, PartialEq, Default, Debug, Serialize, Deserialize)]
pub struct LegacyFunctionResult {
    /// version of the output format
    pub version: u32,
    /// Buffer containing the quote signing the output
    pub quote: Vec<u8>,
    /// key of the executed function
    pub fn_key: Vec<u8>,
    /// The oracle's signer used to sign off on the execution
    pub signer: Vec<u8>,
    /// If the call was a funciton request, the address of the request account.
    pub fn_request_key: Vec<u8>,
    /// A sha-256 hash of the parameters used in this request call.
    pub fn_request_hash: Vec<u8>,
    /// Chain specific info
    pub chain_result_info: LegacyChainResultInfo,
    /// On function failure, users should emit with error code to avoid
    /// aggressive backoffs
    #[serde(default)]
    pub error_code: u8,
}

#[derive(Default, PartialEq, Clone, Debug, Serialize, Deserialize)]
pub enum LegacyChainResultInfo {
    #[default]
    None,
    Solana(LegacySolanaFunctionResult),
    Evm(LegacyEvmFunctionResult),
}
impl From<LegacyChainResultInfo> for ChainResultInfo {
    fn from(item: LegacyChainResultInfo) -> ChainResultInfo {
        match item {
            LegacyChainResultInfo::Solana(sol) => ChainResultInfo::Solana(sol.into()),
            LegacyChainResultInfo::Evm(evm) => ChainResultInfo::Evm(evm.into()),
            _ => ChainResultInfo::None,
        }
    }
}

#[derive(Default, PartialEq, Clone, Debug, Serialize, Deserialize)]
pub struct LegacySolanaFunctionResult {
    pub serialized_tx: Vec<u8>,
}
impl From<LegacySolanaFunctionResult> for SolanaFunctionResult {
    fn from(item: LegacySolanaFunctionResult) -> SolanaFunctionResult {
        SolanaFunctionResult::V0(SolanaFunctionResultV0 {
            serialized_tx: item.serialized_tx,
        })
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use pretty_assertions::assert_eq;
    use rand::Rng;

    // FunctionResult { version: 0, quote: [], fn_key: [], signer: [], fn_request_key: [], fn_request_hash: [], chain_result_info: None, error_code: 0 }
    pub const EMPTY_ENCODED_FN_RESULT: &str =
        "7b2276657273696f6e223a302c2271756f7465223a5b5d2c22666e5f6b6579223a5b5d2c227369676e6572223a5b5d2c22666e5f726571756573745f6b6579223a5b5d2c22666e5f726571756573745f68617368223a5b5d2c22636861696e5f726573756c745f696e666f223a224e6f6e65222c226572726f725f636f6465223a307d";

    // FunctionResult { version: 0, quote: [], fn_key: [], signer: [], fn_request_key: [], fn_request_hash: [], chain_result_info: Solana(SOLFunctionResult { serialized_tx: [1, 2, 3] }), error_code: 0 }
    pub const SOL_ENCODED_FN_RESULT: &str =
        "7b2276657273696f6e223a302c2271756f7465223a5b5d2c22666e5f6b6579223a5b5d2c227369676e6572223a5b5d2c22666e5f726571756573745f6b6579223a5b5d2c22666e5f726571756573745f68617368223a5b5d2c22636861696e5f726573756c745f696e666f223a7b22536f6c616e61223a7b2273657269616c697a65645f7478223a5b312c322c335d7d7d2c226572726f725f636f6465223a307d";

    pub const TEST_CASE_1: &str =
        "FN_OUT: ";

    #[test]
    fn test_legacy_decode() {
        let _ = simple_logger::init_with_level(log::Level::Debug);

        let decoded =
            FunctionResult::decode(&format!("FN_OUT: {}", EMPTY_ENCODED_FN_RESULT)).unwrap();

        assert_eq!(decoded, FunctionResult::V0(FunctionResultV0::default()));
    }

    #[test]
    fn test_legacy_quote() {
        let _ = simple_logger::init_with_level(log::Level::Debug);

        let mut rng = rand::thread_rng();

        let quote: Vec<u8> = (0..1456).map(|_| rng.gen::<u8>()).collect();
        let fn_key: Vec<u8> = (0..32).map(|_| rng.gen::<u8>()).collect();
        let signer: Vec<u8> = (0..32).map(|_| rng.gen::<u8>()).collect();

        let legacy = LegacyFunctionResult {
            fn_key: fn_key.clone(),
            version: 1,
            quote: quote.clone(),
            signer: signer.clone(),
            fn_request_key: vec![],
            fn_request_hash: vec![],
            chain_result_info: LegacyChainResultInfo::default(),
            error_code: 1,
        };

        let function_result: FunctionResult = legacy.into();

        // println!("Quote = {:#?}", quote);

        assert_eq!(quote, function_result.quote_bytes().to_vec());
        assert_eq!(fn_key, function_result.fn_key().unwrap());
        assert_eq!(signer, function_result.signer().to_vec());
    }

    #[test]
    fn test_decode() {
        let _ = simple_logger::init_with_level(log::Level::Debug);

        let fr = FunctionResult::default();

        let encoded = format!(
            "FN_OUT: {}",
            hex::encode(serde_json::to_string(&fr).unwrap())
        );
        // println!("Encoded: {:?}", encoded);

        let decoded = FunctionResult::decode(&encoded).unwrap();
        // println!("Decoded: {:?}", decoded);

        assert_eq!(decoded, FunctionResult::default());
    }

    #[test]
    fn test_case_1() {
        let _ = simple_logger::init_with_level(log::Level::Debug);
        let _decoded = FunctionResult::decode(TEST_CASE_1).unwrap();
        // assert!(decoded_result.is_ok())
    }

    #[test]
    fn test_evm_v0_decode() {
        let _ = simple_logger::init_with_level(log::Level::Debug);

        let evm_result = EvmFunctionResultV0::default();
        let fr = FunctionResult::V0(FunctionResultV0 {
            quote: vec![],
            fn_key: vec![],
            signer: vec![],
            fn_request_key: vec![],
            fn_request_hash: vec![],
            chain_result_info: ChainResultInfo::Evm(EvmFunctionResult::V0(evm_result)),
            error_code: 0,
        });

        let encoded = format!(
            "FN_OUT: {}",
            hex::encode(serde_json::to_string(&fr).unwrap())
        );
        // println!("Encoded: {:?}", encoded);

        let decoded = FunctionResult::decode(&encoded).unwrap();
        // println!("Decoded: {:?}", decoded);

        match decoded {
            FunctionResult::V0(FunctionResultV0 {
                chain_result_info:
                    ChainResultInfo::Evm(EvmFunctionResult::V0(decoded_evm_v0_result)),
                ..
            }) => {
                assert_eq!(decoded_evm_v0_result, EvmFunctionResultV0::default());
            }
            _ => panic!("Expected EVMFunctionResultV0"),
        }
    }
}
