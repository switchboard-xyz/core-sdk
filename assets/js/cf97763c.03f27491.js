"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53780,12619,3319,32947,72582,94972,5314],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>m});var t=n(67294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),u=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=u(e.components);return t.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,v=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?t.createElement(v,l(l({ref:a},c),{},{components:n})):t.createElement(v,l({ref:a},c))}));function m(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,a,n)=>{n.d(a,{Z:()=>l});var t=n(67294),o=n(86010);const r="tabItem_Ymn6";function l(e){let{children:a,hidden:n,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:n},a)}},65488:(e,a,n)=>{n.d(a,{Z:()=>m});var t=n(83117),o=n(67294),r=n(86010),l=n(72389),i=n(67392),s=n(7094),u=n(12466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){var a,n;const{lazy:l,block:d,defaultValue:m,values:v,groupId:g,className:h}=e,f=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=v?v:f.map((e=>{let{props:{value:a,label:n,attributes:t}}=e;return{value:a,label:n,attributes:t}})),k=(0,i.l)(b,((e,a)=>e.value===a.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===m?m:null!=(a=null!=m?m:null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)?a:f[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:E,setTabGroupChoices:A}=(0,s.U)(),[G,w]=(0,o.useState)(y),N=[],{blockElementScrollPositionUntilNextRender:I}=(0,u.o5)();if(null!=g){const e=E[g];null!=e&&e!==G&&b.some((a=>a.value===e))&&w(e)}const R=e=>{const a=e.currentTarget,n=N.indexOf(a),t=b[n].value;t!==G&&(I(a),w(t),null!=g&&A(g,String(t)))},S=e=>{var a;let n=null;switch(e.key){case"Enter":R(e);break;case"ArrowRight":{var t;const a=N.indexOf(e.currentTarget)+1;n=null!=(t=N[a])?t:N[0];break}case"ArrowLeft":{var o;const a=N.indexOf(e.currentTarget)-1;n=null!=(o=N[a])?o:N[N.length-1];break}}null==(a=n)||a.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},h)},b.map((e=>{let{value:a,label:n,attributes:l}=e;return o.createElement("li",(0,t.Z)({role:"tab",tabIndex:G===a?0:-1,"aria-selected":G===a,key:a,ref:e=>N.push(e),onKeyDown:S,onClick:R},l,{className:(0,r.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":G===a})}),null!=n?n:a)}))),l?(0,o.cloneElement)(f.filter((e=>e.props.value===G))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},f.map(((e,a)=>(0,o.cloneElement)(e,{key:a,hidden:e.props.value!==G})))))}function m(e){const a=(0,l.Z)();return o.createElement(d,(0,t.Z)({key:String(a)},e))}},34445:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var t=n(83117),o=(n(67294),n(3905));const r={title:"Add Job"},l=void 0,i={unversionedId:"cli/solana/aggregator/add_job",id:"cli/solana/aggregator/add_job",title:"Add Job",description:"add jobs to an aggregator",source:"@site/docs/cli/solana/aggregator/add_job.md",sourceDirName:"cli/solana/aggregator",slug:"/cli/solana/aggregator/add_job",permalink:"/cli/solana/aggregator/add_job",draft:!1,tags:[],version:"current",frontMatter:{title:"Add Job"},sidebar:"cli",previous:{title:"Add History",permalink:"/cli/solana/aggregator/add_history"},next:{title:"Create",permalink:"/cli/solana/aggregator/create"}},s={},u=[],c={toc:u};function p(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"add jobs to an aggregator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana aggregator add job [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--jobDefinition <value>] [--jobKey\n    <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>     alternate keypair that is the authority for the aggregator\n  -h, --help                  Show CLI help.\n  -k, --keypair=<value>       keypair that will pay for onchain transactions. defaults to new account authority if no\n                              alternate authority provided\n  -s, --silent                suppress cli prompts\n  -u, --rpcUrl=<value>        alternate RPC url\n  -v, --verbose               log everything\n  --cluster=<option>          the solana cluster to connect to\n                              <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>       [default: confirmed] transaction commitment level to use\n                              <options: confirmed|finalized|processed>\n  --jobDefinition=<value>...  filesystem path of job json definition file\n  --jobKey=<value>...         public key of an existing job account to add to an aggregator\n  --ledger                    enable ledger support\n  --ledgerPath=<value>        HID path to the ledger\n  --mainnetBeta               WARNING: use mainnet-beta solana cluster\n  --programId=<value>         alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  add jobs to an aggregator\n\nEXAMPLES\n  $ sbv2 solana aggregator add job\n")))}p.isMDXComponent=!0},98828:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var t=n(83117),o=(n(67294),n(3905));const r={title:"Create"},l=void 0,i={unversionedId:"cli/solana/aggregator/create",id:"cli/solana/aggregator/create",title:"Create",description:"create an aggregator account",source:"@site/docs/cli/solana/aggregator/create.md",sourceDirName:"cli/solana/aggregator",slug:"/cli/solana/aggregator/create",permalink:"/cli/solana/aggregator/create",draft:!1,tags:[],version:"current",frontMatter:{title:"Create"},sidebar:"cli",previous:{title:"Add Job",permalink:"/cli/solana/aggregator/add_job"},next:{title:"Create Json",permalink:"/cli/solana/aggregator/create_json"}},s={},u=[],c={toc:u};function p(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"create an aggregator account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana aggregator create [QUEUEKEY] --updateInterval <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--aggregatorKeypair <value>] [--name <value>] [--metadata <value>] [--batchSize <value>] [--minJobs <value>]\n    [--minOracles <value>] [--forceReportPeriod <value>] [--varianceThreshold <value>] [--historyLimit <value>]\n    [--crankKey <value> | --disableCrank] [--queueAuthority <value>] [--enable] [--leaseAmount <value>] [-j <value>]\n    [--jobKey <value>] [--slidingWindow] [--basePriorityFee <value>] [--priorityFeeBump <value>]\n    [--priorityFeeBumpPeriod <value>] [--maxPriorityFeeMultiplier <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create an aggregator on\n\nFLAGS\n  -a, --authority=<value>             alternate keypair that is the authority for the aggregator\n  -h, --help                          Show CLI help.\n  -j, --job=<value>...                filesystem path to job definition file\n  -k, --keypair=<value>               keypair that will pay for onchain transactions. defaults to new account authority\n                                      if no alternate authority provided\n  -s, --silent                        suppress cli prompts\n  -u, --rpcUrl=<value>                alternate RPC url\n  -v, --verbose                       log everything\n  --aggregatorKeypair=<value>         keypair to use for aggregator account. This will be the account's publicKey\n  --basePriorityFee=<value>\n  --batchSize=<value>                 [default: 1] number of oracles requested for each open round call\n  --cluster=<option>                  the solana cluster to connect to\n                                      <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>               [default: confirmed] transaction commitment level to use\n                                      <options: confirmed|finalized|processed>\n  --crankKey=<value>                  public key of the crank to join\n  --disableCrank                      whether the newly created feed can be pushed onto a crank. irreversible\n  --enable                            set permissions to PERMIT_ORACLE_QUEUE_USAGE\n  --forceReportPeriod=<value>         Number of seconds for which, even if the variance threshold is not passed, accept\n                                      new responses from oracles.\n  --historyLimit=<value>              number of historical samples to store\n  --jobKey=<value>...                 public key of existing job account\n  --leaseAmount=<value>               [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5\n                                      wSOL\n  --ledger                            enable ledger support\n  --ledgerPath=<value>                HID path to the ledger\n  --mainnetBeta                       WARNING: use mainnet-beta solana cluster\n  --maxPriorityFeeMultiplier=<value>\n  --metadata=<value>                  metadata of the aggregator\n  --minJobs=<value>                   [default: 1] number of jobs that must respond before an oracle responds\n  --minOracles=<value>                [default: 1] number of oracles that must respond before a value is accepted\n                                      on-chain\n  --name=<value>                      name of the aggregator\n  --priorityFeeBump=<value>\n  --priorityFeeBumpPeriod=<value>\n  --programId=<value>                 alternative Switchboard program ID to interact with\n  --queueAuthority=<value>            alternative keypair to use for queue authority\n  --slidingWindow                     enable sliding window resolution mode\n  --updateInterval=<value>            (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>         [default: 0] percentage change between a previous accepted result and the next\n                                      round before an oracle reports a value on-chain. Used to conserve lease cost\n                                      during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator account\n")))}p.isMDXComponent=!0},46159:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var t=n(83117),o=(n(67294),n(3905));const r={title:"Remove Job"},l=void 0,i={unversionedId:"cli/solana/aggregator/remove_job",id:"cli/solana/aggregator/remove_job",title:"Remove Job",description:"remove a switchboard job account from an aggregator",source:"@site/docs/cli/solana/aggregator/remove_job.md",sourceDirName:"cli/solana/aggregator",slug:"/cli/solana/aggregator/remove_job",permalink:"/cli/solana/aggregator/remove_job",draft:!1,tags:[],version:"current",frontMatter:{title:"Remove Job"},sidebar:"cli",previous:{title:"Permission Create",permalink:"/cli/solana/aggregator/permission_create"},next:{title:"Set",permalink:"/cli/solana/aggregator/set"}},s={},u=[],c={toc:u};function p(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"remove a switchboard job account from an aggregator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana aggregator remove job [AGGREGATORKEY] [JOBKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  JOBKEY         public key of an existing job account to remove from an aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  remove a switchboard job account from an aggregator\n")))}p.isMDXComponent=!0},25222:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var t=n(83117),o=(n(67294),n(3905));const r={title:"Create"},l=void 0,i={unversionedId:"cli/solana/oracle/create",id:"cli/solana/oracle/create",title:"Create",description:"create a new oracle account for a given queue",source:"@site/docs/cli/solana/oracle/create.md",sourceDirName:"cli/solana/oracle",slug:"/cli/solana/oracle/create",permalink:"/cli/solana/oracle/create",draft:!1,tags:[],version:"current",frontMatter:{title:"Create"},sidebar:"cli",previous:{title:"Start",permalink:"/cli/solana/network/start"},next:{title:"Print",permalink:"/cli/solana/oracle/print"}},s={},u=[],c={toc:u};function p(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"create a new oracle account for a given queue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana oracle create [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--json] [-n <value>] [-a <value>] [--enable] [--queueAuthority <value>] [--stakeAmount <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create an oracle for\n\nFLAGS\n  -a, --authority=<value>   keypair to delegate authority to for managing the oracle account\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -n, --name=<value>        name of the oracle for easier identification\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --cluster=<option>        the solana cluster to connect to\n                            <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enable                  enable oracle heartbeat permissions\n  --ledger                  enable ledger support\n  --ledgerPath=<value>      HID path to the ledger\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n  --stakeAmount=<value>     token amount to load into the oracle's staking wallet.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle account for a given queue\n\nEXAMPLES\n  $ sbv2 solana:oracle:create F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --name oracle-1 --stakeAmount 1\n")))}p.isMDXComponent=!0},27414:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var t=n(83117),o=(n(67294),n(3905));const r={title:"Index"},l=void 0,i={unversionedId:"cli/solana/print/index",id:"cli/solana/print/index",title:"Index",description:"print a Switchboard account",source:"@site/docs/cli/solana/print/index.md",sourceDirName:"cli/solana/print",slug:"/cli/solana/print/",permalink:"/cli/solana/print/",draft:!1,tags:[],version:"current",frontMatter:{title:"Index"},sidebar:"cli",previous:{title:"Revoke",permalink:"/cli/solana/permission/revoke"},next:{title:"Create",permalink:"/cli/solana/queue/create"}},s={},u=[],c={toc:u};function p(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"print a Switchboard account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana print [PUBKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  PUBKEY  publicKey of the Switchboard account to search for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a Switchboard account\n")))}p.isMDXComponent=!0},29435:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var t=n(83117),o=(n(67294),n(3905));const r={title:"Create"},l=void 0,i={unversionedId:"cli/solana/queue/create",id:"cli/solana/queue/create",title:"Create",description:"create an oracle queue",source:"@site/docs/cli/solana/queue/create.md",sourceDirName:"cli/solana/queue",slug:"/cli/solana/queue/create",permalink:"/cli/solana/queue/create",draft:!1,tags:[],version:"current",frontMatter:{title:"Create"},sidebar:"cli",previous:{title:"Index",permalink:"/cli/solana/print/"},next:{title:"Print",permalink:"/cli/solana/queue/print"}},s={},u=[],c={toc:u};function p(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"create an oracle queue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana queue create [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n    [--json] [-a <value>] [--queueKeypair <value>] [--dataBufferKeypair <value>] [--size <value>] [--name <value>]\n    [--metadata <value>] [--reward <value>] [--minStake <value>] [--oracleTimeout <value>] [--slashingEnabled]\n    [--permissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [--feedProbationPeriod <value>]\n    [--consecutiveFeedFailureLimit <value>] [--consecutiveOracleFailureLimit <value>]\n\nFLAGS\n  -a, --authority=<value>                  alternate keypair that is the authority for the queue and is required to\n                                           approve permissions\n  -h, --help                               Show CLI help.\n  -k, --keypair=<value>                    keypair that will pay for onchain transactions. defaults to new account\n                                           authority if no alternate authority provided\n  -s, --silent                             suppress cli prompts\n  -u, --rpcUrl=<value>                     alternate RPC url\n  -v, --verbose                            log everything\n  --cluster=<option>                       the solana cluster to connect to\n                                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                    [default: confirmed] transaction commitment level to use\n                                           <options: confirmed|finalized|processed>\n  --consecutiveFeedFailureLimit=<value>    [default: 1000] consecutive failure limit for a feed before feed permission\n                                           is revoked.\n  --consecutiveOracleFailureLimit=<value>  [default: 1000] consecutive failure limit for an oracle before oracle\n                                           permission is revoked.\n  --dataBufferKeypair=<value>              keypair to use for the oracle queue data buffer account.\n  --enableBufferRelayers                   enabling this setting will allow buffer relayer accounts to call openRound.\n  --feedProbationPeriod=<value>            [default: 1000] After a feed lease is funded or re-funded, it must\n                                           consecutively succeed N amount of times or its authorization to use the queue\n                                           is auto-revoked.\n  --ledger                                 enable ledger support\n  --ledgerPath=<value>                     HID path to the ledger\n  --mainnetBeta                            WARNING: use mainnet-beta solana cluster\n  --metadata=<value>                       metadata of the aggregator\n  --minStake=<value>                       [default: 0] the reward payed out to oracles for responding to an update\n                                           request on-chain, Ex: 2 requires oracles to have 2 wSOL in their staking\n                                           wallet before heartbeating\n  --name=<value>                           name of the aggregator\n  --oracleTimeout=<value>                  [default: 180] time period (in seconds) we should remove an oracle after if\n                                           no response\n  --permissionedFeeds                      enabling this setting means data feeds need explicit permission to join the\n                                           queue.\n  --programId=<value>                      alternative Switchboard program ID to interact with\n  --queueKeypair=<value>                   keypair to use for the oracle queue account. This will be the account's\n                                           publicKey\n  --reward=<value>                         [default: 0] the reward payed out to oracles for responding to an update\n                                           request on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4\n                                           would deduct (4 * 0.0000075) wSOL from an aggregators lease each round.\n  --size=<value>                           [default: 100] set the size of the queue\n  --slashingEnabled                        whether slashing is enabled on this queue.\n  --unpermissionedVrf                      enabling this setting means data feeds do not need explicit permission to\n                                           request VRF proofs and verifications from this queue.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an oracle queue\n")))}p.isMDXComponent=!0},86939:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>u,metadata:()=>p,toc:()=>m});var t=n(83117),o=(n(67294),n(3905)),r=n(65488),l=n(85162);n(27414),n(29435),n(25222),n(98828),n(34445),n(46159);const i={toc:[{value:"<code>sbv2 solana aggregator add history AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-add-history-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator add job AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-add-job-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator create QUEUEKEY</code>",id:"sbv2-solana-aggregator-create-queuekey",level:2},{value:"<code>sbv2 solana aggregator create json [DEFINITIONFILE]</code>",id:"sbv2-solana-aggregator-create-json-definitionfile",level:2},{value:"<code>sbv2 solana aggregator deposit AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-deposit-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator events AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-events-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator extend AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-extend-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator fund AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-fund-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator history AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-history-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator lock AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-lock-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator metrics AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-metrics-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator open-round [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-open-round-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator permission create AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-permission-create-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator print AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-print-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator remove job AGGREGATORKEY JOBKEY</code>",id:"sbv2-solana-aggregator-remove-job-aggregatorkey-jobkey",level:2},{value:"<code>sbv2 solana aggregator set AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-set-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator transfer [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-transfer-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator update [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-update-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator watch AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-watch-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator withdraw AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-withdraw-aggregatorkey",level:2},{value:"<code>sbv2 solana anchor test</code>",id:"sbv2-solana-anchor-test",level:2},{value:"<code>sbv2 solana buffer create [QUEUEKEY]</code>",id:"sbv2-solana-buffer-create-queuekey",level:2},{value:"<code>sbv2 solana buffer open-round [BUFFERRELAYERKEY]</code>",id:"sbv2-solana-buffer-open-round-bufferrelayerkey",level:2},{value:"<code>sbv2 solana buffer update [BUFFERRELAYERKEY]</code>",id:"sbv2-solana-buffer-update-bufferrelayerkey",level:2},{value:"<code>sbv2 solana crank create QUEUEKEY</code>",id:"sbv2-solana-crank-create-queuekey",level:2},{value:"<code>sbv2 solana crank pop CRANKKEY</code>",id:"sbv2-solana-crank-pop-crankkey",level:2},{value:"<code>sbv2 solana crank print CRANKKEY</code>",id:"sbv2-solana-crank-print-crankkey",level:2},{value:"<code>sbv2 solana job create</code>",id:"sbv2-solana-job-create",level:2},{value:"<code>sbv2 solana json create aggregator [DEFINITIONFILE]</code>",id:"sbv2-solana-json-create-aggregator-definitionfile",level:2},{value:"<code>sbv2 solana lease create [AGGREGATORKEY]</code>",id:"sbv2-solana-lease-create-aggregatorkey",level:2},{value:"<code>sbv2 solana lease extend AGGREGATORKEY</code>",id:"sbv2-solana-lease-extend-aggregatorkey",level:2},{value:"<code>sbv2 solana lease print LEASEKEY</code>",id:"sbv2-solana-lease-print-leasekey",level:2},{value:"<code>sbv2 solana lease withdraw AGGREGATORKEY</code>",id:"sbv2-solana-lease-withdraw-aggregatorkey",level:2},{value:"<code>sbv2 solana localnet env</code>",id:"sbv2-solana-localnet-env",level:2},{value:"<code>sbv2 solana localnet up</code>",id:"sbv2-solana-localnet-up",level:2},{value:"<code>sbv2 solana network create</code>",id:"sbv2-solana-network-create",level:2},{value:"<code>sbv2 solana network save</code>",id:"sbv2-solana-network-save",level:2},{value:"<code>sbv2 solana network start</code>",id:"sbv2-solana-network-start",level:2},{value:"<code>sbv2 solana oracle create QUEUEKEY</code>",id:"sbv2-solana-oracle-create-queuekey",level:2},{value:"<code>sbv2 solana oracle print ORACLEKEY</code>",id:"sbv2-solana-oracle-print-oraclekey",level:2},{value:"<code>sbv2 solana oracle up</code>",id:"sbv2-solana-oracle-up",level:2},{value:"<code>sbv2 solana oracle withdraw ORACLEKEY</code>",id:"sbv2-solana-oracle-withdraw-oraclekey",level:2},{value:"<code>sbv2 solana permission create</code>",id:"sbv2-solana-permission-create",level:2},{value:"<code>sbv2 solana permission grant PERMISSIONKEY</code>",id:"sbv2-solana-permission-grant-permissionkey",level:2},{value:"<code>sbv2 solana permission print PERMISSIONKEY</code>",id:"sbv2-solana-permission-print-permissionkey",level:2},{value:"<code>sbv2 solana permission revoke PERMISSIONKEY</code>",id:"sbv2-solana-permission-revoke-permissionkey",level:2},{value:"<code>sbv2 solana print PUBKEY</code>",id:"sbv2-solana-print-pubkey",level:2},{value:"<code>sbv2 solana queue create</code>",id:"sbv2-solana-queue-create",level:2},{value:"<code>sbv2 solana queue print QUEUEKEY</code>",id:"sbv2-solana-queue-print-queuekey",level:2},{value:"<code>sbv2 solana queue set QUEUEKEY</code>",id:"sbv2-solana-queue-set-queuekey",level:2},{value:"<code>sbv2 solana vrf open-round [VRFKEY]</code>",id:"sbv2-solana-vrf-open-round-vrfkey",level:2},{value:"<code>sbv2 solana vrf print VRFKEY</code>",id:"sbv2-solana-vrf-print-vrfkey",level:2},{value:"<code>sbv2 solana vrf request [VRFKEY]</code>",id:"sbv2-solana-vrf-request-vrfkey",level:2},{value:"<code>sbv2 solana vrf update [VRFKEY]</code>",id:"sbv2-solana-vrf-update-vrfkey",level:2}]};function s(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},i,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"interact with switchboard on Solana"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-add-history-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator add history AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-add-job-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator add job AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-create-queuekey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator create QUEUEKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-create-json-definitionfile"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator create json [DEFINITIONFILE]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-deposit-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator deposit AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-events-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator events AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-extend-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator extend AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-fund-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator fund AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-history-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator history AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-lock-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator lock AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-metrics-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator metrics AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-open-round-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator open-round [AGGREGATORKEY]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-permission-create-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator permission create AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-print-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator print AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-remove-job-aggregatorkey-jobkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator remove job AGGREGATORKEY JOBKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-transfer-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator transfer [AGGREGATORKEY]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-update-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator update [AGGREGATORKEY]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-watch-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator watch AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-withdraw-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator withdraw AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-anchor-test"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana anchor test"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-buffer-create-queuekey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana buffer create [QUEUEKEY]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-buffer-open-round-bufferrelayerkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana buffer open-round [BUFFERRELAYERKEY]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-buffer-update-bufferrelayerkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana buffer update [BUFFERRELAYERKEY]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-create-queuekey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank create QUEUEKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-pop-crankkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank pop CRANKKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-print-crankkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank print CRANKKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-job-create"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana job create"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-json-create-aggregator-definitionfile"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana json create aggregator [DEFINITIONFILE]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-create-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease create [AGGREGATORKEY]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-extend-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease extend AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-print-leasekey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease print LEASEKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-withdraw-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease withdraw AGGREGATORKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-localnet-env"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana localnet env"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-localnet-up"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana localnet up"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-network-create"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana network create"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-network-save"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana network save"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-network-start"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana network start"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-create-queuekey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle create QUEUEKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-print-oraclekey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle print ORACLEKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-up"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle up"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-withdraw-oraclekey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle withdraw ORACLEKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-create"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission create"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-grant-permissionkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission grant PERMISSIONKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-print-permissionkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission print PERMISSIONKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-revoke-permissionkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission revoke PERMISSIONKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-print-pubkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana print PUBKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-queue-create"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana queue create"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-queue-print-queuekey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana queue print QUEUEKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-queue-set-queuekey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana queue set QUEUEKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-open-round-vrfkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf open-round [VRFKEY]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-print-vrfkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf print VRFKEY"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-request-vrfkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf request [VRFKEY]"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-update-vrfkey"},(0,o.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf update [VRFKEY]")))),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-add-history-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator add history AGGREGATORKEY")),(0,o.kt)("p",null,"add a history buffer to an aggregator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator add history [AGGREGATORKEY] --historyLimit <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--force] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --force                  overwrite an existing history buffer if one already exists\n  --historyLimit=<value>   (required) the number of samples to store before overwriting old samples\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  add a history buffer to an aggregator\n\nEXAMPLES\n  $ sbv2 solana:aggregator:add:history\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-add-job-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator add job AGGREGATORKEY")),(0,o.kt)("p",null,"add jobs to an aggregator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator add job [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--jobDefinition <value>] [--jobKey\n    <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>     alternate keypair that is the authority for the aggregator\n  -h, --help                  Show CLI help.\n  -k, --keypair=<value>       keypair that will pay for onchain transactions. defaults to new account authority if no\n                              alternate authority provided\n  -s, --silent                suppress cli prompts\n  -u, --rpcUrl=<value>        alternate RPC url\n  -v, --verbose               log everything\n  --cluster=<option>          the solana cluster to connect to\n                              <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>       [default: confirmed] transaction commitment level to use\n                              <options: confirmed|finalized|processed>\n  --jobDefinition=<value>...  filesystem path of job json definition file\n  --jobKey=<value>...         public key of an existing job account to add to an aggregator\n  --ledger                    enable ledger support\n  --ledgerPath=<value>        HID path to the ledger\n  --mainnetBeta               WARNING: use mainnet-beta solana cluster\n  --programId=<value>         alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  add jobs to an aggregator\n\nEXAMPLES\n  $ sbv2 solana aggregator add job\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-create-queuekey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator create QUEUEKEY")),(0,o.kt)("p",null,"create an aggregator account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator create [QUEUEKEY] --updateInterval <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--aggregatorKeypair <value>] [--name <value>] [--metadata <value>] [--batchSize <value>] [--minJobs <value>]\n    [--minOracles <value>] [--forceReportPeriod <value>] [--varianceThreshold <value>] [--historyLimit <value>]\n    [--crankKey <value> | --disableCrank] [--queueAuthority <value>] [--enable] [--leaseAmount <value>] [-j <value>]\n    [--jobKey <value>] [--slidingWindow] [--basePriorityFee <value>] [--priorityFeeBump <value>]\n    [--priorityFeeBumpPeriod <value>] [--maxPriorityFeeMultiplier <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create an aggregator on\n\nFLAGS\n  -a, --authority=<value>             alternate keypair that is the authority for the aggregator\n  -h, --help                          Show CLI help.\n  -j, --job=<value>...                filesystem path to job definition file\n  -k, --keypair=<value>               keypair that will pay for onchain transactions. defaults to new account authority\n                                      if no alternate authority provided\n  -s, --silent                        suppress cli prompts\n  -u, --rpcUrl=<value>                alternate RPC url\n  -v, --verbose                       log everything\n  --aggregatorKeypair=<value>         keypair to use for aggregator account. This will be the account's publicKey\n  --basePriorityFee=<value>\n  --batchSize=<value>                 [default: 1] number of oracles requested for each open round call\n  --cluster=<option>                  the solana cluster to connect to\n                                      <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>               [default: confirmed] transaction commitment level to use\n                                      <options: confirmed|finalized|processed>\n  --crankKey=<value>                  public key of the crank to join\n  --disableCrank                      whether the newly created feed can be pushed onto a crank. irreversible\n  --enable                            set permissions to PERMIT_ORACLE_QUEUE_USAGE\n  --forceReportPeriod=<value>         Number of seconds for which, even if the variance threshold is not passed, accept\n                                      new responses from oracles.\n  --historyLimit=<value>              number of historical samples to store\n  --jobKey=<value>...                 public key of existing job account\n  --leaseAmount=<value>               [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5\n                                      wSOL\n  --ledger                            enable ledger support\n  --ledgerPath=<value>                HID path to the ledger\n  --mainnetBeta                       WARNING: use mainnet-beta solana cluster\n  --maxPriorityFeeMultiplier=<value>\n  --metadata=<value>                  metadata of the aggregator\n  --minJobs=<value>                   [default: 1] number of jobs that must respond before an oracle responds\n  --minOracles=<value>                [default: 1] number of oracles that must respond before a value is accepted\n                                      on-chain\n  --name=<value>                      name of the aggregator\n  --priorityFeeBump=<value>\n  --priorityFeeBumpPeriod=<value>\n  --programId=<value>                 alternative Switchboard program ID to interact with\n  --queueAuthority=<value>            alternative keypair to use for queue authority\n  --slidingWindow                     enable sliding window resolution mode\n  --updateInterval=<value>            (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>         [default: 0] percentage change between a previous accepted result and the next\n                                      round before an oracle reports a value on-chain. Used to conserve lease cost\n                                      during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator account\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-create-json-definitionfile"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator create json [DEFINITIONFILE]")),(0,o.kt)("p",null,"create an aggregator from a json file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator create json [DEFINITIONFILE] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-q <value>] [-a <value>]\n    [--leaseAmount <value>]\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of queue definition json file\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -q, --queueKey=<value>   public key of the oracle queue to create aggregator for\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --leaseAmount=<value>    [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5 wSOL\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator from a json file\n\nALIASES\n  $ sbv2 solana json create aggregator\n\nEXAMPLES\n  $ sbv2 solana aggregator create json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-deposit-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator deposit AGGREGATORKEY")),(0,o.kt)("p",null,"fund and re-enable an aggregator lease"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator deposit [AGGREGATORKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) amount to deposit into the lease escrow\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator fund\n  $ sbv2 solana aggregator deposit\n  $ sbv2 solana aggregator extend\n\nEXAMPLES\n  $ sbv2 solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-events-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator events AGGREGATORKEY")),(0,o.kt)("p",null,"watch an aggregator account and stream the on-chain events"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator events [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-t <value>] [-f <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -f, --outfile=<value>  save results to a file\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -t, --timeout=<value>  time to watch feed for updates\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch an aggregator account and stream the on-chain events\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-extend-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator extend AGGREGATORKEY")),(0,o.kt)("p",null,"fund and re-enable an aggregator lease"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator extend [AGGREGATORKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) amount to deposit into the lease escrow\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator fund\n  $ sbv2 solana aggregator deposit\n  $ sbv2 solana aggregator extend\n\nEXAMPLES\n  $ sbv2 solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-fund-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator fund AGGREGATORKEY")),(0,o.kt)("p",null,"fund and re-enable an aggregator lease"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator fund [AGGREGATORKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) amount to deposit into the lease escrow\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator fund\n  $ sbv2 solana aggregator deposit\n  $ sbv2 solana aggregator extend\n\nEXAMPLES\n  $ sbv2 solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-history-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator history AGGREGATORKEY")),(0,o.kt)("p",null,"print an aggregator's history'"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator history [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json] [--metrics]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --metrics              print metrics on an aggregators history like average update interval\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aggregator's history'\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-lock-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator lock AGGREGATORKEY")),(0,o.kt)("p",null,"lock an aggregator's configuration and prevent further changes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator lock [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  lock an aggregator's configuration and prevent further changes\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-metrics-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator metrics AGGREGATORKEY")),(0,o.kt)("p",null,"print an aggregator's metrics'"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator metrics [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json] [--period <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --period=<value>       the period to collect metrics for. Ex. 3600 will collect update metrics for the last 1hr\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aggregator's metrics'\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-open-round-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator open-round [AGGREGATORKEY]")),(0,o.kt)("p",null,"request a new aggregator result from a set of oracles"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator open-round [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to request an update for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new aggregator result from a set of oracles\n\nALIASES\n  $ sbv2 solana aggregator open-round\n\nEXAMPLES\n  $ sbv2 solana aggregator update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-permission-create-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator permission create AGGREGATORKEY")),(0,o.kt)("p",null,"create a permission account for an aggregator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator permission create [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a permission account for an aggregator\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-print-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator print AGGREGATORKEY")),(0,o.kt)("p",null,"print an aggregator and it's associated accounts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator print [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aggregator and it's associated accounts\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-remove-job-aggregatorkey-jobkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator remove job AGGREGATORKEY JOBKEY")),(0,o.kt)("p",null,"remove a switchboard job account from an aggregator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator remove job [AGGREGATORKEY] [JOBKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  JOBKEY         public key of an existing job account to remove from an aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  remove a switchboard job account from an aggregator\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-set-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set AGGREGATORKEY")),(0,o.kt)("p",null,"set an aggregators config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--name <value>]\n    [--metadata <value>] [--batchSize <value>] [--minJobs <value>] [--minOracles <value>] [--updateInterval <value>]\n    [--varianceThreshold <value>] [--forceReportPeriod <value>] [--basePriorityFee <value>] [--priorityFeeBump <value>]\n    [--priorityFeeBumpPeriod <value>] [--maxPriorityFeeMultiplier <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>             alternate keypair that is the authority for the aggregator and required to make\n                                      config changes\n  -h, --help                          Show CLI help.\n  -k, --keypair=<value>               keypair that will pay for onchain transactions. defaults to new account authority\n                                      if no alternate authority provided\n  -s, --silent                        suppress cli prompts\n  -u, --rpcUrl=<value>                alternate RPC url\n  -v, --verbose                       log everything\n  --basePriorityFee=<value>\n  --batchSize=<value>                 number of oracles requested for each open round call\n  --cluster=<option>                  the solana cluster to connect to\n                                      <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>               [default: confirmed] transaction commitment level to use\n                                      <options: confirmed|finalized|processed>\n  --forceReportPeriod=<value>         Number of seconds for which, even if the variance threshold is not passed, accept\n                                      new responses from oracles.\n  --ledger                            enable ledger support\n  --ledgerPath=<value>                HID path to the ledger\n  --mainnetBeta                       WARNING: use mainnet-beta solana cluster\n  --maxPriorityFeeMultiplier=<value>\n  --metadata=<value>                  metadata of the aggregator\n  --minJobs=<value>                   number of jobs that must respond before an oracle responds\n  --minOracles=<value>                number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                      name of the aggregator\n  --priorityFeeBump=<value>\n  --priorityFeeBumpPeriod=<value>\n  --programId=<value>                 alternative Switchboard program ID to interact with\n  --updateInterval=<value>            set an aggregator's minimum update delay\n  --varianceThreshold=<value>         percentage change between a previous accepted result and the next round before an\n                                      oracle reports a value on-chain. Used to conserve lease cost during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set an aggregators config\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-transfer-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator transfer [AGGREGATORKEY]")),(0,o.kt)("p",null,"transfer an aggregator to a new queue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator transfer [AGGREGATORKEY] --newQueue <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>] [--newCrank <value>]\n    [--loadAmount <value>] [--enable] [--queueAuthority <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to transfer\n\nFLAGS\n  -a, --authority=<value>   alternate keypair that is the authority for the aggregator\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --cluster=<option>        the solana cluster to connect to\n                            <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enable                  enable permissions on the new queue\n  --ledger                  enable ledger support\n  --ledgerPath=<value>      HID path to the ledger\n  --loadAmount=<value>      amount of funds to load into the new lease\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --newCrank=<value>        publicKey of the crank to transfer to\n  --newQueue=<value>        (required) publicKey of the new queue to transfer to\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternate keypair that is the authority for the queue\n\nDESCRIPTION\n  transfer an aggregator to a new queue\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-update-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator update [AGGREGATORKEY]")),(0,o.kt)("p",null,"request a new aggregator result from a set of oracles"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator update [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to request an update for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new aggregator result from a set of oracles\n\nALIASES\n  $ sbv2 solana aggregator open-round\n\nEXAMPLES\n  $ sbv2 solana aggregator update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-watch-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator watch AGGREGATORKEY")),(0,o.kt)("p",null,"watch an aggregator account and stream the results"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator watch [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-t <value>] [-f <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -f, --outfile=<value>  save results to a file\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -t, --timeout=<value>  time to watch feed for updates\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch an aggregator account and stream the results\n")),(0,o.kt)("h2",{id:"sbv2-solana-aggregator-withdraw-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator withdraw AGGREGATORKEY")),(0,o.kt)("p",null,"withdraw funds from an aggregator lease"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator withdraw [AGGREGATORKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -a, --authority=<value>  keypair delegated as the authority for managing the lease account\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --amount=<value>         (required) token amount to withdraw from lease account\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  withdraw funds from an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator withdraw\n\nEXAMPLES\n  $ sbv2 solana:aggregator:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-anchor-test"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana anchor test")),(0,o.kt)("p",null,"run anchor test and a switchboard oracle in parallel"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana anchor test -k <value> [-h] [-v] [-s] [--mainnetBeta | --cluster localnet|devnet] [-u <value>]\n    [--programId <value>] [-d <value>] [--oracleKey <value>] [--nodeImage <value>] [--arm] [-t <value>] [--oracleDelay\n    <value>] [--delay <value>]\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -k, --keypair=<value>         (required) keypair that will pay for onchain transactions. defaults to new account\n                                authority if no alternate authority provided\n  -s, --silent                  suppress docker logging\n  -t, --timeout=<value>         [default: 120] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --arm                         apple silicon needs to use a docker image for linux/arm64\n  --cluster=<option>            [default: localnet] cluster\n                                <options: localnet|devnet>\n  --delay=<value>               [default: 30000] the number of milliseconds after starting the Switchboard oracle to\n                                start running the Anchor test suite\n  --mainnetBeta                 WARNING: use mainnet-beta solana cluster\n  --nodeImage=<value>           [default: dev-v2-RC_01_05_23_05_52] public key of the oracle to start-up\n  --oracleDelay=<value>         [default: 5000] the number of milliseconds after starting the validator to start the\n                                Switchboard oracle\n  --oracleKey=<value>           public key of the oracle to start-up\n  --programId=<value>           alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  run anchor test and a switchboard oracle in parallel\n")),(0,o.kt)("h2",{id:"sbv2-solana-buffer-create-queuekey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana buffer create [QUEUEKEY]")),(0,o.kt)("p",null,"create a buffer relayer account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana buffer create [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--json] [--bufferKeypair <value>] [-a <value>] [-n <value>] [--minUpdateDelaySeconds <value>]\n    [--jobDefinition <value> | --jobKey <value>]\n\nARGUMENTS\n  QUEUEKEY  oracle queue to create BufferRelayer account on\n\nFLAGS\n  -a, --authority=<value>          alternate keypair that will be the buffer relayer authority\n  -h, --help                       Show CLI help.\n  -k, --keypair=<value>            keypair that will pay for onchain transactions. defaults to new account authority if\n                                   no alternate authority provided\n  -n, --name=<value>               name of the buffer account\n  -s, --silent                     suppress cli prompts\n  -u, --rpcUrl=<value>             alternate RPC url\n  -v, --verbose                    log everything\n  --bufferKeypair=<value>          keypair to use for the buffer relayer account. This will be the account's publicKey\n  --cluster=<option>               the solana cluster to connect to\n                                   <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>            [default: confirmed] transaction commitment level to use\n                                   <options: confirmed|finalized|processed>\n  --jobDefinition=<value>          filesystem path to job definition\n  --jobKey=<value>                 public key of existing job account\n  --ledger                         enable ledger support\n  --ledgerPath=<value>             HID path to the ledger\n  --mainnetBeta                    WARNING: use mainnet-beta solana cluster\n  --minUpdateDelaySeconds=<value>  [default: 30] minimum number of seconds between update calls\n  --programId=<value>              alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a buffer relayer account\n")),(0,o.kt)("h2",{id:"sbv2-solana-buffer-open-round-bufferrelayerkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana buffer open-round [BUFFERRELAYERKEY]")),(0,o.kt)("p",null,"request a new buffer relayer result"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana buffer open-round [BUFFERRELAYERKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  BUFFERRELAYERKEY  public key of the aggregator account to request an update for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new buffer relayer result\n\nALIASES\n  $ sbv2 solana buffer open-round\n\nEXAMPLES\n  $ sbv2 solana buffer update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-buffer-update-bufferrelayerkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana buffer update [BUFFERRELAYERKEY]")),(0,o.kt)("p",null,"request a new buffer relayer result"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana buffer update [BUFFERRELAYERKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  BUFFERRELAYERKEY  public key of the aggregator account to request an update for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new buffer relayer result\n\nALIASES\n  $ sbv2 solana buffer open-round\n\nEXAMPLES\n  $ sbv2 solana buffer update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-crank-create-queuekey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank create QUEUEKEY")),(0,o.kt)("p",null,"create a new crank account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank create [QUEUEKEY] -s <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>] [--metadata\n    <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create a crank for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -n, --name=<value>     name of the crank for easier identification\n  -s, --silent           suppress cli prompts\n  -s, --size=<value>     (required) maximum number of rows a crank can support\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --metadata=<value>     metadata of the crank for easier identification\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank account\n")),(0,o.kt)("h2",{id:"sbv2-solana-crank-pop-crankkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank pop CRANKKEY")),(0,o.kt)("p",null,"pop the crank"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank pop [CRANKKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger]\n\nARGUMENTS\n  CRANKKEY  public key of the crank\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  pop the crank\n")),(0,o.kt)("h2",{id:"sbv2-solana-crank-print-crankkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank print CRANKKEY")),(0,o.kt)("p",null,"print a crank"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank print [CRANKKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json] [--rows]\n\nARGUMENTS\n  CRANKKEY  public key of the crank account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n  --rows                 print the crank rows in order\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a crank\n")),(0,o.kt)("h2",{id:"sbv2-solana-job-create"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana job create")),(0,o.kt)("p",null,"create a job account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana job create --jobDefinition <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--jobKeypair <value>] [-a\n    <value>] [-n <value>]\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the buffer relayer authority\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -n, --name=<value>       name of the buffer account\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --jobDefinition=<value>  (required) filesystem path to job definition\n  --jobKeypair=<value>     keypair to use for the job account. This will be the account's publicKey\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a job account\n")),(0,o.kt)("h2",{id:"sbv2-solana-json-create-aggregator-definitionfile"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana json create aggregator [DEFINITIONFILE]")),(0,o.kt)("p",null,"create an aggregator from a json file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana json create aggregator [DEFINITIONFILE] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-q <value>] [-a <value>]\n    [--leaseAmount <value>]\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of queue definition json file\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -q, --queueKey=<value>   public key of the oracle queue to create aggregator for\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --leaseAmount=<value>    [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5 wSOL\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator from a json file\n\nALIASES\n  $ sbv2 solana json create aggregator\n\nEXAMPLES\n  $ sbv2 solana aggregator create json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-lease-create-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease create [AGGREGATORKEY]")),(0,o.kt)("p",null,"fund and re-enable an aggregator lease"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease create [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--amount <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       token amount to load into the lease escrow. If decimals provided, amount will be normalized to\n                         raw tokenAmount\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nEXAMPLES\n  $ sbv2 solana lease create GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.5 --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-lease-extend-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease extend AGGREGATORKEY")),(0,o.kt)("p",null,"fund and re-enable an aggregator lease"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease extend [AGGREGATORKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) amount to deposit into the lease escrow\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator fund\n  $ sbv2 solana aggregator deposit\n  $ sbv2 solana aggregator extend\n\nEXAMPLES\n  $ sbv2 solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-lease-print-leasekey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease print LEASEKEY")),(0,o.kt)("p",null,"print a lease account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease print [LEASEKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  LEASEKEY  public key of the lease account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a lease account\n")),(0,o.kt)("h2",{id:"sbv2-solana-lease-withdraw-aggregatorkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease withdraw AGGREGATORKEY")),(0,o.kt)("p",null,"withdraw funds from an aggregator lease"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease withdraw [AGGREGATORKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -a, --authority=<value>  keypair delegated as the authority for managing the lease account\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --amount=<value>         (required) token amount to withdraw from lease account\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  withdraw funds from an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator withdraw\n\nEXAMPLES\n  $ sbv2 solana:aggregator:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,o.kt)("h2",{id:"sbv2-solana-localnet-env"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana localnet env")),(0,o.kt)("p",null,"create a localnet switchboard environment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana localnet env [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n    [--force] [-o <value>]\n\nFLAGS\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -o, --outputDir=<value>  [default: ./.switchboard] output directory for scripts\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --force                  overwrite output file if existing\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a localnet switchboard environment\n")),(0,o.kt)("h2",{id:"sbv2-solana-localnet-up"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana localnet up")),(0,o.kt)("p",null,"start a local solana validator with a switchboard environment and oracle running alongside it"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana localnet up [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n    [--oracleStakingWalletKeypair <value> --queueKeypair <value>] [--nodeImage <value>] [--arm] [-t <value>] [--reward\n    <value>] [--minStake <value>] [--oracleTimeout <value>] [--slashingEnabled] [--permissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers]\n\nFLAGS\n  -h, --help                            Show CLI help.\n  -k, --keypair=<value>                 keypair that will pay for onchain transactions. defaults to new account\n                                        authority if no alternate authority provided\n  -s, --silent                          suppress docker logging\n  -t, --timeout=<value>                 [default: 120] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>                  alternate RPC url\n  -v, --verbose                         log everything\n  --arm                                 apple silicon needs to use a docker image for linux/arm64\n  --cluster=<option>                    the solana cluster to connect to\n                                        <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                 [default: confirmed] transaction commitment level to use\n                                        <options: confirmed|finalized|processed>\n  --enableBufferRelayers                enabling this setting will allow buffer relayer accounts to call openRound.\n  --ledger                              enable ledger support\n  --ledgerPath=<value>                  HID path to the ledger\n  --mainnetBeta                         WARNING: use mainnet-beta solana cluster\n  --minStake=<value>                    [default: 0] the reward payed out to oracles for responding to an update request\n                                        on-chain, Ex: 2 requires oracles to have 2 wSOL in their staking wallet before\n                                        heartbeating\n  --nodeImage=<value>                   [default: dev-v2-RC_01_05_23_05_52] public key of the oracle to start-up\n  --oracleStakingWalletKeypair=<value>  keypair to use for the oracle staking wallet. Using a static staking wallet with\n                                        the same queue will produce the same oracle pubkey each time.\n  --oracleTimeout=<value>               [default: 180] time period (in seconds) we should remove an oracle after if no\n                                        response\n  --permissionedFeeds                   enabling this setting means data feeds need explicit permission to join the\n                                        queue.\n  --programId=<value>                   alternative Switchboard program ID to interact with\n  --queueKeypair=<value>                keypair to use for the oracle queue account. This will be the account's\n                                        publicKey\n  --reward=<value>                      [default: 0] the reward payed out to oracles for responding to an update request\n                                        on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4 would\n                                        deduct (4 * 0.0000075) wSOL from an aggregators lease each round.\n  --slashingEnabled                     whether slashing is enabled on this queue.\n  --unpermissionedVrf                   enabling this setting means data feeds do not need explicit permission to\n                                        request VRF proofs and verifications from this queue.\n\nDESCRIPTION\n  start a local solana validator with a switchboard environment and oracle running alongside it\n")),(0,o.kt)("h2",{id:"sbv2-solana-network-create"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana network create")),(0,o.kt)("p",null,"create an oracle queue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana network create --configFile <value> --schemaFile <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--force]\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --configFile=<value>   (required)\n  --force\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n  --schemaFile=<value>   (required)\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an oracle queue\n")),(0,o.kt)("h2",{id:"sbv2-solana-network-save"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana network save")),(0,o.kt)("p",null,"save an existing switchboard network"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana network save --queueKey <value> --outputFile <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json] [--force]\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --force\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --outputFile=<value>   (required) outputFile to save accounts in JSON format\n  --programId=<value>    alternative Switchboard program ID to interact with\n  --queueKey=<value>     (required) queue account to load\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  save an existing switchboard network\n")),(0,o.kt)("h2",{id:"sbv2-solana-network-start"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana network start")),(0,o.kt)("p",null,"start a switchboard network from a JSON file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana network start [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n    [--json] [--configFile <value>] [--schemaFile <value>] [--nodeImage <value>] [--arm] [-t <value>]\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress docker logging\n  -t, --timeout=<value>  [default: 300] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --arm                  apple silicon needs to use a docker image for linux/arm64\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --configFile=<value>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --nodeImage=<value>    [default: dev-v2-RC_01_05_23_05_52] public key of the oracle to start-up\n  --programId=<value>    alternative Switchboard program ID to interact with\n  --schemaFile=<value>\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  start a switchboard network from a JSON file\n")),(0,o.kt)("h2",{id:"sbv2-solana-oracle-create-queuekey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle create QUEUEKEY")),(0,o.kt)("p",null,"create a new oracle account for a given queue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle create [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--json] [-n <value>] [-a <value>] [--enable] [--queueAuthority <value>] [--stakeAmount <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create an oracle for\n\nFLAGS\n  -a, --authority=<value>   keypair to delegate authority to for managing the oracle account\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -n, --name=<value>        name of the oracle for easier identification\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --cluster=<option>        the solana cluster to connect to\n                            <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enable                  enable oracle heartbeat permissions\n  --ledger                  enable ledger support\n  --ledgerPath=<value>      HID path to the ledger\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n  --stakeAmount=<value>     token amount to load into the oracle's staking wallet.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle account for a given queue\n\nEXAMPLES\n  $ sbv2 solana:oracle:create F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --name oracle-1 --stakeAmount 1\n")),(0,o.kt)("h2",{id:"sbv2-solana-oracle-print-oraclekey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle print ORACLEKEY")),(0,o.kt)("p",null,"print an oracle account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle print [ORACLEKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an oracle account\n")),(0,o.kt)("h2",{id:"sbv2-solana-oracle-up"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle up")),(0,o.kt)("p",null,"start a solana docker oracle"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle up --oracleKey <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--nodeImage <value>] [--arm] [-t\n    <value>]\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress docker logging\n  -t, --timeout=<value>  [default: 120] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --arm                  apple silicon needs to use a docker image for linux/arm64\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --nodeImage=<value>    [default: dev-v2-RC_01_05_23_05_52] public key of the oracle to start-up\n  --oracleKey=<value>    (required) public key of the oracle to start-up\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  start a solana docker oracle\n")),(0,o.kt)("h2",{id:"sbv2-solana-oracle-withdraw-oraclekey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle withdraw ORACLEKEY")),(0,o.kt)("p",null,"withdraw from an oracle's staking wallet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle withdraw [ORACLEKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle\n\nFLAGS\n  -a, --authority=<value>  alternate keypair for the oracle authority\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --amount=<value>         (required) amount to withdraw\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  withdraw from an oracle's staking wallet\n")),(0,o.kt)("h2",{id:"sbv2-solana-permission-create"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission create")),(0,o.kt)("p",null,"create a permission account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission create --granter <value> --grantee <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--enable] [-a <value>]\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the granter\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --enable                 whether to enable permissions on the resource. --keypair or --authority must be provided\n  --grantee=<value>        (required) publicKey of the resource that is being granted permissions. This is typically an\n                           AggregatorAccount, BufferRelayerAccount, OracleAccount, or VrfAccount.\n  --granter=<value>        (required) publicKey of the resource that is granting permissions. This is typically the\n                           QueueAccount.\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account\n")),(0,o.kt)("h2",{id:"sbv2-solana-permission-grant-permissionkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission grant PERMISSIONKEY")),(0,o.kt)("p",null,"enable a resources permissions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission grant [PERMISSIONKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the permission account\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  enable a resources permissions\n")),(0,o.kt)("h2",{id:"sbv2-solana-permission-print-permissionkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission print PERMISSIONKEY")),(0,o.kt)("p",null,"print a permission account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission print [PERMISSIONKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a permission account\n")),(0,o.kt)("h2",{id:"sbv2-solana-permission-revoke-permissionkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission revoke PERMISSIONKEY")),(0,o.kt)("p",null,"disable a resources permissions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission revoke [PERMISSIONKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the permission account\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  disable a resources permissions\n")),(0,o.kt)("h2",{id:"sbv2-solana-print-pubkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print PUBKEY")),(0,o.kt)("p",null,"print a Switchboard account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print [PUBKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  PUBKEY  publicKey of the Switchboard account to search for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a Switchboard account\n")),(0,o.kt)("h2",{id:"sbv2-solana-queue-create"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana queue create")),(0,o.kt)("p",null,"create an oracle queue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana queue create [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n    [--json] [-a <value>] [--queueKeypair <value>] [--dataBufferKeypair <value>] [--size <value>] [--name <value>]\n    [--metadata <value>] [--reward <value>] [--minStake <value>] [--oracleTimeout <value>] [--slashingEnabled]\n    [--permissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [--feedProbationPeriod <value>]\n    [--consecutiveFeedFailureLimit <value>] [--consecutiveOracleFailureLimit <value>]\n\nFLAGS\n  -a, --authority=<value>                  alternate keypair that is the authority for the queue and is required to\n                                           approve permissions\n  -h, --help                               Show CLI help.\n  -k, --keypair=<value>                    keypair that will pay for onchain transactions. defaults to new account\n                                           authority if no alternate authority provided\n  -s, --silent                             suppress cli prompts\n  -u, --rpcUrl=<value>                     alternate RPC url\n  -v, --verbose                            log everything\n  --cluster=<option>                       the solana cluster to connect to\n                                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                    [default: confirmed] transaction commitment level to use\n                                           <options: confirmed|finalized|processed>\n  --consecutiveFeedFailureLimit=<value>    [default: 1000] consecutive failure limit for a feed before feed permission\n                                           is revoked.\n  --consecutiveOracleFailureLimit=<value>  [default: 1000] consecutive failure limit for an oracle before oracle\n                                           permission is revoked.\n  --dataBufferKeypair=<value>              keypair to use for the oracle queue data buffer account.\n  --enableBufferRelayers                   enabling this setting will allow buffer relayer accounts to call openRound.\n  --feedProbationPeriod=<value>            [default: 1000] After a feed lease is funded or re-funded, it must\n                                           consecutively succeed N amount of times or its authorization to use the queue\n                                           is auto-revoked.\n  --ledger                                 enable ledger support\n  --ledgerPath=<value>                     HID path to the ledger\n  --mainnetBeta                            WARNING: use mainnet-beta solana cluster\n  --metadata=<value>                       metadata of the aggregator\n  --minStake=<value>                       [default: 0] the reward payed out to oracles for responding to an update\n                                           request on-chain, Ex: 2 requires oracles to have 2 wSOL in their staking\n                                           wallet before heartbeating\n  --name=<value>                           name of the aggregator\n  --oracleTimeout=<value>                  [default: 180] time period (in seconds) we should remove an oracle after if\n                                           no response\n  --permissionedFeeds                      enabling this setting means data feeds need explicit permission to join the\n                                           queue.\n  --programId=<value>                      alternative Switchboard program ID to interact with\n  --queueKeypair=<value>                   keypair to use for the oracle queue account. This will be the account's\n                                           publicKey\n  --reward=<value>                         [default: 0] the reward payed out to oracles for responding to an update\n                                           request on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4\n                                           would deduct (4 * 0.0000075) wSOL from an aggregators lease each round.\n  --size=<value>                           [default: 100] set the size of the queue\n  --slashingEnabled                        whether slashing is enabled on this queue.\n  --unpermissionedVrf                      enabling this setting means data feeds do not need explicit permission to\n                                           request VRF proofs and verifications from this queue.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an oracle queue\n")),(0,o.kt)("h2",{id:"sbv2-solana-queue-print-queuekey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana queue print QUEUEKEY")),(0,o.kt)("p",null,"print a queue account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana queue print [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a queue account\n")),(0,o.kt)("h2",{id:"sbv2-solana-queue-set-queuekey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana queue set QUEUEKEY")),(0,o.kt)("p",null,"set an oracle queue's config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana queue set [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--reward <value>] [--minStake <value>]\n    [--oracleTimeout <value>] [--slashingEnabled] [--permissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers]\n    [--consecutiveFeedFailureLimit <value>] [--consecutiveOracleFailureLimit <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the queue account\n\nFLAGS\n  -a, --authority=<value>                  alternate keypair that is the authority for the queue and is required to\n                                           approve permissions\n  -h, --help                               Show CLI help.\n  -k, --keypair=<value>                    keypair that will pay for onchain transactions. defaults to new account\n                                           authority if no alternate authority provided\n  -s, --silent                             suppress cli prompts\n  -u, --rpcUrl=<value>                     alternate RPC url\n  -v, --verbose                            log everything\n  --cluster=<option>                       the solana cluster to connect to\n                                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                    [default: confirmed] transaction commitment level to use\n                                           <options: confirmed|finalized|processed>\n  --consecutiveFeedFailureLimit=<value>    consecutive failure limit for a feed before feed permission is revoked.\n  --consecutiveOracleFailureLimit=<value>  consecutive failure limit for an oracle before oracle permission is revoked.\n  --enableBufferRelayers                   enabling this setting will allow buffer relayer accounts to call openRound.\n  --ledger                                 enable ledger support\n  --ledgerPath=<value>                     HID path to the ledger\n  --mainnetBeta                            WARNING: use mainnet-beta solana cluster\n  --metadata=<value>                       metadata of the aggregator\n  --minStake=<value>                       the reward payed out to oracles for responding to an update request on-chain,\n                                           Ex: 2 requires oracles to have 2 wSOL in their staking wallet before\n                                           heartbeating\n  --name=<value>                           name of the aggregator\n  --oracleTimeout=<value>                  time period (in seconds) we should remove an oracle after if no response\n  --permissionedFeeds                      enabling this setting means data feeds need explicit permission to join the\n                                           queue.\n  --programId=<value>                      alternative Switchboard program ID to interact with\n  --reward=<value>                         the reward payed out to oracles for responding to an update request on-chain,\n                                           Ex: A reward of 0.0000075 with a feed with a batchSize of 4 would deduct (4 *\n                                           0.0000075) wSOL from an aggregators lease each round.\n  --slashingEnabled                        whether slashing is enabled on this queue.\n  --unpermissionedVrf                      enabling this setting means data feeds do not need explicit permission to\n                                           request VRF proofs and verifications from this queue.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set an oracle queue's config\n")),(0,o.kt)("h2",{id:"sbv2-solana-vrf-open-round-vrfkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf open-round [VRFKEY]")),(0,o.kt)("p",null,"request a new vrf result from a set of oracles"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf open-round [VRFKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to request randomness for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --authority=<value>    alternative keypair that is the VRF authority\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new vrf result from a set of oracles\n\nALIASES\n  $ sbv2 solana vrf update\n  $ sbv2 solana vrf open-round\n\nEXAMPLES\n  $ sbv2 solana vrf request\n")),(0,o.kt)("h2",{id:"sbv2-solana-vrf-print-vrfkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf print VRFKEY")),(0,o.kt)("p",null,"print a VRF and it's associated accounts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf print [VRFKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a VRF and it's associated accounts\n")),(0,o.kt)("h2",{id:"sbv2-solana-vrf-request-vrfkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf request [VRFKEY]")),(0,o.kt)("p",null,"request a new vrf result from a set of oracles"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf request [VRFKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to request randomness for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --authority=<value>    alternative keypair that is the VRF authority\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new vrf result from a set of oracles\n\nALIASES\n  $ sbv2 solana vrf update\n  $ sbv2 solana vrf open-round\n\nEXAMPLES\n  $ sbv2 solana vrf request\n")),(0,o.kt)("h2",{id:"sbv2-solana-vrf-update-vrfkey"},(0,o.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf update [VRFKEY]")),(0,o.kt)("p",null,"request a new vrf result from a set of oracles"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf update [VRFKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to request randomness for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --authority=<value>    alternative keypair that is the VRF authority\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new vrf result from a set of oracles\n\nALIASES\n  $ sbv2 solana vrf update\n  $ sbv2 solana vrf open-round\n\nEXAMPLES\n  $ sbv2 solana vrf request\n")))}s.isMDXComponent=!0;const u={sidebar_position:8,title:"Sbv2 CLI"},c="Sbv2 solana",p={unversionedId:"solana/dev/cli",id:"solana/dev/cli",title:"Sbv2 CLI",description:"Install",source:"@site/docs/solana/dev/cli.mdx",sourceDirName:"solana/dev",slug:"/solana/dev/cli",permalink:"/solana/dev/cli",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Sbv2 CLI"},sidebar:"solana",previous:{title:"Localnet Integration",permalink:"/solana/dev/localnet"},next:{title:"Rust",permalink:"/solana/dev/rust"}},d={},m=[{value:"Install",id:"install",level:2},{value:"Config",id:"config",level:2},{value:"Commands",id:"commands",level:2}],v={toc:m};function g(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},v,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sbv2-solana"},"Sbv2 solana"),(0,o.kt)("h2",{id:"install"},"Install"),(0,o.kt)(r.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g @switchboard-xyz/cli^2\n"))),(0,o.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -g @switchboard-xyz/cli^2\n")))),(0,o.kt)("h2",{id:"config"},"Config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Testnet\nsbv2 config set solana devnet rpc https://devnet.genesysgo.net\nsbv2 config set solana devnet default-account "~/.config/solana/id.json"\n\n# Mainnet\nsbv2 config set solana mainnet-beta rpc https://ssc-dao.genesysgo.net/\nsbv2 config set solana mainnet-beta default-account "~/.config/solana/id.json"\n')),(0,o.kt)("h2",{id:"commands"},"Commands"),(0,o.kt)(s,{mdxType:"SolanaCli"}))}g.isMDXComponent=!0}}]);