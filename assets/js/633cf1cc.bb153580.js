"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[761],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>p});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),i=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),g=i(r),p=a,f=g["".concat(l,".").concat(p)]||g[p]||d[p]||o;return r?n.createElement(f,s(s({ref:t},u),{},{components:r})):n.createElement(f,s({ref:t},u))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=g;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var i=2;i<o;i++)s[i]=r[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},17965:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>i});var n=r(83117),a=(r(67294),r(3905));const o={sidebar_position:20},s="Read a Feed",c={unversionedId:"aptos/feeds/read",id:"aptos/feeds/read",title:"Read a Feed",description:"Switchboard allows you to read a data feed using",source:"@site/docs/aptos/feeds/read.mdx",sourceDirName:"aptos/feeds",slug:"/aptos/feeds/read",permalink:"/aptos/feeds/read",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"aptos",previous:{title:"Create a Feed",permalink:"/aptos/feeds/create"},next:{title:"Table of Contents",permalink:"/aptos/idl/"}},l={},i=[{value:"Move",id:"move",level:2}],u={toc:i};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"read-a-feed"},"Read a Feed"),(0,a.kt)("p",null,"Switchboard allows you to read a data feed using"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"read#move"},"Move"))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"move"},"Move"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"module switchboard_feed_parser::switchboard_feed_parser {\n    use std::signer;\n    use switchboard::aggregator; // For reading aggregators\n    use switchboard::math;\n\n    const EAGGREGATOR_INFO_EXISTS:u64 = 0;\n    const ENO_AGGREGATOR_INFO_EXISTS:u64 = 1;\n\n    /*\n      Num \n      {\n        neg: bool,   // sign\n        dec: u8,     // scaling factor\n        value: u128, // value\n      }\n      where decimal = neg * value * 10^(-1 * dec) \n    */\n    struct AggregatorInfo has copy, drop, store, key {\n        aggregator_addr: address,\n        latest_result: u128,\n        latest_result_scaling_factor: u8,\n    }\n\n    // add AggregatorInfo resource with latest value + aggregator address\n    public entry fun log_aggregator_info(\n        account: &signer,\n        aggregator_addr: address, \n    ) {       \n        assert!(!exists<AggregatorInfo>(signer::address_of(account)), EAGGREGATOR_INFO_EXISTS);\n\n        // get latest value \n        let (value, scaling_factor, _neg) = math::unpack(aggregator::latest_value(aggregator_addr)); \n        move_to(account, AggregatorInfo {\n            aggregator_addr: aggregator_addr,\n            latest_result: value,\n            latest_result_scaling_factor: scaling_factor\n        });\n    }\n\n    #[test(account = @0x1)]\n    public entry fun test_aggregator(account: &signer) {\n\n        // creates test aggregator with data\n        aggregator::new_test(account, 100, 0, false);\n\n        // print out value\n        std::debug::print(&aggregator::latest_value(signer::address_of(account)));\n    }\n}\n")))}d.isMDXComponent=!0}}]);