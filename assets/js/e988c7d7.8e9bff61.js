"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5825],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>b});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),b=a,v=d["".concat(l,".").concat(b)]||d[b]||u[b]||o;return r?n.createElement(v,s(s({ref:t},p),{},{components:r})):n.createElement(v,s({ref:t},p))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},40284:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(83117),a=(r(67294),r(3905));const o={sidebar_position:20,title:"@switchboard-xyz/sbv2-lite"},s=void 0,i={unversionedId:"solana/dev/javascript/sbv2-lite",id:"solana/dev/javascript/sbv2-lite",title:"@switchboard-xyz/sbv2-lite",description:"A lightweight library to decode and parse aggregator accounts",source:"@site/docs/solana/dev/javascript/sbv2-lite.mdx",sourceDirName:"solana/dev/javascript",slug:"/solana/dev/javascript/sbv2-lite",permalink:"/sbv2-core/solana/dev/javascript/sbv2-lite",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"@switchboard-xyz/sbv2-lite"},sidebar:"solana",previous:{title:"@switchboard-xyz/solana.js",permalink:"/sbv2-core/solana/dev/javascript/"},next:{title:"switchboardpy",permalink:"/sbv2-core/solana/dev/python/"}},l={},c=[{value:"Install",id:"install",level:2},{value:"Example",id:"example",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A lightweight library to decode and parse aggregator accounts"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@switchboard-xyz/sbv2-lite"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@switchboard-xyz/sbv2-lite",alt:"npm"})),"\xa0","\xa0","\n",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/switchboardxyz"},(0,a.kt)("img",{parentName:"a",src:"https://badgen.net/twitter/follow/switchboardxyz",alt:"twitter"})),"\xa0","\xa0"),(0,a.kt)("h2",{id:"install"},"Install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm i @switchboard-xyz/sbv2-lite\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import SwitchboardProgram from "@switchboard-xyz/sbv2-lite";\n\n//\n\nconst sbv2 = await SwitchboardProgram.loadDevnet();\n\n// SOL_USD Aggregator https://switchboard.xyz/explorer\nconst solAggregator = new anchor.web3.PublicKey(\n  "GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR"\n);\n\nconst accountInfo = await sbv2.program.provider.connection.getAccountInfo(\n  solAggregator\n);\nif (!accountInfo) {\n  throw new Error(`failed to fetch account info`);\n}\n\n// Get latest value if its been updated in the last 300 seconds\nconst latestResult = sbv2.decodeLatestAggregatorValue(accountInfo, 300);\nif (latestResult === null) {\n  throw new Error(`failed to fetch latest result for aggregator`);\n}\nconsole.log(`latestResult: ${latestResult}`);\n// latestResult: 105.673205\n')))}u.isMDXComponent=!0}}]);