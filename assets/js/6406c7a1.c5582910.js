"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8864],{54852:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(49231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),g=r,m=p["".concat(i,".").concat(g)]||p[g]||d[g]||l;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=g;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var u=2;u<l;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},32580:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(432),r=(n(49231),n(54852));const l={slug:"./getting-started",title:"Getting Started",keywords:["Solana","Solana SDK","Oracles","Web3","Off-chain","Randomness"]},s="Guide to Create a K8s Cluster & Install K8s SGX Plugin",o={unversionedId:"node-operator/getting-started",id:"node-operator/getting-started",title:"Getting Started",description:"This guide will walk you through the process of using k3sup",source:"@site/docs/800-node-operator/10-getting-started.mdx",sourceDirName:"800-node-operator",slug:"/node-operator/getting-started",permalink:"/node-operator/getting-started",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{slug:"./getting-started",title:"Getting Started",keywords:["Solana","Solana SDK","Oracles","Web3","Off-chain","Randomness"]},sidebar:"sidebar",previous:{title:"Overview",permalink:"/node-operator/overview"},next:{title:"Deployment",permalink:"/node-operator/deployment"}},i={},u=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Step 1: Create a Kubernetes Cluster",id:"step-1-create-a-kubernetes-cluster",level:3},{value:"Step 2: Install supporting applications",id:"step-2-install-supporting-applications",level:3},{value:"Step 3: Install the Kubernetes SGX Plugin",id:"step-3-install-the-kubernetes-sgx-plugin",level:3},{value:"Step 4: Install Switchboard Oracle",id:"step-4-install-switchboard-oracle",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"guide-to-create-a-k8s-cluster--install-k8s-sgx-plugin"},"Guide to Create a K8s Cluster & Install K8s SGX Plugin"),(0,r.kt)("p",null,"This guide will walk you through the process of using ",(0,r.kt)("inlineCode",{parentName:"p"},"k3sup"),"\nto create a Kubernetes cluster on a virtual machine with SGX\nenabled, and then install the Kubernetes SGX plugin."),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A machine with SGX enabled with kernel version >=6.0"),(0,r.kt)("li",{parentName:"ul"},"Helm cli installed"),(0,r.kt)("li",{parentName:"ul"},"kubectl cli installed"),(0,r.kt)("li",{parentName:"ul"},"A copy of the switchboard infra-external repo installed on user machine")),(0,r.kt)("p",null,"If you are using a debian based distro, you can install the\nSGX packages like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'echo "deb https://download.01.org/intel-sgx/sgx_repo/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/intel-sgx.list >/dev/null\ncurl -sSL "https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key" | sudo -E apt-key add -\nsudo apt update\nsudo apt install sgx-aesm-service libsgx-aesm-launch-plugin libsgx-aesm-quote-ex-plugin libsgx-aesm-ecdsa-plugin libsgx-aesm-epid-plugin libsgx-dcap-quote-verify\n')),(0,r.kt)("p",null,"You can clone the infra-external repo like so"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/switchboard-xyz/infra-external.git\n")),(0,r.kt)("h3",{id:"step-1-create-a-kubernetes-cluster"},"Step 1: Create a Kubernetes Cluster"),(0,r.kt)("p",null,"If you want to create a kubernetes cluster consisting of a\nsingle node, k3s is the best option. ",(0,r.kt)("inlineCode",{parentName:"p"},"k3sup")," is the easisest\nway to set up such a cluster. You can install this cli tool\nby running the following command in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sLS https://get.k3sup.dev | sh\n")),(0,r.kt)("p",null,"Then move ",(0,r.kt)("inlineCode",{parentName:"p"},"k3sup")," to your ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/local/bin/"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo install k3sup /usr/local/bin/\n")),(0,r.kt)("p",null,"Finally, set up a machine that you have ssh access to and\nchange to that context in kubectl"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"k3sup install --ip $MY_MACHINE_IP --user root --context k3s-devnet\nkubectl config use-context k3s-devnet\n")),(0,r.kt)("p",null,"For more advanced configuration, please refer to the\ndocumentation at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/alexellis/k3sup"},"https://github.com/alexellis/k3sup"),"\nfor more details on how to set up your cluster."),(0,r.kt)("p",null,"In order to access the cluster, you must use the kubeconfig that's generated in your terminal's working directory during k3sup install. You can either reference it with the --kubeconfig flag or with the following commands to integrate it into a pre-existing default kubeconfig file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export KUBECONFIG=~/.kube/config:/path/to/new/kubeconfig\nkubectl config view --flatten > ~/.kube/config\n")),(0,r.kt)("p",null,"In order to validate that you can connect to the cluster, try running the following commands. If you are getting timeouts, it may because of geographical distance (solved by vpn) or port 6443 not being open"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get po\nNo resources found in default namespace.\n\n")),(0,r.kt)("h3",{id:"step-2-install-supporting-applications"},"Step 2: Install supporting applications"),(0,r.kt)("p",null,"While an ingress controller (traefik) is automatically\ninstalled as part of setting up a k3s cluster, you may\nalso want to set up prometheus or vmetrics to scrape\nmetrics from the oracles, secrets management like\ninfisical, or a log aggregator like loki."),(0,r.kt)("p",null,"Exposing metrics and logs are strongly encouraged for all oracle operators. To do so, first you must register a domain/subdomain to use for your metrics and logs endpoints respectively. If you are using k3s, then you can find the external ip address by running this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n kube-system get svc traefik\n")),(0,r.kt)("p",null,"If you are using a different kubernetes distribution and/or ingress controller, you can find that wit this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get svc --all-namespaces\n")),(0,r.kt)("p",null,"Once you have the domains registered, go to infra-external/infra-apps/ and configure cert-manager-issuer.yaml with your account information that you've set up by following the cert-manager documentation. Then configure vmetrics-values.yaml and loki-values.yaml with those respective domains. After that, you can deploy as follows: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add vm https://victoriametrics.github.io/helm-charts/\nhelm upgrade -i vmsingle vm/victoria-metrics-single -f vmetrics-values.yaml\n\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm upgrade -i grafana grafana/grafana -f grafana-values.yaml\n\nhelm repo add jetstack https://charts.jetstack.io\nhelm install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.12.3 \\\n  --set installCRDs=true \\\n  --set global.leaderElection.namespace=cert-manager\n  \nhelm repo add infisical-helm-charts 'https://dl.cloudsmith.io/public/infisical/helm-charts/helm/charts/' \nhelm install secrets-operator infisical-helm-charts/secrets-operator\n")),(0,r.kt)("h3",{id:"step-3-install-the-kubernetes-sgx-plugin"},"Step 3: Install the Kubernetes SGX Plugin"),(0,r.kt)("p",null,"Before installing the SGX plugin, check the latest\nversion (ex: v0.28.0) at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/intel/intel-device-plugins-for-kubernetes/tags"},"https://github.com/intel/intel-device-plugins-for-kubernetes/tags"),".\nThen replace the version number in the below URLs accordingly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -k 'https://github.com/intel/intel-device-plugins-for-kubernetes/deployments/nfd/?ref=v0.28.0'\nkubectl apply -k 'https://github.com/intel/intel-device-plugins-for-kubernetes/deployments/nfd/overlays/node-feature-rules?ref=v0.28.0'\nkubectl apply -k 'https://github.com/intel/intel-device-plugins-for-kubernetes/deployments/operator/default?ref=v0.28.0'\nkubectl apply -f 'https://raw.githubusercontent.com/intel/intel-device-plugins-for-kubernetes/v0.28.0/deployments/operator/samples/deviceplugin_v1_sgxdeviceplugin.yaml'\n")),(0,r.kt)("p",null,"To confirm sucessuful installation, you can run the following command and should see a similar result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ kubectl get node -o yaml | grep "epc"\n      nfd.node.kubernetes.io/extended-resources: sgx.intel.com/epc\n      sgx.intel.com/epc: "396361728"\n')),(0,r.kt)("h3",{id:"step-4-install-switchboard-oracle"},"Step 4: Install Switchboard Oracle"),(0,r.kt)("p",null,"Follow the instructions in the Switchboard Oracle\nrepository for how to install it to your cluster."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm upgrade -i switchboard-oracle ./charts/switchboard-oracle -f $HELM_VALUES_YAML\n")))}d.isMDXComponent=!0}}]);