"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7505],{54852:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var o=r(49231);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),l=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(r),h=n,m=u["".concat(c,".").concat(h)]||u[h]||p[h]||a;return r?o.createElement(m,i(i({ref:t},d),{},{components:r})):o.createElement(m,i({ref:t},d))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},71176:(e,t,r)=>{r.d(t,{Z:()=>n});var o=r(49231);const n=e=>{let{type:t,header:r,children:n}=e;const a=r||t.toUpperCase();return o.createElement("div",{className:`custom-admonition ${t}`},a&&o.createElement("div",{className:"custom-admonition-header"},a),o.createElement("div",{className:"custom-admonition-content"},n))}},89594:(e,t,r)=>{r.d(t,{Z:()=>n});var o=r(49231);const n=e=>{let{header:t,children:r}=e;const[n,a]=(0,o.useState)(!1);return o.createElement("div",{className:"custom-details "+(n?"open":"")},o.createElement("summary",{onClick:()=>{a(!n)}},t),o.createElement("div",{className:"divider"}),o.createElement("div",{className:"details-content"},r))}},18802:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var o=r(432),n=(r(49231),r(54852)),a=r(89594),i=r(71176);const s={slug:"/",sidebar_label:"Overview",keywords:["Switchboard","web3","oracle","data feeds","vrf","randomness","solana","aptos"]},c="Welcome to SwitchDocs",l={unversionedId:"overview",id:"overview",title:"Welcome to SwitchDocs",description:"If you're new to Switchboard, do check out the unique properties of our oracle",source:"@site/docs/00-overview.mdx",sourceDirName:".",slug:"/",permalink:"/",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{slug:"/",sidebar_label:"Overview",keywords:["Switchboard","web3","oracle","data feeds","vrf","randomness","solana","aptos"]},sidebar:"sidebar",next:{title:"Oracle Problem",permalink:"/architecture/switchboard-v3/oracle-problem"}},d={},u=[{value:"Introducing Switchboard",id:"introducing-switchboard",level:3},{value:"Switchboard Services",id:"switchboard-services",level:3},{value:"Switchboard Architecture",id:"switchboard-architecture",level:3}],p={toc:u},h="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(h,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"welcome-to-switchdocs"},"Welcome to SwitchDocs"),(0,n.kt)(i.Z,{type:"info",mdxType:"CustomAdmonition"},(0,n.kt)("p",null,"If you're new to Switchboard, do check out the unique properties of our oracle\narchitecture in order to fully utilize the oracle protocol!"),(0,n.kt)("p",null,"For a deeper dive, read our whitepaper here: (insert whitepaper)")),(0,n.kt)("h3",{id:"introducing-switchboard"},"Introducing Switchboard"),(0,n.kt)("p",null,"Remember the traditional telecommunication systems where switchboard operators\nmanually establish connections by plugging switchboards to facilitate calls\nbetween parties. Similarly, Switchboard, the oracle protocol, employs a\ndecentralized quorum of oracles to shuffle data on a blockchain, empowering\nsmart contract developers to build with real world information on a blockchain."),(0,n.kt)("h3",{id:"switchboard-services"},"Switchboard Services"),(0,n.kt)("p",null,"Switchboard Services is a set of developer tools built for simplicity,\nseamlessness and permissionlessness for developers to focus on writing the code that matters.\nThe Services are currently supporting these products: Data Feeds, Randomness and\nFunctions. Apart from these, any party can set up their own Switchboard\ninfrastructure for isolated usage as Switchboard is designed to be modular."),(0,n.kt)(a.Z,{header:"Data Feeds",mdxType:"CustomDetails"},(0,n.kt)("p",null,"Switchboard provides a revolutionary developer-focused Data Feed Builder,\nwhere developers can spend less than 5 minutes to create a data feed\nutilizing any data source: not exclusive to off-chain sources like CoinGecko API,\nBinance API, on-chain sources like Uniswap Task, Jupiter Task, and Switchboard\nSecrets (off-chain private data sources).")),(0,n.kt)(a.Z,{header:"Randomness",mdxType:"CustomDetails"},(0,n.kt)("p",null,"Switchboard provides a simple, secure randomness service, where developers\ncan send a request to a program to call the randomness generation event that is\noff-chain, within a secure enclave. Alternatively, a separate commit-to-\nreveal randomness model or a fully custom function can be utilized as well.")),(0,n.kt)(a.Z,{header:"Functions",mdxType:"CustomDetails"},(0,n.kt)("p",null,"Switchboard provides a low level custom solution for all types of off-chain\ncomputations such as a performing data feed, a randomness generator, a risk\nengine or others, where developers write and deploy a function to container\nand is executed within a secure enclave of an oracle when triggered based on\na routine (cron-schedule) or request (on-demand).")),(0,n.kt)("h3",{id:"switchboard-architecture"},"Switchboard Architecture"),(0,n.kt)("p",null,"Switchboard is built with security first, utilizing a unique approach of a\nverifiable execution layer built with Trusted Execution Environment (TEE)\ntechnology paired with economic security governed by the SWITCH and XSWITCH\ntokens."),(0,n.kt)(a.Z,{header:"Oracles (Nodes)",mdxType:"CustomDetails"},(0,n.kt)("p",null,"The Switchboard protocol is run by a quorum of permissionless node operators,\nwhere its nodes utilize TEE techonology and economic security to create a\nnetwork to verify oracle software and incentivize them based on their honest\nexecutions.")),(0,n.kt)(a.Z,{header:"Queues",mdxType:"CustomDetails"},(0,n.kt)("p",null,"Switchboard takes a modular approach towards its infrastructure where\ndifferent parties can set up their own Switchboard Queue for differing use cases\nand onboard a set of nodes governed by the Switchboard Attestation Program.")),(0,n.kt)(a.Z,{header:"Programs",mdxType:"CustomDetails"},(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Switchboard Attestation Program:")," The brain of the protocol where it conducts\ngovernance, delegating executions and verification of oracles and its executions."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Data Feeds Program:")," A data layer built on top of the Attestation\nProgram where users define their aggregators (data feeds) and triggers the oracles\nto complete its request, afterwhich the Attestation Program conducts the verification\nand submits the data back to the Data Feed Program for protocols to utilize."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Randomness Program:")," A request layer where users send their randomness\nrequests to the program and receive directly back in their own program.")),(0,n.kt)(a.Z,{header:"Tokens",mdxType:"CustomDetails"},(0,n.kt)("p",null,"to be completed")))}m.isMDXComponent=!0}}]);