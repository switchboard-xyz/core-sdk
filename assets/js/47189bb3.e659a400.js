"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[298],{54852:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>h});var n=t(49231);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=n.createContext({}),l=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=l(e.components);return n.createElement(m.Provider,{value:a},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,m=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(t),u=r,h=c["".concat(m,".").concat(u)]||c[u]||d[u]||s;return t?n.createElement(h,o(o({ref:a},p),{},{components:t})):n.createElement(h,o({ref:a},p))}));function h(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=u;var i={};for(var m in a)hasOwnProperty.call(a,m)&&(i[m]=a[m]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},54199:(e,a,t)=>{t.d(a,{Z:()=>i});var n=t(55013),r=t(56774),s=t(51102),o=t(49231);const i=e=>{const{colorMode:a}=(0,n.I)(),t=(0,r.Z)("dark"===a&&e.darkImg?e.darkImg:e.img);let i="inherit";e.lightBg&&"dark"!==a&&(i=e.lightBg),e.darkBg&&"dark"===a&&(i=e.darkBg);let m={};return e.sx&&(m={backgroundColor:i,m:"auto",display:"flex",...m,...e.sx}),o.createElement(s.Z,{component:"img",sx:m,src:t})}},33882:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>m,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=t(432),r=(t(49231),t(54852)),s=t(54199),o=t(50853);t(60054);const i={slug:"./data-feed-service",title:"Data Feed Service WIP",keywords:["Switchboard","web3","oracle","data feeds"]},m=void 0,l={unversionedId:"architecture/data-feed-service",id:"architecture/data-feed-service",title:"Data Feed Service WIP",description:"Work in progress",source:"@site/docs/101-architecture/40-data-feed-service.mdx",sourceDirName:"101-architecture",slug:"/architecture/data-feed-service",permalink:"/architecture/data-feed-service",draft:!1,tags:[],version:"current",sidebarPosition:40,frontMatter:{slug:"./data-feed-service",title:"Data Feed Service WIP",keywords:["Switchboard","web3","oracle","data feeds"]},sidebar:"sidebar",previous:{title:"The Data Models WIP",permalink:"/architecture/switchboard-v3/data-model"},next:{title:"Randomness Service WIP",permalink:"/architecture/randomness-service"}},p={},c=[{value:"Work in progress",id:"work-in-progress",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Job Definitions",id:"job-definitions",level:2},{value:"Job Weights",id:"job-weights",level:3},{value:"Data Feed Composability",id:"data-feed-composability",level:2},{value:"Cost",id:"cost",level:2},{value:"Update Request Cost",id:"update-request-cost",level:3},{value:"Variance Threshold",id:"variance-threshold",level:3},{value:"Maintenance",id:"maintenance",level:2}],d={toc:c},u="wrapper";function h(e){let{components:a,...t}=e;return(0,r.kt)(u,(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"work-in-progress"},"Work in progress"),(0,r.kt)("p",null,"An aggregator or data feed is what on-chain developers use when building smart\ncontracts. A data feed is a collection of jobs that get aggregated to produce a\nsingle, deterministic result. Typically the first task in a job will fetch\nexternal data with subsequent tasks responsible for parsing the response and\ntransforming the value into a single data type, like an integer or decimal."),(0,r.kt)("p",null,"When an oracle is assigned to process a data feed update, the oracle executes\nthe defined jobs, computes the weighted median of the job responses, and\npublishes the result on-chain. If sufficient oracles respond, the on-chain\nprogram computes the final result as the median of the assigned oracle\nresponses."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"A ",(0,r.kt)("a",{parentName:"p",href:"/functions"},(0,r.kt)("strong",{parentName:"a"},"Switchboard Function"))," can also be used for the same effect\nwith greater customization. You can have a single function route 500+ data feeds\n",(0,r.kt)("em",{parentName:"p"},"(See the PushOracle EVM contract for an example)"),".")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)(o.ZP,{container:!0,spacing:3,mdxType:"Grid"},(0,r.kt)(o.ZP,{item:!0,md:4,sm:12,order:{xs:2,sm:1},mdxType:"Grid"},(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("b",null,"Aggregator: "),"Contains the data feed configuration, dictating how data feed updates get requested, updated, and resolved on-chain."),(0,r.kt)("li",null,(0,r.kt)("b",null,"Job Account: "),"Stores the blueprints for how data is fetched off-chain for a particular data source."),(0,r.kt)("li",null,(0,r.kt)("b",null,"Permission Account: "),"Permits a data feed to join an oracle queue."),(0,r.kt)("li",null,(0,r.kt)("b",null,"Lease Contract: "),"Pre-funded escrow contract to reward oracles for their work."),(0,r.kt)("li",null,(0,r.kt)("b",null,"Crank: "),"Optional, owned by the queue and allows a data feed to be updated at a regular interval."),(0,r.kt)("li",null,(0,r.kt)("b",null,"History Buffer: "),"Optional, allows a feed to store the last N values."))),(0,r.kt)(o.ZP,{item:!0,md:8,sx:12,order:{xs:1,sm:2},mdxType:"Grid"},(0,r.kt)(s.Z,{img:"/img/feeds/Aggregator_Accounts.png",sx:{display:"flex"},mdxType:"MarkdownImage"}))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"job-definitions"},"Job Definitions"),(0,r.kt)("p",null,"An Aggregator Account stores a collection of Job Account public keys along with\nthe hashes of the job definitions. This is to prevent malicious RPC nodes from\nproviding incorrect task definitions to oracles before fulfillment."),(0,r.kt)("p",null,"A Job Account is a collection of Switchboard Tasks that get executed by an\noracle sequentially. Each Job Account typically corresponds to a single data\nsource. A data feed requires at least one job account and at most 16 job\naccounts. Switchboard Job Accounts can be used to source data from:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HTTP endpoints, public or private"),(0,r.kt)("li",{parentName:"ul"},"Websockets"),(0,r.kt)("li",{parentName:"ul"},"On-Chain data from Solana, Ethereum, etc",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Anchor programs"),(0,r.kt)("li",{parentName:"ul"},"JupiterSwap"),(0,r.kt)("li",{parentName:"ul"},"Uniswap"),(0,r.kt)("li",{parentName:"ul"},"SushiSwap"),(0,r.kt)("li",{parentName:"ul"},"Saber"),(0,r.kt)("li",{parentName:"ul"},"... and more")))),(0,r.kt)("h3",{id:"job-weights"},"Job Weights"),(0,r.kt)("p",null,"A data feed can assign job weights to a job account which will be used when the\noracle calculates the median across the job responses. This is useful to weight\ndata sources by some metric such as liquidity or a reliability score."),(0,r.kt)("p",null,"It is ",(0,r.kt)("strong",{parentName:"p"},"strongly")," recommended to utilize job weights as ",(0,r.kt)("em",{parentName:"p"},"not all data sources\nare created equally"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Currently the only way to set a job weight is to remove and re-add the job\naccount to a feed.")),(0,r.kt)("h2",{id:"data-feed-composability"},"Data Feed Composability"),(0,r.kt)("p",null,"Data feeds may reference other data feeds and build upon each other. It is\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"strongly"))," recommended that you own any feed that you reference in case of\ndownstream impacts out of your control. While anyone can extend another feeds\nlease, a lease owner can always withdraw any lease funds and prevent future\nupdates."),(0,r.kt)("p",null,"As an example, you could construct the following feed definition:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a Switchboard feed that sources SOL/USD prices from a variety of\nexchanges, each weighted by their 7d volume, along with a history buffer"),(0,r.kt)("li",{parentName:"ul"},"Create a Switchboard feed that uses an OracleTask to fetch the Pyth SOL/USD\nprice every 10 seconds, along with a history buffer"),(0,r.kt)("li",{parentName:"ul"},"Create a Switchboard feed that uses an OracleTask to fetch the Chainlink\nSOL/USD price every 10 seconds, along with a history buffer"),(0,r.kt)("li",{parentName:"ul"},"Finally, create a Switchboard feed that calculates the 1min TWAP of each\nsource above and returns the median of the results")),(0,r.kt)("p",null,"This is just a small window into how Switchboard feeds can build on each other\nand let the downstream consumer configure their feeds to meet their own use\ncases."),(0,r.kt)("h2",{id:"cost"},"Cost"),(0,r.kt)("p",null,"Each data feed has a LeaseContract, which is a pre-funded escrow account to\nreward oracles for fulfilling update request. The LeaseContract has a\npre-specified ",(0,r.kt)("inlineCode",{parentName:"p"},"lease.withdrawAuthority")," which is the only wallet allowed to\nwithdraw funds from the lease escrow. Any user is able to contribute to a\nLeaseContract and keep the feed updating."),(0,r.kt)("p",null,"When a new openRound is successfully requested for a data feed, the user who\nrequested it is transferred ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.reward")," tokens from the feeds LeaseContract.\nThis is to incentivize users and crank turners to keep feeds updating based on a\nfeeds config."),(0,r.kt)("p",null,"When a data feed result is accepted on-chain by a batch of oracles, the oracle\nrewards, as specified by ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.reward"),", are automatically deducted from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"lease.escrow")," and transferred to an ",(0,r.kt)("inlineCode",{parentName:"p"},"oracle.tokenAccount"),"."),(0,r.kt)("h3",{id:"update-request-cost"},"Update Request Cost"),(0,r.kt)("p",null,"Each data feed update cost can be calculated by the following equation:"),(0,r.kt)("p",null,(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"T"),(0,r.kt)("mrow",{parentName:"msub"},(0,r.kt)("mi",{parentName:"mrow"},"c"),(0,r.kt)("mi",{parentName:"mrow"},"o"),(0,r.kt)("mi",{parentName:"mrow"},"s"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mi",{parentName:"mrow"},"P"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"r"),(0,r.kt)("mi",{parentName:"mrow"},"U"),(0,r.kt)("mi",{parentName:"mrow"},"p"),(0,r.kt)("mi",{parentName:"mrow"},"d"),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mi",{parentName:"mrow"},"e"))),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow"},"+"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"u"),(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("mi",{parentName:"mrow"},"S"),(0,r.kt)("mi",{parentName:"mrow"},"u"),(0,r.kt)("mi",{parentName:"mrow"},"c"),(0,r.kt)("mi",{parentName:"mrow"},"c"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"s"),(0,r.kt)("mi",{parentName:"mrow"},"s"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"\xd7"),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"T"),(0,r.kt)("mrow",{parentName:"msub"},(0,r.kt)("mi",{parentName:"mrow"},"q"),(0,r.kt)("mi",{parentName:"mrow"},"u"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"u"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"R"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"w"),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mi",{parentName:"mrow"},"r"),(0,r.kt)("mi",{parentName:"mrow"},"d")))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"T_{costPerUpdate}=(1 + numSuccess) \xd7 T_{queueReward}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.9694em",verticalAlign:"-0.2861em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.1389em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"cos"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.13889em"}},"tP"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"er"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.10903em"}},"U"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"p"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"a"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"e"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2861em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"u"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"ccess"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.9694em",verticalAlign:"-0.2861em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.1389em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03588em"}},"q"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"u"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"e"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"u"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"e"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.00773em"}},"R"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"e"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02691em"}},"w"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"a"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"r"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2861em"}},(0,r.kt)("span",{parentName:"span"}))))))))))),(0,r.kt)("p",null,"where,"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")," is the raw token amount in base units (",(0,r.kt)("em",{parentName:"li"},"Ex: lamports or satoshis"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"+1"))," is to reward the update requester for keeping the feed updating"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"numSuccess")," is the number of successful oracle responses, which will always\nbe between ",(0,r.kt)("inlineCode",{parentName:"li"},"[aggregator.minOracleResults, aggregator.oracleRequestBatchSize]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queue.reward")," is the queue's set oracle reward")),(0,r.kt)("p",null,"If an update round fails to receive ",(0,r.kt)("inlineCode",{parentName:"p"},"minOracleResults"),", only the update\nrequester receives funds from the lease escrow."),(0,r.kt)("h3",{id:"variance-threshold"},"Variance Threshold"),(0,r.kt)("p",null,"A feed can set an ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.varianceThreshold")," to instruct an oracle to skip\nreporting a value on-chain if the percentage change between the current result\nand the ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.previousConfirmedRoundResult")," is not exceeded. This is a\ncost saving tool to conserve lease cost during low volatility."),(0,r.kt)("p",null,"A feeds ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.forceReportPeriod")," is the compliment and instructs an oracle\nto always report a result if ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.forceReportPeriod")," seconds have elapsed\nsince the last successful confirmed round. This can be thought of as the maximum\nallowable staleness for a feed."),(0,r.kt)("p",null,"The two settings above can greatly increase the lifespan of a feed's lease but\nalso makes it difficult to estimate the remaining time on a lease."),(0,r.kt)("h2",{id:"maintenance"},"Maintenance"),(0,r.kt)("p",null,"The following highlights some basic maintenance you should employ when creating\nyour own Switchboard feed."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Monitor Lease Funds")," \u2014 you should monitor your feeds lease account for low\nbalances. When a feed\u2019s lease is emptied, it will no longer process new\nupdates until it has enough to reward the oracles processing the update. We\nare working with a few web3 messaging services to enable wallet notifications\nwhen leases are low on funds."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Monitor Crank Eviction")," \u2014 if a lease is emptied, it will also be evicted\nfrom its crank. Switchboard feeds act like public utilities where anyone is\nfree to re-push it to a crank, as long as it doesn\u2019t have\n",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.disableCrank")," set to true."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Monitor Data Sources")," \u2014 Sometimes APIs change or move. High availability\nfeeds should have some basic routine health checks to ensure their on-chain\ndata is updating as expected."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Monitor Priority Fees")," - Solana data feeds may specify a priority fee\nconfiguration in order to push updates through during periods of congestion.\nYou should monitor the average priority fee for the network and update as\nneeded.")))}h.isMDXComponent=!0}}]);