"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[26658],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),l=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),m=n,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return r?a.createElement(f,s(s({ref:t},u),{},{components:r})):a.createElement(f,s({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var l=2;l<o;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},27433:(e,t,r)=>{r.d(t,{Z:()=>D});var a=r(44267),n=r(15861),o=r(21519),s=r(80102),c=r(83117),i=r(67294),l=r(86010),u=r(94780),d=r(33616),p=r(90948),m=r(34867);function f(e){return(0,m.Z)("MuiCardHeader",e)}const g=(0,r(1588).Z)("MuiCardHeader",["root","avatar","action","content","title","subheader"]);var h=r(85893);const b=["action","avatar","className","component","disableTypography","subheader","subheaderTypographyProps","title","titleTypographyProps"],v=(0,p.ZP)("div",{name:"MuiCardHeader",slot:"Root",overridesResolver:(e,t)=>(0,c.Z)({[`& .${g.title}`]:t.title,[`& .${g.subheader}`]:t.subheader},t.root)})({display:"flex",alignItems:"center",padding:16}),y=(0,p.ZP)("div",{name:"MuiCardHeader",slot:"Avatar",overridesResolver:(e,t)=>t.avatar})({display:"flex",flex:"0 0 auto",marginRight:16}),_=(0,p.ZP)("div",{name:"MuiCardHeader",slot:"Action",overridesResolver:(e,t)=>t.action})({flex:"0 0 auto",alignSelf:"flex-start",marginTop:-4,marginRight:-8,marginBottom:-4}),k=(0,p.ZP)("div",{name:"MuiCardHeader",slot:"Content",overridesResolver:(e,t)=>t.content})({flex:"1 1 auto"}),w=i.forwardRef((function(e,t){const r=(0,d.Z)({props:e,name:"MuiCardHeader"}),{action:a,avatar:o,className:i,component:p="div",disableTypography:m=!1,subheader:g,subheaderTypographyProps:w,title:x,titleTypographyProps:R}=r,N=(0,s.Z)(r,b),Z=(0,c.Z)({},r,{component:p,disableTypography:m}),O=(e=>{const{classes:t}=e;return(0,u.Z)({root:["root"],avatar:["avatar"],action:["action"],content:["content"],title:["title"],subheader:["subheader"]},f,t)})(Z);let A=x;null==A||A.type===n.Z||m||(A=(0,h.jsx)(n.Z,(0,c.Z)({variant:o?"body2":"h5",className:O.title,component:"span",display:"block"},R,{children:A})));let D=g;return null==D||D.type===n.Z||m||(D=(0,h.jsx)(n.Z,(0,c.Z)({variant:o?"body2":"body1",className:O.subheader,color:"text.secondary",component:"span",display:"block"},w,{children:D}))),(0,h.jsxs)(v,(0,c.Z)({className:(0,l.Z)(O.root,i),as:p,ref:t,ownerState:Z},N,{children:[o&&(0,h.jsx)(y,{className:O.avatar,ownerState:Z,children:o}),(0,h.jsxs)(k,{className:O.content,ownerState:Z,children:[A,D]}),a&&(0,h.jsx)(_,{className:O.action,ownerState:Z,children:a})]}))}));var x=r(44073),R=r(39960),N=r(13264),Z=r(92949);const O=(0,N.Z)(x.Z)((e=>{let{theme:t,dark:r}=e;return{display:"flex",flexDirection:"row",justifyItems:"baseline",background:r?"rgba(42, 56, 68, 1)":"rgba(255, 255, 255, 0.6)",border:(r?.15:.1)+"rem solid var(--ifm-navbar-link-color)",borderRadius:"13.2px",boxShadow:"0 6px 7px 5px rgba(107 107 107, 0.03)",boxSizing:"border-box",width:"100%",height:"100%",verticalAlign:"middle",textDecoration:"none",[t.breakpoints.down(300)]:{paddingLeft:""},transition:"transform 0.15s ease-in-out","&&&:hover":{background:r?"rgba(42, 56, 68, 1)":"white",transform:"scale3d(1.05, 1.05, 1)"}}})),A=(0,N.Z)(w)((e=>{let{theme:t}=e;return{display:"flex",maxHeight:"96px"}}));function D(e){let{title:t,image:r,imageDark:s,description:c,to:l,sx:u}=e;const{colorMode:d}=(0,Z.I)();return i.createElement(R.Z,{href:l,style:{textDecoration:"none"}},i.createElement(O,{dark:"dark"===d?1:0,sx:u},i.createElement(a.Z,{sx:{height:"100%",width:"100%"}},i.createElement(A,{avatar:i.createElement("div",{style:{height:48,width:48,display:"flex",alignItems:"center",justifyContent:"center"}},"dark"===d&&s?s:r),title:t,titleTypographyProps:{fontSize:"1.25rem",color:"var(--ifm-navbar-link-color)",fontWeight:"var(--ifm-font-weight-bold)"}}),c?i.createElement(i.Fragment,null,i.createElement(o.Z,{sx:{marginBottom:"1rem"}}),i.createElement(n.Z,{variant:"body2",color:"textSecondary",component:"p",sx:{color:"var(--ifm-navbar-link-color)",fontSize:"1.1rem"}},c)):i.createElement(i.Fragment,null))))}},17547:(e,t,r)=>{r.d(t,{Z:()=>s});var a=r(86886),n=r(67294),o=r(27433);function s(e){let{items:t,cols:r,sx:s}=e;return n.createElement(a.ZP,{container:!0,spacing:3},t.map((e=>{var t;return n.createElement(a.ZP,{item:!0,style:{flexGrow:1},xs:12,md:6,lg:Math.floor(null!=(t=12/r)?t:2)},n.createElement(o.Z,{title:e.title,image:e.image,imageDark:e.imageDark,to:e.to,description:e.description,sx:s}))})))}},83496:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var a=r(83117),n=(r(67294),r(3905)),o=r(17547),s=r(44996);const c={sidebar_position:10,slug:".",title:"switchboard-v2"},i=void 0,l={unversionedId:"dev/solana/rust/client",id:"dev/solana/rust/client",title:"switchboard-v2",description:"cargo&nbsp;&nbsp;",source:"@site/docs/dev/solana/rust/client.mdx",sourceDirName:"dev/solana/rust",slug:"/dev/solana/rust/",permalink:"/dev/solana/rust/",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,slug:".",title:"switchboard-v2"}},u={},d=[{value:"Quick Links",id:"quick-links",level:2},{value:"Usage",id:"usage",level:2},{value:"Aggregator",id:"aggregator",level:3},{value:"Read Latest Result",id:"read-latest-result",level:4},{value:"Read Aggregator History",id:"read-aggregator-history",level:4},{value:"VRF Account",id:"vrf-account",level:3},{value:"Read Latest Result",id:"read-latest-result-1",level:4},{value:"RequestRandomness CPI",id:"requestrandomness-cpi",level:4},{value:"Buffer Relayer Account",id:"buffer-relayer-account",level:3},{value:"Read Latest Result",id:"read-latest-result-2",level:4}],p={toc:d};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://crates.io/crates/switchboard-v2"},(0,n.kt)("img",{parentName:"a",src:"https://badgen.net/crates/v/switchboard-v2",alt:"cargo"})),"\xa0","\xa0","\n",(0,n.kt)("a",{parentName:"p",href:"https://twitter.com/switchboardxyz"},(0,n.kt)("img",{parentName:"a",src:"https://badgen.net/twitter/follow/switchboardxyz",alt:"twitter"})),"\xa0","\xa0"),(0,n.kt)("p",null,"A Rust library to interact with Switchboard V2 accounts."),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("h2",{parentName:"admonition",id:"features"},"Features"),(0,n.kt)("p",{parentName:"admonition"},"By default the crate will default to mainnet. You must explicitly enable the\n",(0,n.kt)("inlineCode",{parentName:"p"},"devnet")," feature to use on devnet."),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nswitchboard-v2 = { version = "^0.1.14", features = ["devnet"] }\n'))),(0,n.kt)("h2",{id:"quick-links"},"Quick Links"),(0,n.kt)(o.Z,{cols:2,items:[{to:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/rust/switchboard-v2",title:"Github",description:"View the Github repo",image:(0,n.kt)("img",{src:(0,s.Z)("/img/icons/github/light.svg")}),imageDark:(0,n.kt)("img",{src:(0,s.Z)("/img/icons/github/dark.svg")})},{to:"https://docs.rs/switchboard-v2/latest/switchboard_v2/",title:"Typedocs",description:"View the Typedocs",image:(0,n.kt)("img",{src:(0,s.Z)("/img/icons/rust/crab.svg")}),imageDark:(0,n.kt)("img",{src:(0,s.Z)("/img/icons/rust/crab.svg")})}],mdxType:"RoundedCardGroup"}),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("h3",{id:"aggregator"},"Aggregator"),(0,n.kt)("h4",{id:"read-latest-result"},"Read Latest Result"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::solana_program::clock;\nuse std::convert::TryInto;\nuse switchboard_v2::{AggregatorAccountData, SwitchboardDecimal, SWITCHBOARD_PROGRAM_ID};\n\n// check feed owner\nlet owner = *aggregator.owner;\nif owner != SWITCHBOARD_PROGRAM_ID {\n    return Err(error!(ErrorCode::InvalidSwitchboardAccount));\n}\n\n// deserialize account info\nlet feed = ctx.accounts.aggregator.load()?;\n// OR\nlet feed = AggregatorAccountData::new(feed_account_info)?;\n\n// get result\nlet decimal: f64 = feed.get_result()?.try_into()?;\n\n// check if feed has been updated in the last 5 minutes\nfeed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)?;\n\n// check if feed exceeds a confidence interval of +/i $0.80\nfeed.check_confidence_interval(SwitchboardDecimal::from_f64(0.80))?;\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example(s)"),":\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/switchboard-v2/blob/main/examples/programs/anchor-feed-parser/src/lib.rs"},"anchor-feed-parser"),",\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/switchboard-v2/blob/main/examples/programs/native-feed-parser/src/lib.rs"},"native-feed-parser")),(0,n.kt)("h4",{id:"read-aggregator-history"},"Read Aggregator History"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"Note: The Aggregator must have a history buffer initialized before using"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"use switchboard_v2::AggregatorHistoryBuffer;\nuse std::convert::TryInto;\n\nlet history_buffer = AggregatorHistoryBuffer::new(history_account_info)?;\nlet current_timestamp = Clock::get()?.unix_timestamp;\nlet one_hour_ago: f64 = history_buffer.lower_bound(current_timestamp - 3600).unwrap().try_into()?;\n")),(0,n.kt)("h3",{id:"vrf-account"},"VRF Account"),(0,n.kt)("h4",{id:"read-latest-result-1"},"Read Latest Result"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"use switchboard_v2::VrfAccountData;\n\n// deserialize the account info\nlet vrf = ctx.accounts.vrf.load()?;\n// OR\nlet vrf = VrfAccountData::new(vrf_account_info)?;\n\n// read the result\nlet result_buffer = vrf.get_result()?;\nlet value: &[u128] = bytemuck::cast_slice(&result_buffer[..]);\nlet result = value[0] % 256000 as u128;\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example"),":\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/switchboard-v2/blob/main/examples/programs/anchor-vrf-parser/src/actions/update_result.rs"},"anchor-vrf-parser")),(0,n.kt)("h4",{id:"requestrandomness-cpi"},"RequestRandomness CPI"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'pub use switchboard_v2::{VrfAccountData, VrfRequestRandomness};\n\nlet switchboard_program = ctx.accounts.switchboard_program.to_account_info();\n\nlet vrf_request_randomness = VrfRequestRandomness {\n    authority: ctx.accounts.state.to_account_info(),\n    vrf: ctx.accounts.vrf.to_account_info(),\n    oracle_queue: ctx.accounts.oracle_queue.to_account_info(),\n    queue_authority: ctx.accounts.queue_authority.to_account_info(),\n    data_buffer: ctx.accounts.data_buffer.to_account_info(),\n    permission: ctx.accounts.permission.to_account_info(),\n    escrow: ctx.accounts.escrow.clone(),\n    payer_wallet: ctx.accounts.payer_wallet.clone(),\n    payer_authority: ctx.accounts.payer_authority.to_account_info(),\n    recent_blockhashes: ctx.accounts.recent_blockhashes.to_account_info(),\n    program_state: ctx.accounts.program_state.to_account_info(),\n    token_program: ctx.accounts.token_program.to_account_info(),\n};\n\nlet vrf_key = ctx.accounts.vrf.key.clone();\nlet authority_key = ctx.accounts.authority.key.clone();\n\nlet state_seeds: &[&[&[u8]]] = &[&[\n    &STATE_SEED,\n    vrf_key.as_ref(),\n    authority_key.as_ref(),\n    &[bump],\n]];\nmsg!("requesting randomness");\nvrf_request_randomness.invoke_signed(\n    switchboard_program,\n    params.switchboard_state_bump,\n    params.permission_bump,\n    state_seeds,\n)?;\n\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example"),":\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/switchboard-v2/blob/main/examples/programs/anchor-vrf-parser/src/actions/request_result.rs"},"anchor-vrf-parser")),(0,n.kt)("h3",{id:"buffer-relayer-account"},"Buffer Relayer Account"),(0,n.kt)("h4",{id:"read-latest-result-2"},"Read Latest Result"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'use anchor_lang::solana_program::clock;\nuse std::convert::TryInto;\nuse switchboard_v2::{BufferRelayerAccountData, SWITCHBOARD_PROGRAM_ID};\n\n// check feed owner\nlet owner = *aggregator.owner;\nif owner != SWITCHBOARD_PROGRAM_ID {\n    return Err(error!(ErrorCode::InvalidSwitchboardAccount));\n}\n\n// deserialize account info\nlet buffer = BufferRelayerAccountData::new(feed_account_info)?;\n\n// get result\nlet buffer_result = buffer.get_result();\n\n// check if feed has been updated in the last 5 minutes\nbuffer.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)?;\n\n// convert buffer to a string\nlet result_string = String::from_utf8(buffer.result)\n    .map_err(|_| error!(ErrorCode::StringConversionFailed))?;\nmsg!("Buffer string {:?}!", result_string);\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example"),":\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/switchboard-v2/blob/main/examples/programs/anchor-buffer-parser/src/lib.rs"},"anchor-buffer-parser")))}m.isMDXComponent=!0}}]);