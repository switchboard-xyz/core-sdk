"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7895],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>v});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),u=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},c=function(e){var a=u(e.components);return n.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),v=r,g=d["".concat(s,".").concat(v)]||d[v]||p[v]||o;return t?n.createElement(g,l(l({ref:a},c),{},{components:t})):n.createElement(g,l({ref:a},c))}));function v(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2290:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>v,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var n=t(7462),r=(t(7294),t(3905));const o={toc:[{value:"<code>sbv2 lease create [AGGREGATORKEY]</code>",id:"sbv2-lease-create-aggregatorkey",level:2},{value:"<code>sbv2 lease extend [AGGREGATORKEY]</code>",id:"sbv2-lease-extend-aggregatorkey",level:2},{value:"<code>sbv2 lease withdraw [AGGREGATORKEY]</code>",id:"sbv2-lease-withdraw-aggregatorkey",level:2}]};function l(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},o,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"interact with a switchboard lease account"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-lease-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 lease create [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-lease-extend-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 lease extend [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-lease-withdraw-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 lease withdraw [AGGREGATORKEY]")))),(0,r.kt)("h2",{id:"sbv2-lease-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 lease create [AGGREGATORKEY]")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 lease create [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--amount <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       token amount to load into the lease escrow. If decimals provided, amount will be normalized to\n                         raw tokenAmount\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 aggregator lease create\n\nEXAMPLES\n  $ sbv2 lease:create GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.5 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-lease-extend-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 lease extend [AGGREGATORKEY]")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 lease extend [AGGREGATORKEY] --amount <value> [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) token amount to load into the lease escrow. If decimals provided, amount will be\n                         normalized to raw tokenAmount\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 aggregator lease extend\n\nEXAMPLES\n  $ sbv2 aggregator:lease:extend GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-lease-withdraw-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 lease withdraw [AGGREGATORKEY]")),(0,r.kt)("p",null,"withdraw funds from an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 lease withdraw [AGGREGATORKEY] --amount <value> [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>] [--withdrawAddress <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -a, --authority=<value>    keypair delegated as the authority for managing the oracle account\n  -k, --keypair=<value>      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n  -s, --silent               suppress cli prompts\n  -u, --rpcUrl=<value>       alternate RPC url\n  -v, --verbose              log everything\n  --amount=<value>           (required) token amount to withdraw from lease account. If decimals provided, amount will\n                             be normalized to raw tokenAmount\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n  --programId=<value>        alternative Switchboard program ID to interact with\n  --withdrawAddress=<value>  tokenAccount to withdraw to. If not provided, payer associated token account will be used\n\nDESCRIPTION\n  withdraw funds from an aggregator lease\n\nALIASES\n  $ sbv2 aggregator lease withdraw\n\nEXAMPLES\n  $ sbv2 aggregator:lease:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")))}l.isMDXComponent=!0;const i={sidebar_position:20,title:"sbv2 lease"},s=void 0,u={unversionedId:"cli/lease",id:"cli/lease",title:"sbv2 lease",description:"",source:"@site/api/cli/lease.mdx",sourceDirName:"cli",slug:"/cli/lease",permalink:"/api/cli/lease",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"sbv2 lease"},sidebar:"tutorialSidebar",previous:{title:"sbv2 aggregator",permalink:"/api/cli/aggregator"},next:{title:"sbv2 crank",permalink:"/api/cli/crank"}},c={},p=[],d={toc:p};function v(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)(l,{mdxType:"Sbv2Lease"}))}v.isMDXComponent=!0}}]);