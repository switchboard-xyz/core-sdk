"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9965],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>d});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=t.createContext({}),s=function(e){var a=t.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=s(e.components);return t.createElement(c.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},v=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),v=s(n),d=r,m=v["".concat(c,".").concat(d)]||v[d]||u[d]||o;return n?t.createElement(m,i(i({ref:a},p),{},{components:n})):t.createElement(m,i({ref:a},p))}));function d(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=v;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}v.displayName="MDXCreateElement"},4876:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var t=n(7462),r=(n(7294),n(3905));const o={toc:[{value:"<code>sbv2 oracle balance [ORACLEKEY]</code>",id:"sbv2-oracle-balance-oraclekey",level:2},{value:"<code>sbv2 oracle create [QUEUEKEY]</code>",id:"sbv2-oracle-create-queuekey",level:2},{value:"<code>sbv2 oracle deposit [ORACLEKEY]</code>",id:"sbv2-oracle-deposit-oraclekey",level:2},{value:"<code>sbv2 oracle nonce [ORACLEKEY]</code>",id:"sbv2-oracle-nonce-oraclekey",level:2},{value:"<code>sbv2 oracle permission create [ORACLEKEY]</code>",id:"sbv2-oracle-permission-create-oraclekey",level:2},{value:"<code>sbv2 oracle permission print [ORACLEKEY]</code>",id:"sbv2-oracle-permission-print-oraclekey",level:2},{value:"<code>sbv2 oracle print [ORACLEKEY]</code>",id:"sbv2-oracle-print-oraclekey",level:2},{value:"<code>sbv2 oracle print permission [ORACLEKEY]</code>",id:"sbv2-oracle-print-permission-oraclekey",level:2},{value:"<code>sbv2 oracle withdraw [ORACLEKEY]</code>",id:"sbv2-oracle-withdraw-oraclekey",level:2}]};function i(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"interact with a switchboard oracle account"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-oracle-balance-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 oracle balance [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-oracle-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 oracle create [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-oracle-deposit-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 oracle deposit [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-oracle-nonce-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 oracle nonce [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-oracle-permission-create-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 oracle permission create [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-oracle-permission-print-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 oracle permission print [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-oracle-print-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 oracle print [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-oracle-print-permission-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 oracle print permission [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-oracle-withdraw-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 oracle withdraw [ORACLEKEY]")))),(0,r.kt)("h2",{id:"sbv2-oracle-balance-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 oracle balance [ORACLEKEY]")),(0,r.kt)("p",null,"check an oracles token balance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 oracle balance [ORACLEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle to check token balance\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  check an oracles token balance\n\nEXAMPLES\n  $ sbv2 oracle:balance 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-oracle-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 oracle create [QUEUEKEY]")),(0,r.kt)("p",null,"create a new oracle account for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 oracle create [QUEUEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>] [-n\n    <value>] [-a <value>] [--enable] [--queueAuthority <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to join\n\nFLAGS\n  -a, --authority=<value>   keypair to delegate authority to for managing the oracle account\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -n, --name=<value>        name of the oracle for easier identification\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --enable                  enable oracle heartbeat permissions\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n\nDESCRIPTION\n  create a new oracle account for a given queue\n\nEXAMPLES\n  $ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --keypair ../payer-and-authority-keypair.json\n\n  $ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --name=oracle-1  --keypair ../payer-and-authority-keypair.json\n\n  $ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --keypair ../payer-keypair.json --authority ../oracle-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-oracle-deposit-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 oracle deposit [ORACLEKEY]")),(0,r.kt)("p",null,"deposit tokens into an oracle's token wallet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 oracle deposit [ORACLEKEY] --amount <value> [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle to deposit funds into\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) token amount to load into the oracle escrow. If decimals provided, amount will be\n                         normalized to raw tokenAmount\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  deposit tokens into an oracle's token wallet\n\nEXAMPLES\n  $ sbv2 oracle:deposit 6kPsQoufdugtHLjM4fH7Z2fNv7jLt5pgvwKHt5JvRhQ6 2500 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-oracle-nonce-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 oracle nonce [ORACLEKEY]")),(0,r.kt)("p",null,"view an oracles nonce accounts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 oracle nonce [ORACLEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle to check token balance\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  view an oracles nonce accounts\n")),(0,r.kt)("h2",{id:"sbv2-oracle-permission-create-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 oracle permission create [ORACLEKEY]")),(0,r.kt)("p",null,"create a permission account for an oracle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 oracle permission create [ORACLEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a permission account for an oracle\n")),(0,r.kt)("h2",{id:"sbv2-oracle-permission-print-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 oracle permission print [ORACLEKEY]")),(0,r.kt)("p",null,"Print the permission account associated with a Switchboard oracle account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 oracle permission print [ORACLEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard oracle account\n\nALIASES\n  $ sbv2 oracle permission print\n  $ sbv2 oracle print permission\n\nEXAMPLES\n  $ sbv2 oracle:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-oracle-print-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 oracle print [ORACLEKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard oracle account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 oracle print [ORACLEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard oracle account\n\nALIASES\n  $ sbv2 oracle print\n\nEXAMPLES\n  $ sbv2 oracle:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-oracle-print-permission-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 oracle print permission [ORACLEKEY]")),(0,r.kt)("p",null,"Print the permission account associated with a Switchboard oracle account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 oracle print permission [ORACLEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard oracle account\n\nALIASES\n  $ sbv2 oracle permission print\n  $ sbv2 oracle print permission\n\nEXAMPLES\n  $ sbv2 oracle:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-oracle-withdraw-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 oracle withdraw [ORACLEKEY]")),(0,r.kt)("p",null,"withdraw tokens from an oracle's token wallet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 oracle withdraw [ORACLEKEY] --amount <value> [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [-k <value>] [-f] [-w <value>] [-a <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle to withdraw from\n\nFLAGS\n  -a, --authority=<value>        keypair delegated as the authority for managing the oracle account\n  -f, --force                    skip minStake balance check. your oracle may be removed from the queue\n  -k, --keypair=<value>          keypair that will pay for onchain transactions. defaults to new account authority if no\n                                 alternate authority provided\n  -s, --silent                   suppress cli prompts\n  -u, --rpcUrl=<value>           alternate RPC url\n  -v, --verbose                  log everything\n  -w, --withdrawAccount=<value>  optional solana pubkey or keypair filesystem path to withdraw funds to. default\n                                 destination is oracle authority's token wallet\n  --amount=<value>               (required) token amount to withdraw from oracle escrow. If decimals provided, amount\n                                 will be normalized to raw tokenAmount\n  --mainnetBeta                  WARNING: use mainnet-beta solana cluster\n  --programId=<value>            alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  withdraw tokens from an oracle's token wallet\n\nEXAMPLES\n  $ sbv2 oracle:withdraw 6kPsQoufdugtHLjM4fH7Z2fNv7jLt5pgvwKHt5JvRhQ6 2500 --keypair ../oracle-keypair.json\n\n  $ sbv2 oracle:withdraw 6kPsQoufdugtHLjM4fH7Z2fNv7jLt5pgvwKHt5JvRhQ6 2500 --keypair ../payer-keypair.json --authority ../oracle-keypair.json -w ByJs8E29jxvqf2KFLwfyiE2gUh5fivaS7aShcRMAsnzg\n")))}i.isMDXComponent=!0;const l={sidebar_position:40,title:"sbv2 oracle"},c=void 0,s={unversionedId:"cli/oracle",id:"cli/oracle",title:"sbv2 oracle",description:"",source:"@site/api/cli/oracle.mdx",sourceDirName:"cli",slug:"/cli/oracle",permalink:"/sbv2-core/api/cli/oracle",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40,title:"sbv2 oracle"},sidebar:"tutorialSidebar",previous:{title:"sbv2 localnet",permalink:"/sbv2-core/api/cli/localnet"},next:{title:"sbv2 queue",permalink:"/sbv2-core/api/cli/queue"}},p={},u=[],v={toc:u};function d(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},v,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)(i,{mdxType:"Sbv2Oracle"}))}d.isMDXComponent=!0}}]);