"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[63260],{54852:(t,e,r)=>{r.d(e,{Zo:()=>u,kt:()=>c});var a=r(49231);function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,a,n=function(t,e){if(null==t)return{};var r,a,n={},l=Object.keys(t);for(a=0;a<l.length;a++)r=l[a],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)r=l[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}var d=a.createContext({}),p=function(t){var e=a.useContext(d),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},u=function(t){var e=p(t.components);return a.createElement(d.Provider,{value:e},t.children)},m="mdxType",s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(t,e){var r=t.components,n=t.mdxType,l=t.originalType,d=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),m=p(r),g=n,c=m["".concat(d,".").concat(g)]||m[g]||s[g]||l;return r?a.createElement(c,i(i({ref:e},u),{},{components:r})):a.createElement(c,i({ref:e},u))}));function c(t,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=r.length,i=new Array(l);i[0]=g;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o[m]="string"==typeof t?t:n,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},21863:(t,e,r)=>{r.d(e,{ZP:()=>o});var a=r(48041),n=(r(49231),r(54852));const l={toc:[]},i="wrapper";function o(t){let{components:e,...r}=t;return(0,n.kt)(i,(0,a.Z)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Field"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"addr"),(0,n.kt)("td",{parentName:"tr",align:null},"HexString"),(0,n.kt)("td",{parentName:"tr",align:null},"Address of the aggregator resource.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"name"),(0,n.kt)("td",{parentName:"tr",align:null},"u8[]"),(0,n.kt)("td",{parentName:"tr",align:null},"Name of the aggregator to store on-chain.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"metadata"),(0,n.kt)("td",{parentName:"tr",align:null},"u8[]"),(0,n.kt)("td",{parentName:"tr",align:null},"Metadata of the aggregator to store on-chain.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"queueAddr"),(0,n.kt)("td",{parentName:"tr",align:null},"HexString"),(0,n.kt)("td",{parentName:"tr",align:null},"Address of the oracle queue that the resource belongs to.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"crankAddr"),(0,n.kt)("td",{parentName:"tr",align:null},"HexString"),(0,n.kt)("td",{parentName:"tr",align:null},"Optional, address of the crank that will periodically trigger ",(0,n.kt)("inlineCode",{parentName:"td"},"AggregatorOpenRound")," calls to request an update from a batch of oracles.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"batchSize"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of oracles assigned to an update request.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"minOracleResults"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Minimum number of oracle responses required before a round is validated.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"minJobResults"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Minimum number of job results before an oracle accepts a result.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"minUpdateDelaySeconds"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Minimum number of seconds required between aggregator rounds.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"startAfter"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Unix timestamp when open round calls will be considered valid.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"varianceThreshold"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/aptos/idl/types/SwitchboardDecimal"},"SwitchboardDecimal")),(0,n.kt)("td",{parentName:"tr",align:null},"Change percentage required between a previous round and the current round. If variance percentage is not met, reject new oracle responses.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"forceReportPeriod"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"expiration"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Timestamp when the feed is no longer needed.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"disableCrank"),(0,n.kt)("td",{parentName:"tr",align:null},"bool"),(0,n.kt)("td",{parentName:"tr",align:null},"Flag dictating whether pushing to a crank is disabled.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"historyLimit"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"The maximum number of historical samples that will be stored with the aggregator before being overwritten in a round-robin fashion.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"readCharge"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"The cost to read a data feed.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"rewardEscrow"),(0,n.kt)("td",{parentName:"tr",align:null},"HexString"),(0,n.kt)("td",{parentName:"tr",align:null},"The account address that will receive any funds incurred from setting a ",(0,n.kt)("inlineCode",{parentName:"td"},"readCharge"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"readWhitelist"),(0,n.kt)("td",{parentName:"tr",align:null},"HexString[]"),(0,n.kt)("td",{parentName:"tr",align:null},"Optional, account addresses permitted to read a data feed.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"limitReadsToWhitelist"),(0,n.kt)("td",{parentName:"tr",align:null},"bool"),(0,n.kt)("td",{parentName:"tr",align:null},"Flag dictating whether a feed permits public reads.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"authority"),(0,n.kt)("td",{parentName:"tr",align:null},"HexString"),(0,n.kt)("td",{parentName:"tr",align:null},"The account delegated as the authority for making changes.")))))}o.isMDXComponent=!0},74867:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var a=r(48041),n=(r(49231),r(54852)),l=r(21863);const i={},o=void 0,d={unversionedId:"aptos/idl/scripts/AggregatorInit",id:"aptos/idl/scripts/AggregatorInit",title:"AggregatorInit",description:"parameters for script $::run",source:"@site/docs/aptos/idl/scripts/AggregatorInit.mdx",sourceDirName:"aptos/idl/scripts",slug:"/aptos/idl/scripts/AggregatorInit",permalink:"/aptos/idl/scripts/AggregatorInit",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"aptos",previous:{title:"AggregatorAddJob",permalink:"/aptos/idl/scripts/AggregatorAddJob"},next:{title:"AggregatorLock",permalink:"/aptos/idl/scripts/AggregatorLock"}},p={},u=[],m={toc:u},s="wrapper";function g(t){let{components:e,...r}=t;return(0,n.kt)(s,(0,a.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"parameters for script ",(0,n.kt)("inlineCode",{parentName:"p"},"${SWITCHBOARD_PROGRAM_ID}::aggregator_init_action::run")),(0,n.kt)(l.ZP,{mdxType:"AggregatorConfigParams"}))}g.isMDXComponent=!0}}]);