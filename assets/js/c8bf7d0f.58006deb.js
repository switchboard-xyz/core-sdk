"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9427],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>v});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function g(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=r.createContext({}),l=function(e){var a=r.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):g(g({},a),e)),t},u=function(e){var a=l(e.components);return r.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},c=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=l(t),v=n,d=c["".concat(s,".").concat(v)]||c[v]||p[v]||o;return t?r.createElement(d,g(g({ref:a},u),{},{components:t})):r.createElement(d,g({ref:a},u))}));function v(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,g=new Array(o);g[0]=c;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,g[1]=i;for(var l=2;l<o;l++)g[l]=t[l];return r.createElement.apply(null,g)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7580:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>u,contentTitle:()=>s,default:()=>v,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(7462),n=(t(7294),t(3905));const o={toc:[{value:"<code>sbv2 aggregator add crank [CRANKKEY] [AGGREGATORKEY]</code>",id:"sbv2-aggregator-add-crank-crankkey-aggregatorkey",level:2},{value:"<code>sbv2 aggregator add history [AGGREGATORKEY] [SIZE]</code>",id:"sbv2-aggregator-add-history-aggregatorkey-size",level:2},{value:"<code>sbv2 aggregator add job [AGGREGATORKEY]</code>",id:"sbv2-aggregator-add-job-aggregatorkey",level:2},{value:"<code>sbv2 aggregator create [QUEUEKEY]</code>",id:"sbv2-aggregator-create-queuekey",level:2},{value:"<code>sbv2 aggregator create copy [AGGREGATORSOURCE]</code>",id:"sbv2-aggregator-create-copy-aggregatorsource",level:2},{value:"<code>sbv2 aggregator create json [DEFINITIONFILE]</code>",id:"sbv2-aggregator-create-json-definitionfile",level:2},{value:"<code>sbv2 aggregator history print [AGGREGATORKEY]</code>",id:"sbv2-aggregator-history-print-aggregatorkey",level:2},{value:"<code>sbv2 aggregator lease create [AGGREGATORKEY]</code>",id:"sbv2-aggregator-lease-create-aggregatorkey",level:2},{value:"<code>sbv2 aggregator lease extend [AGGREGATORKEY]</code>",id:"sbv2-aggregator-lease-extend-aggregatorkey",level:2},{value:"<code>sbv2 aggregator lease print [AGGREGATORKEY]</code>",id:"sbv2-aggregator-lease-print-aggregatorkey",level:2},{value:"<code>sbv2 aggregator lease withdraw [AGGREGATORKEY]</code>",id:"sbv2-aggregator-lease-withdraw-aggregatorkey",level:2},{value:"<code>sbv2 aggregator lock [AGGREGATORKEY]</code>",id:"sbv2-aggregator-lock-aggregatorkey",level:2},{value:"<code>sbv2 aggregator permission create [AGGREGATORKEY]</code>",id:"sbv2-aggregator-permission-create-aggregatorkey",level:2},{value:"<code>sbv2 aggregator permission print [AGGREGATORKEY]</code>",id:"sbv2-aggregator-permission-print-aggregatorkey",level:2},{value:"<code>sbv2 aggregator print [AGGREGATORKEY]</code>",id:"sbv2-aggregator-print-aggregatorkey",level:2},{value:"<code>sbv2 aggregator print history [AGGREGATORKEY]</code>",id:"sbv2-aggregator-print-history-aggregatorkey",level:2},{value:"<code>sbv2 aggregator print lease [AGGREGATORKEY]</code>",id:"sbv2-aggregator-print-lease-aggregatorkey",level:2},{value:"<code>sbv2 aggregator print permission [AGGREGATORKEY]</code>",id:"sbv2-aggregator-print-permission-aggregatorkey",level:2},{value:"<code>sbv2 aggregator remove job [AGGREGATORKEY] [JOBKEY]</code>",id:"sbv2-aggregator-remove-job-aggregatorkey-jobkey",level:2},{value:"<code>sbv2 aggregator save history [AGGREGATORKEY]</code>",id:"sbv2-aggregator-save-history-aggregatorkey",level:2},{value:"<code>sbv2 aggregator set [AGGREGATORKEY]</code>",id:"sbv2-aggregator-set-aggregatorkey",level:2},{value:"<code>sbv2 aggregator set authority [AGGREGATORKEY] [NEWAUTHORITY]</code>",id:"sbv2-aggregator-set-authority-aggregatorkey-newauthority",level:2},{value:"<code>sbv2 aggregator set batchSize [AGGREGATORKEY] BATCHSIZE</code>",id:"sbv2-aggregator-set-batchsize-aggregatorkey-batchsize",level:2},{value:"<code>sbv2 aggregator set forceReport [AGGREGATORKEY] [FORCEREPORTPERIOD]</code>",id:"sbv2-aggregator-set-forcereport-aggregatorkey-forcereportperiod",level:2},{value:"<code>sbv2 aggregator set forceReportPeriod [AGGREGATORKEY] [FORCEREPORTPERIOD]</code>",id:"sbv2-aggregator-set-forcereportperiod-aggregatorkey-forcereportperiod",level:2},{value:"<code>sbv2 aggregator set history [AGGREGATORKEY] [SIZE]</code>",id:"sbv2-aggregator-set-history-aggregatorkey-size",level:2},{value:"<code>sbv2 aggregator set minJobs [AGGREGATORKEY] [MINJOBRESULTS]</code>",id:"sbv2-aggregator-set-minjobs-aggregatorkey-minjobresults",level:2},{value:"<code>sbv2 aggregator set minOracles [AGGREGATORKEY] [MINORACLERESULTS]</code>",id:"sbv2-aggregator-set-minoracles-aggregatorkey-minoracleresults",level:2},{value:"<code>sbv2 aggregator set queue [AGGREGATORKEY] [QUEUEKEY]</code>",id:"sbv2-aggregator-set-queue-aggregatorkey-queuekey",level:2},{value:"<code>sbv2 aggregator set updateInterval [AGGREGATORKEY] [UPDATEINTERVAL]</code>",id:"sbv2-aggregator-set-updateinterval-aggregatorkey-updateinterval",level:2},{value:"<code>sbv2 aggregator set variance [AGGREGATORKEY] [VARIANCETHRESHOLD]</code>",id:"sbv2-aggregator-set-variance-aggregatorkey-variancethreshold",level:2},{value:"<code>sbv2 aggregator set varianceThreshold [AGGREGATORKEY] [VARIANCETHRESHOLD]</code>",id:"sbv2-aggregator-set-variancethreshold-aggregatorkey-variancethreshold",level:2},{value:"<code>sbv2 aggregator update [AGGREGATORKEY]</code>",id:"sbv2-aggregator-update-aggregatorkey",level:2},{value:"<code>sbv2 aggregator watch [AGGREGATORKEY]</code>",id:"sbv2-aggregator-watch-aggregatorkey",level:2}]};function g(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},o,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"interact with a switchboard aggregator account"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-add-crank-crankkey-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator add crank [CRANKKEY] [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-add-history-aggregatorkey-size"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator add history [AGGREGATORKEY] [SIZE]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-add-job-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator add job [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-create-queuekey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator create [QUEUEKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-create-copy-aggregatorsource"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator create copy [AGGREGATORSOURCE]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-create-json-definitionfile"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator create json [DEFINITIONFILE]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-history-print-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator history print [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-lease-create-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator lease create [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-lease-extend-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator lease extend [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-lease-print-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator lease print [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-lease-withdraw-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator lease withdraw [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-lock-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator lock [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-permission-create-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator permission create [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-permission-print-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator permission print [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-print-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator print [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-print-history-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator print history [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-print-lease-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator print lease [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-print-permission-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator print permission [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-remove-job-aggregatorkey-jobkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator remove job [AGGREGATORKEY] [JOBKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-save-history-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator save history [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-authority-aggregatorkey-newauthority"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set authority [AGGREGATORKEY] [NEWAUTHORITY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-batchsize-aggregatorkey-batchsize"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set batchSize [AGGREGATORKEY] BATCHSIZE"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-forcereport-aggregatorkey-forcereportperiod"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set forceReport [AGGREGATORKEY] [FORCEREPORTPERIOD]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-forcereportperiod-aggregatorkey-forcereportperiod"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set forceReportPeriod [AGGREGATORKEY] [FORCEREPORTPERIOD]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-history-aggregatorkey-size"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set history [AGGREGATORKEY] [SIZE]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-minjobs-aggregatorkey-minjobresults"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set minJobs [AGGREGATORKEY] [MINJOBRESULTS]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-minoracles-aggregatorkey-minoracleresults"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set minOracles [AGGREGATORKEY] [MINORACLERESULTS]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-queue-aggregatorkey-queuekey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set queue [AGGREGATORKEY] [QUEUEKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-updateinterval-aggregatorkey-updateinterval"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set updateInterval [AGGREGATORKEY] [UPDATEINTERVAL]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-variance-aggregatorkey-variancethreshold"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set variance [AGGREGATORKEY] [VARIANCETHRESHOLD]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-set-variancethreshold-aggregatorkey-variancethreshold"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator set varianceThreshold [AGGREGATORKEY] [VARIANCETHRESHOLD]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-update-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator update [AGGREGATORKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-aggregator-watch-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 aggregator watch [AGGREGATORKEY]")))),(0,n.kt)("h2",{id:"sbv2-aggregator-add-crank-crankkey-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator add crank [CRANKKEY] [AGGREGATORKEY]")),(0,n.kt)("p",null,"push an aggregator onto a crank"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator add crank [CRANKKEY] [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>]\n\nARGUMENTS\n  CRANKKEY       public key of the crank\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  push an aggregator onto a crank\n\nALIASES\n  $ sbv2 aggregator add crank\n  $ sbv2 crank add aggregator\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-add-history-aggregatorkey-size"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator add history [AGGREGATORKEY] [SIZE]")),(0,n.kt)("p",null,"set an aggregator's history buffer account to record the last N accepted results"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator add history [AGGREGATORKEY] [SIZE] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to add to a crank\n  SIZE           size of history buffer\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's history buffer account to record the last N accepted results\n\nALIASES\n  $ sbv2 aggregator add history\n\nEXAMPLES\n  $ sbv2 aggregator:set:history GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 10000 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-add-job-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator add job [AGGREGATORKEY]")),(0,n.kt)("p",null,"add a job to an aggregator"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator add job [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--jobDefinition <value> | --jobKey <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --jobDefinition=<value>  filesystem path of job json definition file\n  --jobKey=<value>         public key of an existing job account to add to an aggregator\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  add a job to an aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:add:job\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-create-queuekey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator create [QUEUEKEY]")),(0,n.kt)("p",null,"create an aggregator account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator create [QUEUEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>] [-a\n    <value>] [--crankKey <value>] [--enable] [--queueAuthority <value>] [-n <value>] [--forceReportPeriod <value>]\n    [--batchSize <value>] [--minJobs <value>] [--minOracles <value>] [--updateInterval <value>] [--varianceThreshold\n    <value>] [-j <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account to create aggregator for\n\nFLAGS\n  -a, --authority=<value>      alternate keypair that is the authority for the aggregator\n  -j, --job=<value>...         filesystem path to job definition file\n  -k, --keypair=<value>        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n  -n, --name=<value>           name of the aggregator\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          number of oracles requested for each open round call\n  --crankKey=<value>           public key of the crank to join\n  --enable                     set permissions to PERMIT_ORACLE_QUEUE_USAGE\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --programId=<value>          alternative Switchboard program ID to interact with\n  --queueAuthority=<value>     alternative keypair to use for queue authority\n  --updateInterval=<value>     set an aggregator's minimum update delay\n  --varianceThreshold=<value>  percentage change between a previous accepted result and the next round before an oracle\n                               reports a value on-chain. Used to conserve lease cost during low volatility\n\nDESCRIPTION\n  create an aggregator account\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-create-copy-aggregatorsource"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator create copy [AGGREGATORSOURCE]")),(0,n.kt)("p",null,"copy an aggregator account to a new oracle queue"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator create copy [AGGREGATORSOURCE] --queueKey <value> [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>] [-a <value>] [--minOracles <value>] [--batchSize <value>] [--minJobs <value>]\n    [--minUpdateDelay <value>] [--forceReportPeriod <value>] [--varianceThreshold <value>] [--crankKey <value>]\n    [--enable] [--queueAuthority <value>] [--copyJobs]\n\nARGUMENTS\n  AGGREGATORSOURCE  public key of the aggregator account to copy\n\nFLAGS\n  -a, --authority=<value>      alternate keypair that will be the aggregator authority\n  -k, --keypair=<value>        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          override source aggregator's oracleRequestBatchSize\n  --copyJobs                   create copy of job accounts instead of referincing existing job account\n  --crankKey=<value>           public key of the crank to push aggregator to\n  --enable                     set permissions to PERMIT_ORACLE_QUEUE_USAGE\n  --forceReportPeriod=<value>  override source aggregator's forceReportPeriod\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n  --minJobs=<value>            override source aggregator's minJobResults\n  --minOracles=<value>         override source aggregator's minOracleResults\n  --minUpdateDelay=<value>     override source aggregator's minUpdateDelaySeconds\n  --programId=<value>          alternative Switchboard program ID to interact with\n  --queueAuthority=<value>     alternative keypair to use for queue authority\n  --queueKey=<value>           (required) public key of the queue to create aggregator for\n  --varianceThreshold=<value>  override source aggregator's varianceThreshold\n\nDESCRIPTION\n  copy an aggregator account to a new oracle queue\n\nEXAMPLES\n  $ sbv2 aggregator:create:copy GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --queueKey 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json\n\n  $ sbv2 aggregator:create:copy GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --queueKey 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json --sourceCluster mainnet-beta\n\n  $ sbv2 aggregator:create:copy FcSmdsdWks75YdyCGegRqXdt5BiNGQKxZywyzb8ckD7D --queueKey 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json --sourceCluster mainnet-beta\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-create-json-definitionfile"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator create json [DEFINITIONFILE]")),(0,n.kt)("p",null,"create an aggregator from a json file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator create json [DEFINITIONFILE] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [-q <value>] [-a <value>]\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of queue definition json file\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -q, --queueKey=<value>   public key of the oracle queue to create aggregator for\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create an aggregator from a json file\n\nALIASES\n  $ sbv2 json create aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:create:json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-history-print-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator history print [AGGREGATORKEY]")),(0,n.kt)("p",null,"Print the history buffer associated with an aggregator account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator history print [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n  <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the history buffer associated with an aggregator account\n\nALIASES\n  $ sbv2 aggregator history print\n  $ sbv2 aggregator print history\n\nEXAMPLES\n  $ sbv2 aggregator:print:history 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-lease-create-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator lease create [AGGREGATORKEY]")),(0,n.kt)("p",null,"fund and re-enable an aggregator lease"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator lease create [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--amount <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       token amount to load into the lease escrow. If decimals provided, amount will be normalized to\n                         raw tokenAmount\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 aggregator lease create\n\nEXAMPLES\n  $ sbv2 lease:create GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.5 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-lease-extend-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator lease extend [AGGREGATORKEY]")),(0,n.kt)("p",null,"fund and re-enable an aggregator lease"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator lease extend [AGGREGATORKEY] --amount <value> [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) token amount to load into the lease escrow. If decimals provided, amount will be\n                         normalized to raw tokenAmount\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 aggregator lease extend\n\nEXAMPLES\n  $ sbv2 aggregator:lease:extend GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-lease-print-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator lease print [AGGREGATORKEY]")),(0,n.kt)("p",null,"Print the lease account associated with a Switchboard aggregator account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator lease print [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n  <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the lease account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 aggregator lease print\n  $ sbv2 aggregator print lease\n\nEXAMPLES\n  $ sbv2 aggregator:lease:print 8SXvChNYFhRq4EZuZvnhjrB3jJRQCv4k3P4W6hesH3Ee\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-lease-withdraw-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator lease withdraw [AGGREGATORKEY]")),(0,n.kt)("p",null,"withdraw funds from an aggregator lease"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator lease withdraw [AGGREGATORKEY] --amount <value> [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>] [--withdrawAddress <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -a, --authority=<value>    keypair delegated as the authority for managing the oracle account\n  -k, --keypair=<value>      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n  -s, --silent               suppress cli prompts\n  -u, --rpcUrl=<value>       alternate RPC url\n  -v, --verbose              log everything\n  --amount=<value>           (required) token amount to withdraw from lease account. If decimals provided, amount will\n                             be normalized to raw tokenAmount\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n  --programId=<value>        alternative Switchboard program ID to interact with\n  --withdrawAddress=<value>  tokenAccount to withdraw to. If not provided, payer associated token account will be used\n\nDESCRIPTION\n  withdraw funds from an aggregator lease\n\nALIASES\n  $ sbv2 aggregator lease withdraw\n\nEXAMPLES\n  $ sbv2 aggregator:lease:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-lock-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator lock [AGGREGATORKEY]")),(0,n.kt)("p",null,"lock an aggregator's configuration and prevent further changes"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator lock [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  lock an aggregator's configuration and prevent further changes\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-permission-create-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator permission create [AGGREGATORKEY]")),(0,n.kt)("p",null,"create a permission account for an aggregator"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator permission create [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n  <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a permission account for an aggregator\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-permission-print-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator permission print [AGGREGATORKEY]")),(0,n.kt)("p",null,"Print the permission account associated with a Switchboard aggregator account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator permission print [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n  <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 aggregator permission print\n  $ sbv2 aggregator print permission\n\nEXAMPLES\n  $ sbv2 aggregator:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-print-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator print [AGGREGATORKEY]")),(0,n.kt)("p",null,"Print the deserialized Switchboard aggregator account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator print [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--json] [--jobs] [-o]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -o, --oraclePubkeysData  print the assigned oracles for the current round\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --jobs                   output job definitions\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print the deserialized Switchboard aggregator account\n\nALIASES\n  $ sbv2 aggregator print\n\nEXAMPLES\n  $ sbv2 aggregator:print GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-print-history-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator print history [AGGREGATORKEY]")),(0,n.kt)("p",null,"Print the history buffer associated with an aggregator account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator print history [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n  <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the history buffer associated with an aggregator account\n\nALIASES\n  $ sbv2 aggregator history print\n  $ sbv2 aggregator print history\n\nEXAMPLES\n  $ sbv2 aggregator:print:history 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-print-lease-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator print lease [AGGREGATORKEY]")),(0,n.kt)("p",null,"Print the lease account associated with a Switchboard aggregator account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator print lease [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n  <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the lease account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 aggregator lease print\n  $ sbv2 aggregator print lease\n\nEXAMPLES\n  $ sbv2 aggregator:lease:print 8SXvChNYFhRq4EZuZvnhjrB3jJRQCv4k3P4W6hesH3Ee\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-print-permission-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator print permission [AGGREGATORKEY]")),(0,n.kt)("p",null,"Print the permission account associated with a Switchboard aggregator account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator print permission [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n  <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 aggregator permission print\n  $ sbv2 aggregator print permission\n\nEXAMPLES\n  $ sbv2 aggregator:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-remove-job-aggregatorkey-jobkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator remove job [AGGREGATORKEY] [JOBKEY]")),(0,n.kt)("p",null,"remove a switchboard job account from an aggregator"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator remove job [AGGREGATORKEY] [JOBKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  JOBKEY         public key of an existing job account to remove from an aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  remove a switchboard job account from an aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:remove:job\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-save-history-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator save history [AGGREGATORKEY]")),(0,n.kt)("p",null,"request a new aggregator result from a set of oracles"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator save history [AGGREGATORKEY] -f <value> [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>] [--force] [--json] [--csv]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -f, --outputFile=<value>  (required) output file to save aggregator pubkeys to\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --csv                     output aggregator accounts in csv format\n  --force                   overwrite output file if exists\n  --json                    output aggregator accounts in json format\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new aggregator result from a set of oracles\n\nEXAMPLES\n  $ sbv2 aggregator:save:history --outputFile ../aggregator-history.json --csv\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set [AGGREGATORKEY]")),(0,n.kt)("p",null,"set an aggregator's config"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [-a <value>] [--forceReportPeriod <value>] [--minJobs <value>] [--minOracles <value>] [--newQueue <value>]\n    [--updateInterval <value>] [--varianceThreshold <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -a, --authority=<value>      alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --newQueue=<value>           public key of the new oracle queue\n  --programId=<value>          alternative Switchboard program ID to interact with\n  --updateInterval=<value>     set an aggregator's minimum update delay\n  --varianceThreshold=<value>  percentage change between a previous accepted result and the next round before an oracle\n                               reports a value on-chain. Used to conserve lease cost during low volatility\n\nDESCRIPTION\n  set an aggregator's config\n\nALIASES\n  $ sbv2 set aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:set GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --updateInterval 300 --minOracles 3 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-authority-aggregatorkey-newauthority"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set authority [AGGREGATORKEY] [NEWAUTHORITY]")),(0,n.kt)("p",null,"set an aggregator's authority"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set authority [AGGREGATORKEY] [NEWAUTHORITY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  NEWAUTHORITY   keypair path of new authority\n\nFLAGS\n  -a, --currentAuthority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's authority\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-batchsize-aggregatorkey-batchsize"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set batchSize [AGGREGATORKEY] BATCHSIZE")),(0,n.kt)("p",null,"set an aggregator's batch size"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set batchSize [AGGREGATORKEY] [BATCHSIZE] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  BATCHSIZE      number of oracles requested for each open round call\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's batch size\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-forcereport-aggregatorkey-forcereportperiod"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set forceReport [AGGREGATORKEY] [FORCEREPORTPERIOD]")),(0,n.kt)("p",null,"set an aggregator's force report period"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set forceReport [AGGREGATORKEY] [FORCEREPORTPERIOD] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY      public key of the aggregator\n  FORCEREPORTPERIOD  Number of seconds for which, even if the variance threshold is not passed, accept new responses\n                     from oracles.\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's force report period\n\nALIASES\n  $ sbv2 aggregator set forceReport\n\nEXAMPLES\n  $ sbv2 aggregator:set:forceReportPeriod GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 300 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-forcereportperiod-aggregatorkey-forcereportperiod"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set forceReportPeriod [AGGREGATORKEY] [FORCEREPORTPERIOD]")),(0,n.kt)("p",null,"set an aggregator's force report period"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set forceReportPeriod [AGGREGATORKEY] [FORCEREPORTPERIOD] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY      public key of the aggregator\n  FORCEREPORTPERIOD  Number of seconds for which, even if the variance threshold is not passed, accept new responses\n                     from oracles.\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's force report period\n\nALIASES\n  $ sbv2 aggregator set forceReport\n\nEXAMPLES\n  $ sbv2 aggregator:set:forceReportPeriod GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 300 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-history-aggregatorkey-size"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set history [AGGREGATORKEY] [SIZE]")),(0,n.kt)("p",null,"set an aggregator's history buffer account to record the last N accepted results"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set history [AGGREGATORKEY] [SIZE] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to add to a crank\n  SIZE           size of history buffer\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's history buffer account to record the last N accepted results\n\nALIASES\n  $ sbv2 aggregator add history\n\nEXAMPLES\n  $ sbv2 aggregator:set:history GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 10000 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-minjobs-aggregatorkey-minjobresults"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set minJobs [AGGREGATORKEY] [MINJOBRESULTS]")),(0,n.kt)("p",null,"set an aggregator's minimum number of jobs before an oracle responds"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set minJobs [AGGREGATORKEY] [MINJOBRESULTS] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  MINJOBRESULTS  number of jobs that must respond before an oracle responds\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's minimum number of jobs before an oracle responds\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-minoracles-aggregatorkey-minoracleresults"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set minOracles [AGGREGATORKEY] [MINORACLERESULTS]")),(0,n.kt)("p",null,"set an aggregator's minimum number of oracles that must respond before a result is accepted on-chain"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set minOracles [AGGREGATORKEY] [MINORACLERESULTS] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY     public key of the aggregator account\n  MINORACLERESULTS  number of oracles that must respond before a value is accepted on-chain\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's minimum number of oracles that must respond before a result is accepted on-chain\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-queue-aggregatorkey-queuekey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set queue [AGGREGATORKEY] [QUEUEKEY]")),(0,n.kt)("p",null,"set an aggregator's oracle queue"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set queue [AGGREGATORKEY] [QUEUEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator\n  QUEUEKEY       public key of the oracle queue\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's oracle queue\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-updateinterval-aggregatorkey-updateinterval"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set updateInterval [AGGREGATORKEY] [UPDATEINTERVAL]")),(0,n.kt)("p",null,"set an aggregator's minimum update delay"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set updateInterval [AGGREGATORKEY] [UPDATEINTERVAL] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY   public key of the aggregator account\n  UPDATEINTERVAL  set an aggregator's minimum update delay\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's minimum update delay\n\nEXAMPLES\n  $ sbv2 aggregator:set:updateInterval GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 60 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-variance-aggregatorkey-variancethreshold"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set variance [AGGREGATORKEY] [VARIANCETHRESHOLD]")),(0,n.kt)("p",null,"set an aggregator's variance threshold"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set variance [AGGREGATORKEY] [VARIANCETHRESHOLD] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY      public key of the aggregator\n  VARIANCETHRESHOLD  percentage change between a previous accepted result and the next round before an oracle reports a\n                     value on-chain. Used to conserve lease cost during low volatility\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's variance threshold\n\nALIASES\n  $ sbv2 aggregator set variance\n\nEXAMPLES\n  $ sbv2 aggregator:set:varianceThreshold GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 0.1 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-set-variancethreshold-aggregatorkey-variancethreshold"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator set varianceThreshold [AGGREGATORKEY] [VARIANCETHRESHOLD]")),(0,n.kt)("p",null,"set an aggregator's variance threshold"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator set varianceThreshold [AGGREGATORKEY] [VARIANCETHRESHOLD] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY      public key of the aggregator\n  VARIANCETHRESHOLD  percentage change between a previous accepted result and the next round before an oracle reports a\n                     value on-chain. Used to conserve lease cost during low volatility\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's variance threshold\n\nALIASES\n  $ sbv2 aggregator set variance\n\nEXAMPLES\n  $ sbv2 aggregator:set:varianceThreshold GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 0.1 --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-update-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator update [AGGREGATORKEY]")),(0,n.kt)("p",null,"request a new aggregator result from a set of oracles"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator update [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new aggregator result from a set of oracles\n\nEXAMPLES\n  $ sbv2 aggregator:update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-aggregator-watch-aggregatorkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 aggregator watch [AGGREGATORKEY]")),(0,n.kt)("p",null,"watch an aggregator for a new value"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aggregator watch [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch an aggregator for a new value\n\nALIASES\n  $ sbv2 aggregator watch\n\nEXAMPLES\n  $ sbv2 watch:aggregator J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa\n")))}g.isMDXComponent=!0;const i={sidebar_position:20,title:"sbv2 aggregator"},s=void 0,l={unversionedId:"cli/aggregator",id:"cli/aggregator",title:"sbv2 aggregator",description:"",source:"@site/api/cli/aggregator.mdx",sourceDirName:"cli",slug:"/cli/aggregator",permalink:"/sbv2-core/api/cli/aggregator",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"sbv2 aggregator"},sidebar:"tutorialSidebar",previous:{title:"sbv2 job",permalink:"/sbv2-core/api/cli/job"},next:{title:"sbv2 lease",permalink:"/sbv2-core/api/cli/lease"}},u={},p=[],c={toc:p};function v(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)(g,{mdxType:"Sbv2Aggregator"}))}v.isMDXComponent=!0}}]);