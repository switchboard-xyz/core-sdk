"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9462],{54852:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(49231);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},70651:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(49231),r=a(19841);const o={tabItem:"tabItem_cjqz"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},t)}},54405:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(95634),r=a(49231),o=a(19841),l=a(93682),i=a(17096),s=a(80852);const c={tabList:"tabList_URvL",tabItem:"tabItem_e5E2"};function u(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),m=e=>{const t=e.currentTarget,a=d.indexOf(t),n=u[a].value;n!==i&&(p(t),s(n))},h=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:h,onClick:m},l,{className:(0,o.Z)("tabs__item",c.tabItem,l?.className,{"tabs__item--active":i===t})}),a??t)})))}function d(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function p(e){const t=(0,i.Y)(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",c.tabList)},r.createElement(u,(0,n.Z)({},e,t)),r.createElement(d,(0,n.Z)({},e,t)))}function m(e){const t=(0,s.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},17096:(e,t,a)=>{a.d(t,{Y:()=>p});var n=a(49231),r=a(19409),o=a(18948),l=a(79862),i=a(42150);function s(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function c(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??s(a);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function u(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const l=(0,r.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o._X)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(l.location.search);t.set(i,e),l.replace({...l.location,search:t.toString()})}),[i,l])]}function p(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,o=c(e),[l,s]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[p,m]=d({queryString:a,groupId:r}),[h,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,i.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:r}),b=(()=>{const e=p??h;return u({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),m(e),g(e)}),[m,g,o]),tabValues:o}}},41436:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(95634),r=(a(49231),a(54852));a(54405),a(70651);const o={sidebar_position:10,hide_table_of_contents:!0,title:"Developer Resources",keywords:["EVM","EVM SDK"]},l=void 0,i={unversionedId:"evm/dev",id:"evm/dev",title:"Developer Resources",description:"| Language   | SDK                                                                                                                                                                        |",source:"@site/docs/evm/dev.mdx",sourceDirName:"evm",slug:"/evm/dev",permalink:"/evm/dev",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,hide_table_of_contents:!0,title:"Developer Resources",keywords:["EVM","EVM SDK"]},sidebar:"gettingStartedSidebar",previous:{title:"Switchboard x Arbitrum",permalink:"/evm/arbitrum"},next:{title:"ISwitchboard.sol",permalink:"/evm/ISwitchboard"}},s={},c=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Load Switchboard Program",id:"load-switchboard-program",level:3},{value:"Transactions",id:"transactions",level:3},{value:"Create a Queue",id:"create-a-queue",level:3},{value:"Add an Oracle",id:"add-an-oracle",level:3},{value:"Create a Job on IPFS",id:"create-a-job-on-ipfs",level:3},{value:"Create a Data Feed",id:"create-a-data-feed",level:3},{value:"Read a Data Feed",id:"read-a-data-feed",level:3},{value:"Watch Data Feed",id:"watch-data-feed",level:3}],u={toc:c},d="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Language"),(0,r.kt)("th",{parentName:"tr",align:null},"SDK"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Javascript"),(0,r.kt)("td",{parentName:"tr",align:null},"The npm package ",(0,r.kt)("a",{parentName:"td",href:"/api/evm.js"},"@switchboard-xyz/evm.js")," can be used to build and manage Switchboard accounts on EVM based chains.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Rust"),(0,r.kt)("td",{parentName:"tr",align:null},"The rust crate ",(0,r.kt)("a",{parentName:"td",href:"https://crates.io/crates/switchboard-evm"},"switchboard-evm")," can be used on-chain and off-chain.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CLI"),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("a",{parentName:"td",href:"/api/cli"},"Switchboard CLI")," can be used to help debug your Switchboard deployments with a command line interface or be used in automation scripts for custom alerting.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Solidity"),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("a",{parentName:"td",href:"/evm/ISwitchboard"},"ISwitchboard.sol")," Solidity interface can be used to read a Switchboard data feed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Solidity"),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("a",{parentName:"td",href:"/evm/ILegacyOracle"},"ILegacyOracle.sol")," Solidity interface can be used to read a Switchboard data feed using a legacy oracle adapter.")))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@switchboard-xyz/evm.js"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/package-json/v/switchboard-xyz/evm-sdk?color=red&filename=javascript%2Fevm.js%2Fpackage.json&label=%40switchboard-xyz%2Fevm.js&logo=npm",alt:"NPM Badge"}))),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @switchboard-xyz/evm.js\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Directory")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#load-switchboard-program"},"Load Switchboard Program")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#transactions"},"Transactions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-queue"},"Create a Queue")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#add-an-oracle"},"Add an Oracle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-job-on-ipfs"},"Create a Job on IPFS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-data-feed"},"Create a Data Feed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#read-a-data-feed"},"Read a Data Feed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#watch-data-feed"},"Watch Data Feed"))),(0,r.kt)("h3",{id:"load-switchboard-program"},"Load Switchboard Program"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import ethers from "ethers";\nimport { SwitchboardProgram } from "@switchboard-xyz/evm.js";\n\n// Instantiate SwitchboardProgram\nconst signer = new ethers.Wallet(privateKey);\nconst switchboardProgram = await SwitchboardProgram.load(\n  signer, // Signer instance\n  "0x73d6C66874e570f058834cAA666b2c352F1C792D" // Switchboard contract address\n);\n\n// Send a transaction to Switchboard\nconst tx = await switchboard.sendSbTxn("createOracleQueue", [\n  name,\n  authority,\n  unpermissionedFeedsEnabled,\n  maxSize,\n  reward,\n  oracleTimeout,\n]);\n\n// Fetch all aggregator data for a given authority\nconst authority = "0xabc123..."; // the public key of the authority\nconst aggregatorData = await switchboardProgram.fetchAggregators(authority);\n\n// Connect a new signer to SwitchboardProgram\nconst newSigner = new ethers.Wallet(newPrivateKey);\nconst newSwitchboardProgram = switchboardProgram.connect(newSigner);\n')),(0,r.kt)("h3",{id:"transactions"},"Transactions"),(0,r.kt)("p",null,"Most SDK methods have an optional TransactionOptions parameter to provide\noverrides."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Most methods have an optional TransactionOptions parameter to provide overrides and an optional new signer\nconst txOptions: TransactionOptions = {\n  // an optional multiplier to modify the gasEstimation\n  gasFactor: 1.1,\n  // simulate the tx before sending\n  simulate: true,\n  // the new msg.sender for the tx\n  signer: myNewSigner,\n  // it also supports any fields from ethers PayableOverrides\n  gasLimit: 3000000,\n  gasPrice: 10000,\n  maxFeePerGas: 10000,\n  maxPriorityFeePerGas: 1000,\n  nonce: 1337,\n};\n\n// Send a transaction to the Switchboard.sol contract\nconst tx = await switchboardProgram.sendSbTxn(\n  "methodName",\n  [...args],\n  // optional txnOptions\n  txOptions\n);\n\n// Send a transaction to the SwitchboardAttestationService.sol contract\nconst tx = await switchboardProgram.sendVsTxn(\n  "methodName",\n  [...args],\n  // optional txnOptions\n  txOptions\n);\n')),(0,r.kt)("h3",{id:"create-a-queue"},"Create a Queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { OracleQueueAccount } from "@switchboard-xyz/evm.js";\n\nconst [oracleQueueAccount, tx] = await OracleQueueAccount.create(\n  switchboardProgram,\n  {\n    authority: "0xMyAuthority",\n    name: "my queue",\n    oracleTimeout: 3600,\n    reward: 10000000,\n    unpermissionedFeedsEnabled: true,\n    maxSize: 100,\n  }\n);\nconst oracleQueue = await oracleQueueAccount.loadData();\n')),(0,r.kt)("h3",{id:"add-an-oracle"},"Add an Oracle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { OracleQueueAccount } from "@switchboard-xyz/evm.js";\n\nconst oracleQueueAccount = new OracleQueueAccount(\n  switchboardProgram,\n  queueAddress\n);\n\nconst oracleAccount = await oracleQueueAccount.createOracle(\n  {\n    name: "my oracle",\n    authority: "0xMyOracleAuthority",\n  },\n  // enable the heartbeat permissions (requires msg.sender to be queueAuthority)\n  true,\n  // you can also explicitly provide the queueAuthority signer\n  {\n    signer: queueAuthoritySigner,\n  }\n);\nconst oracle = await oracleAccount.loadData();\n\nawait oracleAccount.heartbeat();\n')),(0,r.kt)("h3",{id:"create-a-job-on-ipfs"},"Create a Job on IPFS"),(0,r.kt)("p",null,"A set of jobs must be encoded with the\n",(0,r.kt)("a",{parentName:"p",href:"https://ipfs.io/ipfs/bafybeiaprigfe7hakc4hgqyrjtgsbggrpvzfufpufzvpwtzlznyjb5hjw4/%20USD"},"following structure"),".\nThis example uses ",(0,r.kt)("a",{parentName:"p",href:"https://web3.storage"},"web3.storage"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const jobs = [\n  {\n    name: job.name,\n    weight: job.weight,\n    data: Buffer.from(\n      sb.OracleJob.encodeDelimited({\n        tasks: [\n          {\n            httpTask: {\n              url: "https://api.coinbase.com/v2/prices/USDC-USD/spot",\n            },\n          },\n          {\n            jsonParseTask: {\n              path: "$.data.amount",\n            },\n          },\n          {\n            boundTask: {\n              lowerBoundValue: "0.98",\n              upperBoundValue: "1.02",\n            },\n          },\n        ],\n      }).finish()\n    ).toString("base64"),\n  },\n];\n\nconst client = new Web3Storage({\n  token: "<TOKEN_GOES_HERE>",\n});\n\n// get jobs from validation\nconst content = new File([JSON.stringify(jobs)], "", {\n  type: "application/json",\n});\n\n// get content ID - fetchable immediately via ipfs\nconst cid = await client.put([content], {\n  wrapWithDirectory: false,\n});\n')),(0,r.kt)("h3",{id:"create-a-data-feed"},"Create a Data Feed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { OracleQueueAccount } from "@switchboard-xyz/evm.js";\n\nconst oracleQueueAccount = new OracleQueueAccount(\n  switchboardProgram,\n  queueAddress\n);\n\nconst aggregatorAccount = await oracleQueueAccount.createAggregator(\n  {\n    authority: "0xYourAuthority",\n    name: "MyAggregator",\n    queueAddress: "0xQueueAddress",\n    batchSize: 10,\n    minOracleResults: 5,\n    minJobResults: 3,\n    minUpdateDelaySeconds: 60,\n    varianceThreshold: 0.05,\n    forceReportPeriod: 600,\n    jobsHash: "0xJobHash",\n    enableLegacyAdapter: false,\n    initialValue: 0,\n  },\n  // enable the oracle queue usage permissions (requires msg.sender to be queueAuthority)\n  true,\n  // you can also explicitly provide the queueAuthority signer\n  {\n    signer: queueAuthoritySigner,\n  }\n);\nconst aggregator = await aggregatorAccount.loadData();\n')),(0,r.kt)("h3",{id:"read-a-data-feed"},"Read a Data Feed"),(0,r.kt)("p",null,"After the oracles respond, read the feed result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { AggregatorAccount } from "@switchboard-xyz/evm.js";\n\nconst aggregatorAccount = new AggregatorAccount(\n  switchboardProgram,\n  aggregatorAddress\n);\nconst result: number = await aggregatorAccount.latestValue();\nconsole.log(result);\n')),(0,r.kt)("h3",{id:"watch-data-feed"},"Watch Data Feed"),(0,r.kt)("p",null,"Setup a websocket listener to invoke a callback whenever an aggregator is\nupdated"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { AggregatorAccount } from "@switchboard-xyz/evm.js";\n\nconst watchHandle = AggregatorAccount.watch(\n  switchboardProgram,\n  "0xAggregatorAccountAddress",\n  (event) => {\n    console.log(event);\n  }\n);\n\n// To stop watching\nwatchHandle.stop();\n')))}p.isMDXComponent=!0}}]);