"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[99131],{54852:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(49231);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[p]="string"==typeof e?e:o,i[1]=u;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19683:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>C,contentTitle:()=>x,default:()=>M,frontMatter:()=>O,metadata:()=>T,toc:()=>N});var r=n(48041),o=(n(49231),n(54852));const a={toc:[]},i="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(i,(0,r.Z)({},a,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Each oracle queue is independent and maintain their own configurations, which\ndictates its degree of security. Queue's can require update requesters to be\npre-approved to use a queues resources or allow any requester access to a queue.\nQueue's also specify a minimum stake oracles must maintain in their escrow\nwallet before joining a queue, which acts as a deposit to incentivize honest\noracle behavior."),(0,o.kt)("p",null,"When creating a queue, an OracleQueueBuffer account must also be initialized\nwith a size of 8 Bytes + (32 Bytes \xd7 ",(0,o.kt)("inlineCode",{parentName:"p"},"queue.maxSize"),"), where ",(0,o.kt)("inlineCode",{parentName:"p"},"queue.maxSize")," is\nthe maximum number of oracles the queue can support. The OracleQueueBuffer\naccount ",(0,o.kt)("inlineCode",{parentName:"p"},"queue.dataBuffer")," stores a list of oracle public keys in a round robin\nfashion, using ",(0,o.kt)("inlineCode",{parentName:"p"},"queue.currIdx")," to track its position on the queue for allocating\nresource update request. Once a buffer is full, oracles must be removed before\nnew oracles can join the network. An oracle can be assigned to many update\nrequest simultaneously but must continuously heartbeat on-chain to signal\nreadiness."),(0,o.kt)("p",null,"The queue uses ",(0,o.kt)("inlineCode",{parentName:"p"},"queue.gcIdx")," to track its garbage collection index. When an\noracle heartbeats on-chain, it passes the oracle account at index ",(0,o.kt)("inlineCode",{parentName:"p"},"queue.gcIdx"),".\nIf the oracle account has failed to heartbeat before ",(0,o.kt)("inlineCode",{parentName:"p"},"queue.oracleTimeout"),", it\nis removed from the queue until its next successful heartbeat and will no longer\nbe assigned resource update requests."))}u.isMDXComponent=!0;const s={toc:[]},c="wrapper";function l(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"An oracle with ",(0,o.kt)("strong",{parentName:"p"},"PermitOracleHeartbeat")," permissions ",(0,o.kt)("em",{parentName:"p"},"MUST")," periodically\nheartbeat on the queue to signal readiness, which adds the oracle to the queue\nand allows it to be assigned resource update requests. Oracle positions are\nperiodically swapped in the OracleQueueBuffer account to mitigate oracles being\nassigned the same update requests on each iteration of the queue."))}l.isMDXComponent=!0;const p={toc:[]},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}))}m.isMDXComponent=!0;const f={toc:[]},h="wrapper";function k(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The queue's specified ",(0,o.kt)("inlineCode",{parentName:"p"},"queue.reward")," is the number of tokens an oracle or crank\nturner receives for successfully completing an on-chain action. For a crank\nturner this is turning the crank and invoking a data feed update. For an oracle\nthis is responding to an update request within the reliable margin from the\naccepted result."),(0,o.kt)("p",null,"Queues should reward oracles enough such that the economic incentive over the\nlifecycle of the feed exceeds the opportunity cost to attack a protocol\nconsuming the feed."))}k.isMDXComponent=!0;const y={toc:[]},g="wrapper";function b(e){let{components:t,...n}=e;return(0,o.kt)(g,(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A queue may set ",(0,o.kt)("inlineCode",{parentName:"p"},"queue.slashingEnabled")," to true in order to dissuade oracles\nfrom responding to update request outside a set margin of error."),(0,o.kt)("p",null,"A queue's ",(0,o.kt)("inlineCode",{parentName:"p"},"queue.varianceToleranceMultiplier")," determines how many standard\ndeviations an oracle must respond within before being slashed and forfeiting a\nportion of their stake. ","[Defaults to 2 std deviations]"),(0,o.kt)("p",null,"DeFi protocols with a significant TVL should require their feeds to be on a\nqueue with slashing enabled."))}b.isMDXComponent=!0;const w={toc:[]},v="wrapper";function q(e){let{components:t,...n}=e;return(0,o.kt)(v,(0,r.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"An oracle queue can be governed by its network participants to control the\nvarious queue configuration parameters, such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"queue.minStake")," - require a higher up-front cost for oracles to entice honest\nbehavior"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"queue.reward")," - control the oracle reward payout for successfully fulfilling\nupdate request"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"queue.slashingEnabled")," - to disincentivize malicious oracle behavior"),(0,o.kt)("li",{parentName:"ul"},"Permit new oracles to join the network")))}q.isMDXComponent=!0;const O={sidebar_position:10,title:"Oracle Queue",slug:"/queue"},x=void 0,T={unversionedId:"network/queue",id:"network/queue",title:"Oracle Queue",description:"Economic Security",source:"@site/docs/network/queue.mdx",sourceDirName:"network",slug:"/queue",permalink:"/queue",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Oracle Queue",slug:"/queue"},sidebar:"learn",previous:{title:"Overview",permalink:"/network"},next:{title:"Permissions",permalink:"/permissions"}},C={},N=[{value:"Economic Security",id:"economic-security",level:2},{value:"Stake",id:"stake",level:3},{value:"Reward",id:"reward",level:3},{value:"Slashing",id:"slashing",level:3},{value:"Governance",id:"governance",level:2}],D={toc:N},j="wrapper";function M(e){let{components:t,...n}=e;return(0,o.kt)(j,(0,r.Z)({},D,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(u,{mdxType:"QueueArchitecture"}),(0,o.kt)(l,{mdxType:"QueuePermissions"}),(0,o.kt)("h2",{id:"economic-security"},"Economic Security"),(0,o.kt)("p",null,"An oracle queue uses economic incentives to entice oracles to act honestly,\nwhich dictate a queue's security model."),(0,o.kt)("h3",{id:"stake"},"Stake"),(0,o.kt)(m,{mdxType:"QueueStaking"}),(0,o.kt)("h3",{id:"reward"},"Reward"),(0,o.kt)(k,{mdxType:"QueueReward"}),(0,o.kt)("h3",{id:"slashing"},"Slashing"),(0,o.kt)(b,{mdxType:"QueueSlashing"}),(0,o.kt)("h2",{id:"governance"},"Governance"),(0,o.kt)(q,{mdxType:"QueueGovernance"}))}M.isMDXComponent=!0}}]);