"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3763],{54852:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>b});var n=a(49231);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),i=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=i(e.components);return n.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=i(a),m=r,b=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return a?n.createElement(b,l(l({ref:t},s),{},{components:a})):n.createElement(b,l({ref:t},s))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[d]="string"==typeof e?e:r,l[1]=c;for(var i=2;i<o;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},70651:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(49231),r=a(19841);const o={tabItem:"tabItem_cjqz"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},t)}},54405:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(95634),r=a(49231),o=a(19841),l=a(93682),c=a(17096),u=a(80852);const i={tabList:"tabList_URvL",tabItem:"tabItem_e5E2"};function s(e){let{className:t,block:a,selectedValue:c,selectValue:u,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),m=e=>{const t=e.currentTarget,a=d.indexOf(t),n=s[a].value;n!==c&&(p(t),u(n))},b=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},s.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:c===t?0:-1,"aria-selected":c===t,key:t,ref:e=>d.push(e),onKeyDown:b,onClick:m},l,{className:(0,o.Z)("tabs__item",i.tabItem,l?.className,{"tabs__item--active":c===t})}),a??t)})))}function d(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function p(e){const t=(0,c.Y)(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",i.tabList)},r.createElement(s,(0,n.Z)({},e,t)),r.createElement(d,(0,n.Z)({},e,t)))}function m(e){const t=(0,u.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},17096:(e,t,a)=>{a.d(t,{Y:()=>p});var n=a(49231),r=a(19409),o=a(18948),l=a(79862),c=a(42150);function u(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function i(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??u(a);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function s(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const l=(0,r.k6)(),c=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o._X)(c),(0,n.useCallback)((e=>{if(!c)return;const t=new URLSearchParams(l.location.search);t.set(c,e),l.replace({...l.location,search:t.toString()})}),[c,l])]}function p(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,o=i(e),[l,u]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!s({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[p,m]=d({queryString:a,groupId:r}),[b,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,c.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:r}),h=(()=>{const e=p??b;return s({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{h&&u(h)}),[h]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!s({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);u(e),m(e),f(e)}),[m,f,o]),tabValues:o}}},24490:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>w,contentTitle:()=>y,default:()=>x,frontMatter:()=>v,metadata:()=>k,toc:()=>T});var n=a(95634),r=(a(49231),a(54852)),o=a(51766),l=a(54405),c=a(70651);const u='import { parseMrEnclave } from "@switchboard-xyz/common";\nimport type { SwitchboardProgram } from "@switchboard-xyz/solana.js";\nimport {\n  AttesationQueueAccount,\n  FunctionAccount,\n} from "@switchboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\nconst attestationQueueAccount = new AttesationQueueAccount(\n  program,\n  "2ie3JZfKcvsRLsJaP5fSo43gUo1vsurnUAtAgUdUAiDG" // mainnet attestation queue\n);\n\nconst [functionAccount] = await FunctionAccount.create(program, {\n  name: "FUNCTION_NAME",\n  metadata: "FUNCTION_METADATA",\n  schedule: "30 * * * * *", // every 30 seconds\n  container: "switchboardlabs/basic-binance-oracle",\n  containerRegistry: "dockerhub",\n  version: "latest",\n  mrEnclave: parseMrEnclave("0xABC123"),\n  attestationQueue: attestationQueueAccount,\n});\n',i='sb solana function create 2ie3JZfKcvsRLsJaP5fSo43gUo1vsurnUAtAgUdUAiDG \\\n  --name "My Function" \\\n  --metadata "Randomness Callback" \\\n  --schedule "30 * * * * *" \\\n  --containerRegistry dockerhub \\\n  --container "switchboardlabs/basic-binance-oracle" \\\n  --keypair ~/.config/solana/id.json \\\n  --mainnetBeta',s="use switchboard_solana::FunctionAccountData;\n\n#[derive(Accounts)]\npub struct SaveDataInstruction<'info> {\n    // ... your required accounts to modify your program's state\n\n    // We use this to derive and verify the functions enclave state\n    #[account(\n        constraint =\n            function.load()?.validate(\n              &enclave_signer.to_account_info()\n            )?\n    )]\n    pub function: AccountLoader<'info, FunctionAccountData>,\n    pub enclave_signer: Signer<'info>,\n}\n",d='import type {\n  attestationTypes,\n  SwitchboardProgram,\n} from "@swtichboard-xyz/solana.js";\nimport { FunctionAccount } from "@swtichboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\n\nconst functionAccount = new FunctionAccount(program, "My_Function_Pubkey");\nconst functionState: attestationTypes.FunctionAccountData =\n  await functionAccount.loadData();\n',p="sb solana function print $MY_FUNCTION_PUBKEY --mainnetBeta",m='import type {\n  JobAccount,\n  SwitchboardProgram,\n} from "@switchboard-xyz/solana.js";\nimport { OracleQueueAccount } from "@switchboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\nlet jobAccount: JobAccount;\n\nconst queueAccount = new OracleQueueAccount(\n  program,\n  "uPeRMdfPmrPqgRWSrjAnAkH78RqAhe5kXoW6vBYRqFX"\n); // devnet\n\nconst [aggregatorAccount] = await queueAccount.createFeed({\n  batchSize: 1,\n  minRequiredOracleResults: 1,\n  minRequiredJobResults: 1,\n  minUpdateDelaySeconds: 60,\n  fundAmount: 2.5,\n  enable: true,\n  jobs: [\n    // existing job account\n    { pubkey: jobAccount.publicKey },\n    // or create a new job account with the feed\n    {\n      weight: 2,\n      data: OracleJob.encodeDelimited(\n        OracleJob.fromObject({\n          tasks: [\n            {\n              valueTask: {\n                value: 1,\n              },\n            },\n          ],\n        })\n      ).finish(),\n    },\n  ],\n});\n',b='export QUEUE_KEY=uPeRMdfPmrPqgRWSrjAnAkH78RqAhe5kXoW6vBYRqFX\nexport CRANK_KEY=GN9jjCy2THzZxhYqZETmPM3my8vg4R5JyNkgULddUMa5\n\nsb solana aggregator create "$QUEUE_KEY" \\\n    --keypair ~/.config/solana/id.json \\\n    --crankKey "$CRANK_KEY" \\\n    --name "My_Test_Feed" \\\n    --updateInterval 10 \\\n    --minOracles 1 \\\n    --batchSize 1 \\\n    --leaseAmount 0.1 \\\n    --job ./src/oracle-job.json \\\n    --verbose',f='use anchor_lang::prelude::*;\nuse anchor_lang::solana_program::clock;\n\nuse std::convert::TryInto;\n\n// Instruction accounts\n#[derive(Accounts)]\n#[instruction(params: ReadFeedParams)]\npub struct ReadFeed<\'info> {\n    pub aggregator: AccountLoader<\'info, AggregatorAccountData>,\n}\n\n// Instruction params\n#[derive(Clone, AnchorSerialize, AnchorDeserialize)]\npub struct ReadFeedParams {\n    pub max_confidence_interval: Option<f64>,\n}\n\n// Instruction logic\npub fn read_result(\n    ctx: Context<ReadResult>\n) -> anchor_lang::Result<()> {\n    let feed = &ctx.accounts.switchboard_aggregator.load()?;\n\n    // get result\n    let val: f64 = feed.get_result()?.try_into()?;\n\n    // check whether the feed has been updated in the last 300 seconds\n    feed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)\n        .map_err(|_| error!(FeedErrorCode::StaleFeed))?;\n\n    msg!("Current feed result is {}!", val);\n\n    // Your custom logic here\n\n    Ok(())\n}\n\n#[error_code]\n#[derive(Eq, PartialEq)]\npub enum FeedErrorCode {\n    #[msg("Switchboard feed has not been updated in 5 minutes")]\n    StaleFeed,\n}',h='import type { SwitchboardProgram, types } from "@swtichboard-xyz/solana.js";\nimport { AggregatorAccount } from "@swtichboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\n\nconst aggregatorAccount = new AggregatorAccount(program, "My_Data_Feed_Pubkey");\nconst aggregatorState: types.AggregatorAccountData =\n  await aggregatorAccount.loadData();\n',g='sb solana function print "$MY_FUNCTION_PUBKEY"',v={sidebar_position:5,hide_table_of_contents:!0,title:"Developer Resources",keywords:["Solana","Solana SDK"]},y=void 0,k={unversionedId:"solana/dev",id:"solana/dev",title:"Developer Resources",description:"Table of Contents",source:"@site/docs/solana/dev.mdx",sourceDirName:"solana",slug:"/solana/dev",permalink:"/solana/dev",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,hide_table_of_contents:!0,title:"Developer Resources",keywords:["Solana","Solana SDK"]},sidebar:"gettingStartedSidebar",previous:{title:"Switchboard x Solana",permalink:"/solana/"},next:{title:"Functions Overview",permalink:"/solana/functions"}},w={},T=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Functions",id:"functions",level:2},{value:"Create a Scheduled Function",id:"create-a-scheduled-function",level:3},{value:"Read a Function",id:"read-a-function",level:3},{value:"Debug a Function",id:"debug-a-function",level:3},{value:"Data Feeds",id:"data-feeds",level:2},{value:"Create a Data Feed",id:"create-a-data-feed",level:3},{value:"Read a Data Feed",id:"read-a-data-feed",level:3}],A={toc:T},N="wrapper";function x(e){let{components:t,...a}=e;return(0,r.kt)(N,(0,n.Z)({},A,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Functions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-scheduled-function"},"Create a Scheduled Function")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#on-demand-functions"},"On-Demand Functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#read-a-function"},"Read a Function")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#debug-a-function"},"Debug a Function")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"DataFeeds"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-data-feed"},"Create a Data Feed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#read-a-data-feed"},"Read a Data Feed"))))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Language"),(0,r.kt)("th",{parentName:"tr",align:null},"SDK"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Javascript"),(0,r.kt)("td",{parentName:"tr",align:null},"The npm package ",(0,r.kt)("a",{parentName:"td",href:"/api/solana.js"},"@switchboard-xyz/solana.js")," can be used to build and manage Switchboard accounts on Solana.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Rust"),(0,r.kt)("td",{parentName:"tr",align:null},"The rust crate ",(0,r.kt)("a",{parentName:"td",href:"https://crates.io/crates/switchboard-solana"},"switchboard-solana")," can be used on-chain and off-chain. The previous crate ",(0,r.kt)("a",{parentName:"td",href:"https://crates.io/crates/switchboard-v2"},"switchboard-v2")," is only compatible with Switchboard V2 accounts and does not support Switchboard Functions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CLI"),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("a",{parentName:"td",href:"/api/cli"},"Switchboard CLI")," can be used to help debug your Switchboard deployments with a command line interface or be used in automation scripts for custom alerting.")))),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"create-a-scheduled-function"},"Create a Scheduled Function"),(0,r.kt)("p",null,"The examples below show how to create a Switchboard Function that runs the\n",(0,r.kt)("inlineCode",{parentName:"p"},"switchboardlabs/basic-binance-oracle:latest")," container from dockerhub every 30\nseconds."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(c.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)(o.default,{language:"typescript",mdxType:"CodeBlock"},u)),(0,r.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.kt)(o.default,{language:"typescript",mdxType:"CodeBlock"},i))),(0,r.kt)("h3",{id:"read-a-function"},"Read a Function"),(0,r.kt)("p",null,"Switchboard Functions allow you to execute arbitrary instructions as long as the\nfunctions ",(0,r.kt)("inlineCode",{parentName:"p"},"enclave.signer")," has signed the transaction. This keypair gets\ngenerated within the enclave so we can prove the transaction was built securely."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(c.Z,{value:"Rust",label:"Rust",default:!0,default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"This example shows how to verify that the functions `enclave.signer` has signed your custom instructions."),(0,r.kt)(o.default,{language:"rust",mdxType:"CodeBlock"},s)),(0,r.kt)(c.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)(o.default,{language:"typescript",mdxType:"CodeBlock"},d)),(0,r.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.kt)(o.default,{language:"bash",mdxType:"CodeBlock"},p))),(0,r.kt)("h3",{id:"debug-a-function"},"Debug a Function"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Coming Soon!")),(0,r.kt)("p",null,"The Switchboard Function developer tooling is still in its early stages. By the\nend of Q3 we will support a function simulation server, an endpoint to view\ncontainer logs, and some helper scripts to manage your protocols functions."),(0,r.kt)("h2",{id:"data-feeds"},"Data Feeds"),(0,r.kt)("h3",{id:"create-a-data-feed"},"Create a Data Feed"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(c.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)(o.default,{language:"typescript",mdxType:"CodeBlock"},m)),(0,r.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.kt)(o.default,{language:"bash",mdxType:"CodeBlock"},b))),(0,r.kt)("h3",{id:"read-a-data-feed"},"Read a Data Feed"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(c.Z,{value:"Rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,r.kt)(o.default,{language:"rust",mdxType:"CodeBlock"},f)),(0,r.kt)(c.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)(o.default,{language:"javascript",mdxType:"CodeBlock"},h)),(0,r.kt)(c.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.kt)(o.default,{language:"bash",mdxType:"CodeBlock"},g),(0,r.kt)("p",null,"You need to add `--mainnetBeta` to view a function for the mainnet-beta network. The default network is devnet."))))}x.isMDXComponent=!0}}]);