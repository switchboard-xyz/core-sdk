"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5870],{85162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(67294),r=a(86010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>p});var n=a(83117),r=a(67294),o=a(86010),s=a(72389),l=a(67392),i=a(7094),c=a(12466);const u="tabList__CuJ",d="tabItem_LNqP";function m(e){var t,a;const{lazy:s,block:m,defaultValue:p,values:f,groupId:h,className:g}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=f?f:b.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),_=(0,l.l)(v,((e,t)=>e.value===t.value));if(_.length>0)throw new Error('Docusaurus error: Duplicate values "'+_.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===p?p:null!=(t=null!=p?p:null==(a=b.find((e=>e.props.default)))?void 0:a.props.value)?t:b[0].props.value;if(null!==k&&!v.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:w}=(0,i.U)(),[x,R]=(0,r.useState)(k),A=[],{blockElementScrollPositionUntilNextRender:D}=(0,c.o5)();if(null!=h){const e=y[h];null!=e&&e!==x&&v.some((t=>t.value===e))&&R(e)}const N=e=>{const t=e.currentTarget,a=A.indexOf(t),n=v[a].value;n!==x&&(D(t),R(n),null!=h&&w(h,String(n)))},E=e=>{var t;let a=null;switch(e.key){case"Enter":N(e);break;case"ArrowRight":{var n;const t=A.indexOf(e.currentTarget)+1;a=null!=(n=A[t])?n:A[0];break}case"ArrowLeft":{var r;const t=A.indexOf(e.currentTarget)-1;a=null!=(r=A[t])?r:A[A.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},g)},v.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>A.push(e),onKeyDown:E,onClick:N},s,{className:(0,o.Z)("tabs__item",d,null==s?void 0:s.className,{"tabs__item--active":x===t})}),null!=a?a:t)}))),s?(0,r.cloneElement)(b.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function p(e){const t=(0,s.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},10686:(e,t,a)=>{a.d(t,{Z:()=>f});var n=a(44267),r=a(15861),o=a(21519),s=a(78445),l=a(44073),i=a(67294),c=a(39960),u=a(13264),d=a(92949);const m=(0,u.Z)(l.Z)((e=>{let{theme:t,dark:a}=e;return{display:"flex",flexDirection:"row",justifyItems:"baseline",background:a?"rgba(42, 56, 68, 1)":"rgba(255, 255, 255, 0.6)",border:(a?.15:.1)+"rem solid var(--ifm-navbar-link-color)",borderRadius:"13.2px",boxShadow:"0 6px 7px 5px rgba(107 107 107, 0.03)",boxSizing:"border-box",width:"100%",height:"100%",verticalAlign:"middle",textDecoration:"none",[t.breakpoints.down(300)]:{paddingLeft:""},transition:"transform 0.15s ease-in-out","&&&:hover":{background:a?"rgba(42, 56, 68, 1)":"white",transform:"scale3d(1.05, 1.05, 1)"}}})),p=(0,u.Z)(s.Z)((e=>{let{theme:t}=e;return{display:"flex",maxHeight:"96px"}}));function f(e){let{title:t,image:a,imageDark:s,description:l,to:u,sx:f}=e;const{colorMode:h}=(0,d.I)();return i.createElement(c.Z,{href:u,style:{textDecoration:"none"}},i.createElement(m,{dark:"dark"===h?1:0,sx:f},i.createElement(n.Z,{sx:{height:"100%",width:"100%"}},i.createElement(p,{avatar:i.createElement("div",{style:{height:48,width:48,display:"flex",alignItems:"center",justifyContent:"center"}},"dark"===h&&s?s:a),title:t,titleTypographyProps:{fontSize:"1.25rem",color:"var(--ifm-navbar-link-color)",fontWeight:"var(--ifm-font-weight-bold)"}}),l?i.createElement(i.Fragment,null,i.createElement(o.Z,{sx:{marginBottom:"1rem"}}),i.createElement(r.Z,{variant:"body2",color:"textSecondary",component:"p",sx:{color:"var(--ifm-navbar-link-color)",fontSize:"1.1rem"}},l)):i.createElement(i.Fragment,null))))}},17547:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(86886),r=a(67294),o=a(10686);function s(e){let{items:t,cols:a,sx:s}=e;return r.createElement(n.ZP,{container:!0,spacing:3},t.map((e=>{var t;return r.createElement(n.ZP,{item:!0,style:{flexGrow:1},xs:12,md:6,lg:Math.floor(null!=(t=12/a)?t:2)},r.createElement(o.Z,{title:e.title,image:e.image,imageDark:e.imageDark,to:e.to,description:e.description,sx:s}))})))}},92871:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>p,default:()=>v,frontMatter:()=>m,metadata:()=>f,toc:()=>g});var n=a(83117),r=(a(67294),a(3905)),o=a(90814),s=a(65488),l=a(85162),i=a(17547),c=a(44996),u=a(85383),d=a(78134);const m={sidebar_position:10,title:"Rust"},p=void 0,f={unversionedId:"solana/dev/rust",id:"solana/dev/rust",title:"Rust",description:"cargo&nbsp;&nbsp;",source:"@site/docs/solana/dev/rust.mdx",sourceDirName:"solana/dev",slug:"/solana/dev/rust",permalink:"/solana/dev/rust",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Rust"},sidebar:"solana",previous:{title:"Sbv2 CLI",permalink:"/solana/dev/cli"},next:{title:"Javascript",permalink:"/solana/dev/javascript/"}},h={},g=[{value:"Features",id:"features",level:2},{value:"Define Your Own Devnet Feature",id:"define-your-own-devnet-feature",level:3},{value:"Data Feeds",id:"data-feeds",level:2},{value:"Read Latest Result",id:"read-latest-result",level:3},{value:"Read Aggregator History",id:"read-aggregator-history",level:3},{value:"VRF Account",id:"vrf-account",level:2},{value:"Read Latest Result",id:"read-latest-result-1",level:3},{value:"RequestRandomness CPI",id:"requestrandomness-cpi",level:3},{value:"Buffer Relayer Account",id:"buffer-relayer-account",level:2},{value:"Read Latest Result",id:"read-latest-result-2",level:3}],b={toc:g};function v(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/switchboard-v2"},(0,r.kt)("img",{parentName:"a",src:"https://badgen.net/crates/v/switchboard-v2",alt:"cargo"})),"\xa0","\xa0","\n",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/switchboardxyz"},(0,r.kt)("img",{parentName:"a",src:"https://badgen.net/twitter/follow/switchboardxyz",alt:"twitter"})),"\xa0","\xa0"),(0,r.kt)("p",null,"A Rust library to interact with Switchboard V2 accounts."),(0,r.kt)("p",null,"To get started, add the\n",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/switchboard-v2"},"switchboard-v2")," crate to your\nmanifest."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'[dependencies]\nswitchboard-v2 = { version = "~0.1.19" }\n')),(0,r.kt)(i.Z,{cols:2,items:[{to:"https://github.com/switchboard-xyz/sbv2-solana/tree/main/rust/switchboard-v2",title:"Github",description:"View the Github repo",image:(0,r.kt)("img",{src:(0,c.Z)("/img/icons/github/light.svg")}),imageDark:(0,r.kt)("img",{src:(0,c.Z)("/img/icons/github/dark.svg")})},{to:"https://docs.rs/switchboard-v2/latest/switchboard_v2/",title:"Typedocs",description:"View the Typedocs",image:(0,r.kt)("img",{src:(0,c.Z)("/img/icons/rust/crab.svg")}),imageDark:(0,r.kt)("img",{src:(0,c.Z)("/img/icons/rust/crab.svg")})}],mdxType:"RoundedCardGroup"}),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"devnet"),(0,r.kt)("td",{parentName:"tr",align:null},"The devnet feature enables using the Switchboard Devnet Program ID instead of the Mainnet Program ID.")))),(0,r.kt)("p",null,"Enable it in your Cargo.toml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nswitchboard-v2 = { version = "~0.1.19", features = ["devnet"] }\n')),(0,r.kt)("h3",{id:"define-your-own-devnet-feature"},"Define Your Own Devnet Feature"),(0,r.kt)("p",null,"You can also define your own devnet feature to dynamically swap the program IDs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[features]\ndefault = []\ndevnet = ["switchboard-v2/devnet"]\n')),(0,r.kt)("p",null,"This allows you to build your program with a feature flag to automate devnet and\nmainnet builds."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Build with Mainnet Switchboard Program ID\ncargo build-bpf\n# Build with Devnet Switchboard Program ID\ncargo build-bpf --features devnet\n")),(0,r.kt)("h2",{id:"data-feeds"},"Data Feeds"),(0,r.kt)("h3",{id:"read-latest-result"},"Read Latest Result"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"preview",label:"Preview",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"rust",mdxType:"CodeBlock"},d.Z)),(0,r.kt)(l.Z,{value:"full",label:"Full",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"rust",mdxType:"CodeBlock"},u.Z))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example(s)"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/programs/anchor-feed-parser/src/lib.rs"},"anchor-feed-parser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/programs/native-feed-parser/src/lib.rs"},"native-feed-parser"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"read-aggregator-history"},"Read Aggregator History"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Note: The Aggregator must have a history buffer initialized before using"))),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"preview",label:"Preview",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"rust",mdxType:"CodeBlock"},'let history_buffer = AggregatorHistoryBuffer::new(&ctx.accounts.history_buffer)?;\n\nlet timestamp: i64 = Clock::get()?.unix_timestamp - 3600;\n\nlet value_at_timestamp: f64 = history_buffer\n    .lower_bound(timestamp)\n    .unwrap()\n    .value\n    .try_into()?;\n\nmsg!("Result {:?}!", value_at_timestamp);')),(0,r.kt)(l.Z,{value:"full",label:"Full",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"rust",mdxType:"CodeBlock"},'use anchor_lang::prelude::*;\nuse std::convert::TryInto;\npub use switchboard_v2::{\n    AggregatorAccountData, AggregatorHistoryBuffer, SwitchboardDecimal, SWITCHBOARD_PROGRAM_ID,\n};\n\ndeclare_id!("FnsPs665aBSwJRu2A8wGv6ZT76ipR41kHm4hoA3B1QGh");\n\n#[derive(Accounts)]\n#[instruction(params: ReadHistoryParams)]\npub struct ReadHistory<\'info> {\n    #[account(\n        has_one = history_buffer @ ErrorCode::InvalidHistoryBuffer\n    )]\n    pub aggregator: AccountLoader<\'info, AggregatorAccountData>,\n    /// CHECK: verified in the aggregator has_one check\n    pub history_buffer: AccountInfo<\'info>,\n}\n\n#[derive(Clone, AnchorSerialize, AnchorDeserialize)]\npub struct ReadHistoryParams {\n    pub timestamp: Option<i64>,\n}\n\n#[program]\npub mod anchor_history_parser {\n    use super::*;\n\n    pub fn read_history(\n        ctx: Context<ReadHistory>,\n        params: ReadHistoryParams,\n    ) -> anchor_lang::Result<()> {\n        let history_buffer = AggregatorHistoryBuffer::new(&ctx.accounts.history_buffer)?;\n\n        let timestamp: i64 = Clock::get()?.unix_timestamp - 3600;\n\n        let value_at_timestamp: f64 = history_buffer\n            .lower_bound(timestamp)\n            .unwrap()\n            .value\n            .try_into()?;\n\n        msg!("Result {:?}!", value_at_timestamp);\n\n        Ok(())\n    }\n}\n\n#[error_code]\n#[derive(Eq, PartialEq)]\npub enum ErrorCode {\n    #[msg("Not a valid Switchboard account")]\n    InvalidSwitchboardAccount,\n    #[msg("History buffer mismatch")]\n    InvalidHistoryBuffer,\n}\n'))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example(s)"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/programs/anchor-history-parser/src/lib.rs"},"anchor-history-parser"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"vrf-account"},"VRF Account"),(0,r.kt)("h3",{id:"read-latest-result-1"},"Read Latest Result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use switchboard_v2::VrfAccountData;\n\n// deserialize the account info\nlet vrf = ctx.accounts.vrf.load()?;\n// OR\nlet vrf = VrfAccountData::new(vrf_account_info)?;\n\n// read the result\nlet result_buffer = vrf.get_result()?;\nlet value: &[u128] = bytemuck::cast_slice(&result_buffer[..]);\nlet result = value[0] % 256000 as u128;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/programs/anchor-vrf-parser/src/actions/update_result.rs"},"anchor-vrf-parser"))),(0,r.kt)("h3",{id:"requestrandomness-cpi"},"RequestRandomness CPI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'pub use switchboard_v2::{VrfAccountData, VrfRequestRandomness};\n\nlet switchboard_program = ctx.accounts.switchboard_program.to_account_info();\n\nlet vrf_request_randomness = VrfRequestRandomness {\n    authority: ctx.accounts.state.to_account_info(),\n    vrf: ctx.accounts.vrf.to_account_info(),\n    oracle_queue: ctx.accounts.oracle_queue.to_account_info(),\n    queue_authority: ctx.accounts.queue_authority.to_account_info(),\n    data_buffer: ctx.accounts.data_buffer.to_account_info(),\n    permission: ctx.accounts.permission.to_account_info(),\n    escrow: ctx.accounts.escrow.clone(),\n    payer_wallet: ctx.accounts.payer_wallet.clone(),\n    payer_authority: ctx.accounts.payer_authority.to_account_info(),\n    recent_blockhashes: ctx.accounts.recent_blockhashes.to_account_info(),\n    program_state: ctx.accounts.program_state.to_account_info(),\n    token_program: ctx.accounts.token_program.to_account_info(),\n};\n\nlet vrf_key = ctx.accounts.vrf.key.clone();\nlet authority_key = ctx.accounts.authority.key.clone();\n\nlet state_seeds: &[&[&[u8]]] = &[&[\n    &STATE_SEED,\n    vrf_key.as_ref(),\n    authority_key.as_ref(),\n    &[bump],\n]];\nmsg!("requesting randomness");\nvrf_request_randomness.invoke_signed(\n    switchboard_program,\n    params.switchboard_state_bump,\n    params.permission_bump,\n    state_seeds,\n)?;\n\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/programs/anchor-vrf-parser/src/actions/request_result.rs"},"anchor-vrf-parser"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"buffer-relayer-account"},"Buffer Relayer Account"),(0,r.kt)("h3",{id:"read-latest-result-2"},"Read Latest Result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use anchor_lang::solana_program::clock;\nuse std::convert::TryInto;\nuse switchboard_v2::{BufferRelayerAccountData, SWITCHBOARD_PROGRAM_ID};\n\n// check feed owner\nlet owner = *aggregator.owner;\nif owner != SWITCHBOARD_PROGRAM_ID {\n    return Err(error!(ErrorCode::InvalidSwitchboardAccount));\n}\n\n// deserialize account info\nlet buffer = BufferRelayerAccountData::new(feed_account_info)?;\n\n// get result\nlet buffer_result = buffer.get_result();\n\n// check if feed has been updated in the last 5 minutes\nbuffer.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)?;\n\n// convert buffer to a string\nlet result_string = String::from_utf8(buffer.result)\n    .map_err(|_| error!(ErrorCode::StringConversionFailed))?;\nmsg!("Buffer string {:?}!", result_string);\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/programs/anchor-buffer-parser/src/lib.rs"},"anchor-buffer-parser"))))}v.isMDXComponent=!0},78134:(e,t,a)=>{a.d(t,{Z:()=>n});const n="use anchor_lang::solana_program::clock;\nuse std::convert::TryInto;\nuse switchboard_v2::{AggregatorAccountData, SwitchboardDecimal, SWITCHBOARD_PROGRAM_ID};\n\n// check feed owner\nlet owner = *aggregator.owner;\nif owner != SWITCHBOARD_PROGRAM_ID {\n    return Err(error!(ErrorCode::InvalidSwitchboardAccount));\n}\n\n// deserialize account info\nlet feed = ctx.accounts.aggregator.load()?;\n// OR\nlet feed = AggregatorAccountData::new(feed_account_info)?;\n\n// get result\nlet decimal: f64 = feed.get_result()?.try_into()?;\n\n// check if feed has been updated in the last 5 minutes\nfeed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)?;\n\n// check if feed exceeds a confidence interval of +/i $0.80\nfeed.check_confidence_interval(SwitchboardDecimal::from_f64(0.80))?;"},85383:(e,t,a)=>{a.d(t,{Z:()=>n});const n='use anchor_lang::prelude::*;\nuse anchor_lang::solana_program::clock;\nuse std::convert::TryInto;\npub use switchboard_v2::{AggregatorAccountData, SwitchboardDecimal, SWITCHBOARD_PROGRAM_ID};\n\ndeclare_id!("FnsPs665aBSwJRu2A8wGv6ZT76ipR41kHm4hoA3B1QGh");\n\n#[derive(Accounts)]\n#[instruction(params: ReadResultParams)]\npub struct ReadResult<\'info> {\n    pub aggregator: AccountLoader<\'info, AggregatorAccountData>,\n}\n\n#[derive(Clone, AnchorSerialize, AnchorDeserialize)]\npub struct ReadResultParams {\n    pub max_confidence_interval: Option<f64>,\n}\n\n#[program]\npub mod anchor_feed_parser {\n    use super::*;\n\n    pub fn read_result(\n        ctx: Context<ReadResult>,\n        params: ReadResultParams,\n    ) -> anchor_lang::Result<()> {\n        let feed = &ctx.accounts.aggregator.load()?;\n\n        // get result\n        let val: f64 = feed.get_result()?.try_into()?;\n\n        // check whether the feed has been updated in the last 300 seconds\n        feed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)\n            .map_err(|_| error!(FeedErrorCode::StaleFeed))?;\n\n        // check feed does not exceed max_confidence_interval\n        if let Some(max_confidence_interval) = params.max_confidence_interval {\n            feed.check_confidence_interval(SwitchboardDecimal::from_f64(max_confidence_interval))\n                .map_err(|_| error!(FeedErrorCode::ConfidenceIntervalExceeded))?;\n        }\n\n        msg!("Current feed result is {}!", val);\n\n        Ok(())\n    }\n}\n\n#[error_code]\n#[derive(Eq, PartialEq)]\npub enum FeedErrorCode {\n    #[msg("Not a valid Switchboard account")]\n    InvalidSwitchboardAccount,\n    #[msg("Switchboard feed has not been updated in 5 minutes")]\n    StaleFeed,\n    #[msg("Switchboard feed exceeded provided confidence interval")]\n    ConfidenceIntervalExceeded,\n}\n'}}]);