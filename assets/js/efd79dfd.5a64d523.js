"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[64971],{54852:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>m});var t=n(49231);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),u=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=u(e.components);return t.createElement(i.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},v=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),v=r,m=d["".concat(i,".").concat(v)]||d[v]||p[v]||o;return n?t.createElement(m,l(l({ref:a},c),{},{components:n})):t.createElement(m,l({ref:a},c))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=v;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}v.displayName="MDXCreateElement"},2004:(e,a,n)=>{n.d(a,{Z:()=>l});var t=n(49231),r=n(19841);const o={tabItem:"tabItem_Z7jx"};function l(e){let{children:a,hidden:n,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},a)}},66081:(e,a,n)=>{n.d(a,{Z:()=>E});var t=n(48041),r=n(49231),o=n(19841),l=n(51556),s=n(19409),i=n(86449),u=n(80828),c=n(70621);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:n,attributes:t,default:r}}=e;return{value:a,label:n,attributes:t,default:r}}))}function p(e){const{values:a,children:n}=e;return(0,r.useMemo)((()=>{const e=a??d(n);return function(e){const a=(0,u.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function v(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function m(e){let{queryString:a=!1,groupId:n}=e;const t=(0,s.k6)(),o=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,i._X)(o),(0,r.useCallback)((e=>{if(!o)return;const a=new URLSearchParams(t.location.search);a.set(o,e),t.replace({...t.location,search:a.toString()})}),[o,t])]}function g(e){const{defaultValue:a,queryString:n=!1,groupId:t}=e,o=p(e),[l,s]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!v({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:a,tabValues:o}))),[i,u]=m({queryString:n,groupId:t}),[d,g]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[t,o]=(0,c.Nk)(n);return[t,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:t}),h=(()=>{const e=i??d;return v({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!v({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),g(e)}),[u,g,o]),tabValues:o}}var h=n(68213);const f={tabList:"tabList_YkLP",tabItem:"tabItem_dswv"};function k(e){let{className:a,block:n,selectedValue:s,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),p=e=>{const a=e.currentTarget,n=c.indexOf(a),t=u[n].value;t!==s&&(d(a),i(t))},v=e=>{let a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;a=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;a=c[n]??c[c.length-1];break}}a?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},a)},u.map((e=>{let{value:a,label:n,attributes:l}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:s===a?0:-1,"aria-selected":s===a,key:a,ref:e=>c.push(e),onKeyDown:v,onClick:p},l,{className:(0,o.Z)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":s===a})}),n??a)})))}function b(e){let{lazy:a,children:n,selectedValue:t}=e;if(n=Array.isArray(n)?n:[n],a){const e=n.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==t}))))}function A(e){const a=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",f.tabList)},r.createElement(k,(0,t.Z)({},e,a)),r.createElement(b,(0,t.Z)({},e,a)))}function E(e){const a=(0,h.Z)();return r.createElement(A,(0,t.Z)({key:String(a)},e))}},26365:(e,a,n)=>{n.d(a,{Z:()=>h});var t=n(73013),r=n(49231),o=n(66318),l=n(67547),s=n(42941),i=n(31063),u=n(98077),c=n(15733),d=n(27957),p=n(65137);const v=(0,d.Z)(u.Z)((e=>{let{theme:a,dark:n}=e;return{display:"flex",flexDirection:"row",justifyItems:"baseline",background:n?"rgba(42, 56, 68, 1)":"rgba(255, 255, 255, 0.6)",border:(n?.15:.1)+"rem solid var(--ifm-navbar-link-color)",borderRadius:"13.2px",boxShadow:"0 6px 7px 5px rgba(107 107 107, 0.03)",boxSizing:"border-box",width:"100%",height:"100%",verticalAlign:"middle",textDecoration:"none",[a.breakpoints.down(300)]:{paddingLeft:""},transition:"transform 0.15s ease-in-out","&&&:hover":{background:n?"rgba(42, 56, 68, 1)":"white",transform:"scale3d(1.05, 1.05, 1)"}}})),m=(0,d.Z)(i.Z)((e=>{let{theme:a}=e;return{display:"flex",maxHeight:"96px"}}));function g(e){let{title:a,image:n,imageDark:t,description:i,to:u,sx:d}=e;const{colorMode:g}=(0,p.I)();return r.createElement(c.Z,{href:u,style:{textDecoration:"none"}},r.createElement(v,{dark:"dark"===g?1:0,sx:d},r.createElement(o.Z,{sx:{height:"100%",width:"100%"}},r.createElement(m,{avatar:r.createElement("div",{style:{height:48,width:48,display:"flex",alignItems:"center",justifyContent:"center"}},"dark"===g&&t?t:n),title:a,titleTypographyProps:{fontSize:"1.25rem",color:"var(--ifm-navbar-link-color)",fontWeight:"var(--ifm-font-weight-bold)"}}),i?r.createElement(r.Fragment,null,r.createElement(s.Z,{sx:{marginBottom:"1rem"}}),r.createElement(l.Z,{variant:"body2",color:"textSecondary",component:"p",sx:{color:"var(--ifm-navbar-link-color)",fontSize:"1.1rem"}},i)):r.createElement(r.Fragment,null))))}function h(e){let{items:a,cols:n,sx:o,direction:l,justifyContent:s,alignItems:i}=e;return r.createElement(t.ZP,{container:!0,spacing:3,direction:l??"row",justifyContent:s,alignItems:i},a.map((e=>r.createElement(t.ZP,{key:e.title,item:!0,style:{flexGrow:1},xs:12,md:6,lg:Math.floor(12/n??2)},r.createElement(g,{title:e.title,image:e.image,imageDark:e.imageDark,to:e.to,description:e.description,sx:o})))))}},90239:(e,a,n)=>{n.d(a,{ZP:()=>s});var t=n(48041),r=(n(49231),n(54852));const o={toc:[{value:"<code>sbv2 aptos account airdrop</code>",id:"sbv2-aptos-account-airdrop",level:2},{value:"<code>sbv2 aptos aggregator add job AGGREGATORHEXSTRING</code>",id:"sbv2-aptos-aggregator-add-job-aggregatorhexstring",level:2},{value:"<code>sbv2 aptos aggregator create QUEUEHEXSTRING</code>",id:"sbv2-aptos-aggregator-create-queuehexstring",level:2},{value:"<code>sbv2 aptos aggregator job add AGGREGATORHEXSTRING</code>",id:"sbv2-aptos-aggregator-job-add-aggregatorhexstring",level:2},{value:"<code>sbv2 aptos aggregator update AGGREGATORHEXSTRING</code>",id:"sbv2-aptos-aggregator-update-aggregatorhexstring",level:2},{value:"<code>sbv2 aptos crank create QUEUEHEXSTRING</code>",id:"sbv2-aptos-crank-create-queuehexstring",level:2},{value:"<code>sbv2 aptos crank list CRANKHEXSTRING</code>",id:"sbv2-aptos-crank-list-crankhexstring",level:2},{value:"<code>sbv2 aptos crank pop CRANKHEXSTRING</code>",id:"sbv2-aptos-crank-pop-crankhexstring",level:2},{value:"<code>sbv2 aptos crank push CRANKHEXSTRING</code>",id:"sbv2-aptos-crank-push-crankhexstring",level:2},{value:"<code>sbv2 aptos create aggregator QUEUEHEXSTRING</code>",id:"sbv2-aptos-create-aggregator-queuehexstring",level:2},{value:"<code>sbv2 aptos create crank QUEUEHEXSTRING</code>",id:"sbv2-aptos-create-crank-queuehexstring",level:2},{value:"<code>sbv2 aptos create job QUEUEHEXSTRING JOBDEFINITION</code>",id:"sbv2-aptos-create-job-queuehexstring-jobdefinition",level:2},{value:"<code>sbv2 aptos create oracle QUEUEHEXSTRING</code>",id:"sbv2-aptos-create-oracle-queuehexstring",level:2},{value:"<code>sbv2 aptos create queue</code>",id:"sbv2-aptos-create-queue",level:2},{value:"<code>sbv2 aptos job create QUEUEHEXSTRING JOBDEFINITION</code>",id:"sbv2-aptos-job-create-queuehexstring-jobdefinition",level:2},{value:"<code>sbv2 aptos list crank CRANKHEXSTRING</code>",id:"sbv2-aptos-list-crank-crankhexstring",level:2},{value:"<code>sbv2 aptos oracle create QUEUEHEXSTRING</code>",id:"sbv2-aptos-oracle-create-queuehexstring",level:2},{value:"<code>sbv2 aptos oracle metrics ORACLEHEXSTRING</code>",id:"sbv2-aptos-oracle-metrics-oraclehexstring",level:2},{value:"<code>sbv2 aptos oracle up ORACLEHEXSTRING</code>",id:"sbv2-aptos-oracle-up-oraclehexstring",level:2},{value:"<code>sbv2 aptos permission create GRANTER</code>",id:"sbv2-aptos-permission-create-granter",level:2},{value:"<code>sbv2 aptos permission set GRANTER</code>",id:"sbv2-aptos-permission-set-granter",level:2},{value:"<code>sbv2 aptos pop crank CRANKHEXSTRING</code>",id:"sbv2-aptos-pop-crank-crankhexstring",level:2},{value:"<code>sbv2 aptos print ACCOUNTTYPE ADDRESS</code>",id:"sbv2-aptos-print-accounttype-address",level:2},{value:"<code>sbv2 aptos push crank CRANKHEXSTRING</code>",id:"sbv2-aptos-push-crank-crankhexstring",level:2},{value:"<code>sbv2 aptos queue create</code>",id:"sbv2-aptos-queue-create",level:2},{value:"<code>sbv2 aptos update aggregator AGGREGATORHEXSTRING</code>",id:"sbv2-aptos-update-aggregator-aggregatorhexstring",level:2}]},l="wrapper";function s(e){let{components:a,...n}=e;return(0,r.kt)(l,(0,t.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"interact with switchboard on Aptos"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-account-airdrop"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos account airdrop"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-aggregator-add-job-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos aggregator add job AGGREGATORHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-aggregator-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos aggregator create QUEUEHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-aggregator-job-add-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos aggregator job add AGGREGATORHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-aggregator-update-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos aggregator update AGGREGATORHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-crank-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos crank create QUEUEHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-crank-list-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos crank list CRANKHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-crank-pop-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos crank pop CRANKHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-crank-push-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos crank push CRANKHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-create-aggregator-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos create aggregator QUEUEHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-create-crank-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos create crank QUEUEHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-create-job-queuehexstring-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos create job QUEUEHEXSTRING JOBDEFINITION"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-create-oracle-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos create oracle QUEUEHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-create-queue"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos create queue"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-job-create-queuehexstring-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos job create QUEUEHEXSTRING JOBDEFINITION"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-list-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos list crank CRANKHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-oracle-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos oracle create QUEUEHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-oracle-metrics-oraclehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos oracle metrics ORACLEHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-oracle-up-oraclehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos oracle up ORACLEHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-permission-create-granter"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos permission create GRANTER"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-permission-set-granter"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos permission set GRANTER"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-pop-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos pop crank CRANKHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-print-accounttype-address"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos print ACCOUNTTYPE ADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-push-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos push crank CRANKHEXSTRING"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-queue-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos queue create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-update-aggregator-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos update aggregator AGGREGATORHEXSTRING")))),(0,r.kt)("h2",{id:"sbv2-aptos-account-airdrop"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos account airdrop")),(0,r.kt)("p",null,"request an airdrop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos account airdrop --address <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--json] [-n <value>]\n\nFLAGS\n  -h, --help            Show CLI help.\n  -n, --amount=<value>  [default: 1000000] number of airdrops to request, 10_000 coins each\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --address=<value>     (required) HexString address of account to fund\n  --networkId=<option>  [default: testnet] Aptos network to connect to\n                        <options: devnet|testnet|mainnet>\n  --programId=<value>   Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  request an airdrop\n")),(0,r.kt)("h2",{id:"sbv2-aptos-aggregator-add-job-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos aggregator add job AGGREGATORHEXSTRING")),(0,r.kt)("p",null,"add a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos aggregator add job AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [-a <value>] [--name <value> | --jobKey <value>]\n    [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --jobDefinition=<value>  filesystem path of job json definition file\n  --jobKey=<value>         public key of an existing job account to add to an aggregator\n  --jobWeight=<value>      [default: 1] job weight\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job account\n  --name=<value>           name of the job account\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sbv2 aptos aggregator job add\n")),(0,r.kt)("h2",{id:"sbv2-aptos-aggregator-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos aggregator create QUEUEHEXSTRING")),(0,r.kt)("p",null,"create an aptos aggregator for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos aggregator create QUEUEHEXSTRING --keypair <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize <value>]\n    [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [-j <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>      alternate named account that will be the authority for the oracle\n  -h, --help                   Show CLI help.\n  -j, --job=<value>...         filesystem path to job definition file\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          number of oracles requested for each open round call\n  --crankAddress=<value>       optional, address of the crank to add the aggregator to\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --keypair=<value>            (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>           metadata of the aggregator for easier identification\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --name=<value>               name of the aggregator for easier identification\n  --networkId=<option>         [default: testnet] Aptos network to connect to\n                               <options: devnet|testnet|mainnet>\n  --new                        create account at new AptosAccount with authority set to --account\n  --profileName=<value>        [default: default] If --keypair is pointing to a yaml file, provide an optional profile\n                               to load. If none provided, default will be used\n  --programId=<value>          Switchboard programId on the selected Aptos network\n  --updateInterval=<value>     (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>  [default: 0] percentage change between a previous accepted result and the next round\n                               before an oracle reports a value on-chain. Used to conserve lease cost during low\n                               volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aptos aggregator for a given queue\n\nALIASES\n  $ sbv2 aptos create aggregator\n")),(0,r.kt)("h2",{id:"sbv2-aptos-aggregator-job-add-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos aggregator job add AGGREGATORHEXSTRING")),(0,r.kt)("p",null,"add a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos aggregator job add AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [-a <value>] [--name <value> | --jobKey <value>]\n    [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --jobDefinition=<value>  filesystem path of job json definition file\n  --jobKey=<value>         public key of an existing job account to add to an aggregator\n  --jobWeight=<value>      [default: 1] job weight\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job account\n  --name=<value>           name of the job account\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sbv2 aptos aggregator job add\n")),(0,r.kt)("h2",{id:"sbv2-aptos-aggregator-update-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos aggregator update AGGREGATORHEXSTRING")),(0,r.kt)("p",null,"request a new value on-chain for an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos aggregator update AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sbv2 aptos update aggregator\n")),(0,r.kt)("h2",{id:"sbv2-aptos-crank-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos crank create QUEUEHEXSTRING")),(0,r.kt)("p",null,"create a new crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos crank create QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [--name <value>] [--metadata <value>] [--maxRows\n    <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString of the oracle queue to create a crank for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --maxRows=<value>      [default: 100] maximum number of rows on the crank\n  --metadata=<value>     metadata of the queue for easier identification\n  --name=<value>         name of the queue for easier identification\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --new                  create account at new AptosAccount with authority set to --account\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sbv2 aptos create crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-crank-list-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos crank list CRANKHEXSTRING")),(0,r.kt)("p",null,"sort the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos crank list CRANKHEXSTRING [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>] [-u\n    <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --networkId=<option>  [default: testnet] Aptos network to connect to\n                        <options: devnet|testnet|mainnet>\n  --programId=<value>   Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  sort the crank\n\nALIASES\n  $ sbv2 aptos list crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-crank-pop-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos crank pop CRANKHEXSTRING")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos crank pop CRANKHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 aptos pop crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-crank-push-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos crank push CRANKHEXSTRING")),(0,r.kt)("p",null,"push an aggregator onto the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos crank push CRANKHEXSTRING --keypair <value> -a <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -a, --aggregatorHexString=<value>  (required) HexString address of the aggregator\n  -h, --help                         Show CLI help.\n  -s, --silent                       suppress cli prompts\n  -u, --rpcUrl=<value>               alternate RPC url\n  -v, --verbose                      log everything\n  --keypair=<value>                  (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>               [default: testnet] Aptos network to connect to\n                                     <options: devnet|testnet|mainnet>\n  --profileName=<value>              [default: default] If --keypair is pointing to a yaml file, provide an optional\n                                     profile to load. If none provided, default will be used\n  --programId=<value>                Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sbv2 aptos push crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-create-aggregator-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos create aggregator QUEUEHEXSTRING")),(0,r.kt)("p",null,"create an aptos aggregator for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos create aggregator QUEUEHEXSTRING --keypair <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize <value>]\n    [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [-j <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>      alternate named account that will be the authority for the oracle\n  -h, --help                   Show CLI help.\n  -j, --job=<value>...         filesystem path to job definition file\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          number of oracles requested for each open round call\n  --crankAddress=<value>       optional, address of the crank to add the aggregator to\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --keypair=<value>            (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>           metadata of the aggregator for easier identification\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --name=<value>               name of the aggregator for easier identification\n  --networkId=<option>         [default: testnet] Aptos network to connect to\n                               <options: devnet|testnet|mainnet>\n  --new                        create account at new AptosAccount with authority set to --account\n  --profileName=<value>        [default: default] If --keypair is pointing to a yaml file, provide an optional profile\n                               to load. If none provided, default will be used\n  --programId=<value>          Switchboard programId on the selected Aptos network\n  --updateInterval=<value>     (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>  [default: 0] percentage change between a previous accepted result and the next round\n                               before an oracle reports a value on-chain. Used to conserve lease cost during low\n                               volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aptos aggregator for a given queue\n\nALIASES\n  $ sbv2 aptos create aggregator\n")),(0,r.kt)("h2",{id:"sbv2-aptos-create-crank-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos create crank QUEUEHEXSTRING")),(0,r.kt)("p",null,"create a new crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos create crank QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [--name <value>] [--metadata <value>] [--maxRows\n    <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString of the oracle queue to create a crank for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --maxRows=<value>      [default: 100] maximum number of rows on the crank\n  --metadata=<value>     metadata of the queue for easier identification\n  --name=<value>         name of the queue for easier identification\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --new                  create account at new AptosAccount with authority set to --account\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sbv2 aptos create crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-create-job-queuehexstring-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos create job QUEUEHEXSTRING JOBDEFINITION")),(0,r.kt)("p",null,"create a new job"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos create job QUEUEHEXSTRING JOBDEFINITION --keypair <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name\n    <value>] [--metadata <value>] [--new] [--weight <value>]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n  JOBDEFINITION   filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the job account\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job for easier identification\n  --name=<value>           name of the job for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n  --weight=<value>         [default: 1] job weight to assign\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new job\n\nALIASES\n  $ sbv2 aptos create job\n")),(0,r.kt)("h2",{id:"sbv2-aptos-create-oracle-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos create oracle QUEUEHEXSTRING")),(0,r.kt)("p",null,"create a oracle for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos create oracle QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the oracle\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the oracle for easier identification\n  --name=<value>           name of the oracle for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a oracle for a given queue\n\nALIASES\n  $ sbv2 aptos create oracle\n")),(0,r.kt)("h2",{id:"sbv2-aptos-create-queue"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos create queue")),(0,r.kt)("p",null,"create a new oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos create queue --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--minStake\n    <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled] [--unpermissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers] [--lockLeaseFunding] [--new]\n\nFLAGS\n  -a, --authority=<value>  alternate account HexString that will be the authority for the queue\n  -h, --help               Show CLI help.\n  -r, --reward=<value>     oracle rewards for successfully responding to an update request\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --enableBufferRelayers   enable oracles to fulfill buffer relayer requests\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --lockLeaseFunding       lock lease funding\n  --metadata=<value>       metadata of the queue for easier identification\n  --minStake=<value>       minimum stake required by an oracle to join the queue\n  --name=<value>           name of the queue for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --oracleTimeout=<value>  [default: 180] number of oracles to add to the queue\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n  --queueSize=<value>      [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled        permit slashing malicous oracles\n  --unpermissionedFeeds    permit unpermissioned feeds\n  --unpermissionedVrf      permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 aptos create queue\n")),(0,r.kt)("h2",{id:"sbv2-aptos-job-create-queuehexstring-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos job create QUEUEHEXSTRING JOBDEFINITION")),(0,r.kt)("p",null,"create a new job"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos job create QUEUEHEXSTRING JOBDEFINITION --keypair <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name\n    <value>] [--metadata <value>] [--new] [--weight <value>]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n  JOBDEFINITION   filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the job account\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job for easier identification\n  --name=<value>           name of the job for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n  --weight=<value>         [default: 1] job weight to assign\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new job\n\nALIASES\n  $ sbv2 aptos create job\n")),(0,r.kt)("h2",{id:"sbv2-aptos-list-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos list crank CRANKHEXSTRING")),(0,r.kt)("p",null,"sort the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos list crank CRANKHEXSTRING [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>] [-u\n    <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --networkId=<option>  [default: testnet] Aptos network to connect to\n                        <options: devnet|testnet|mainnet>\n  --programId=<value>   Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  sort the crank\n\nALIASES\n  $ sbv2 aptos list crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-oracle-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos oracle create QUEUEHEXSTRING")),(0,r.kt)("p",null,"create a oracle for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos oracle create QUEUEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the oracle\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the oracle for easier identification\n  --name=<value>           name of the oracle for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a oracle for a given queue\n\nALIASES\n  $ sbv2 aptos create oracle\n")),(0,r.kt)("h2",{id:"sbv2-aptos-oracle-metrics-oraclehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos oracle metrics ORACLEHEXSTRING")),(0,r.kt)("p",null,"list oracle metrics"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos oracle metrics ORACLEHEXSTRING [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--json]\n\nARGUMENTS\n  ORACLEHEXSTRING  HexString address of the oracle\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --networkId=<option>  [default: testnet] Aptos network to connect to\n                        <options: devnet|testnet|mainnet>\n  --programId=<value>   Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  list oracle metrics\n")),(0,r.kt)("h2",{id:"sbv2-aptos-oracle-up-oraclehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos oracle up ORACLEHEXSTRING")),(0,r.kt)("p",null,"start an aptos docker oracle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos oracle up ORACLEHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [-d <value>] [--nodeImage <value>] [--arm]\n\nARGUMENTS\n  ORACLEHEXSTRING  HexString address of the oracle\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress docker logging\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --arm                         apple silicon needs to use a docker image for linux/arm64\n  --keypair=<value>             (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>          [default: testnet] Aptos network to connect to\n                                <options: devnet|testnet|mainnet>\n  --nodeImage=<value>           [default: dev-v2-RC_02_24_23_18_43] public key of the oracle to start-up\n  --profileName=<value>         [default: default] If --keypair is pointing to a yaml file, provide an optional profile\n                                to load. If none provided, default will be used\n  --programId=<value>           Switchboard programId on the selected Aptos network\n\nDESCRIPTION\n  start an aptos docker oracle\n")),(0,r.kt)("h2",{id:"sbv2-aptos-permission-create-granter"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos permission create GRANTER")),(0,r.kt)("p",null,"create a new permission"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos permission create GRANTER --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId\n    <value>] [-u <value>] [--profileName <value>] [--json] [--aggregator <value> | --oracle <value>] [--enable]\n\nARGUMENTS\n  GRANTER  HexString of the oracle queue to create a permission for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --aggregator=<value>   HexString of  the aggregator address to create a permission for\n  --enable               whether to enable the permissions after creation\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --oracle=<value>       HexString of  the aggregator address to create a permission for\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new permission\n")),(0,r.kt)("h2",{id:"sbv2-aptos-permission-set-granter"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos permission set GRANTER")),(0,r.kt)("p",null,"create a new permission"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos permission set GRANTER --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId\n    <value>] [-u <value>] [--profileName <value>] [--json] [--aggregator <value> | --oracle <value>] [--enable]\n\nARGUMENTS\n  GRANTER  HexString of the oracle queue to create a permission for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --aggregator=<value>   HexString of  the aggregator address to create a permission for\n  --enable               whether to enable the permissions after creation\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --oracle=<value>       HexString of  the aggregator address to create a permission for\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new permission\n")),(0,r.kt)("h2",{id:"sbv2-aptos-pop-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos pop crank CRANKHEXSTRING")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos pop crank CRANKHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 aptos pop crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-print-accounttype-address"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos print ACCOUNTTYPE ADDRESS")),(0,r.kt)("p",null,"print an aptos account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos print ACCOUNTTYPE ADDRESS [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId\n    <value>] [-u <value>] [--json]\n\nARGUMENTS\n  ACCOUNTTYPE  (queue|aggregator|crank|oracle|permission|lease|job|state) account type to print\n  ADDRESS      HexString address of the account to print\n\nFLAGS\n  -h, --help            Show CLI help.\n  -s, --silent          suppress cli prompts\n  -u, --rpcUrl=<value>  alternate RPC url\n  -v, --verbose         log everything\n  --networkId=<option>  [default: testnet] Aptos network to connect to\n                        <options: devnet|testnet|mainnet>\n  --programId=<value>   Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aptos account\n\nALIASES\n  $ sbv2 aptos print\n")),(0,r.kt)("h2",{id:"sbv2-aptos-push-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos push crank CRANKHEXSTRING")),(0,r.kt)("p",null,"push an aggregator onto the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos push crank CRANKHEXSTRING --keypair <value> -a <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet|mainnet] [--programId <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -a, --aggregatorHexString=<value>  (required) HexString address of the aggregator\n  -h, --help                         Show CLI help.\n  -s, --silent                       suppress cli prompts\n  -u, --rpcUrl=<value>               alternate RPC url\n  -v, --verbose                      log everything\n  --keypair=<value>                  (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>               [default: testnet] Aptos network to connect to\n                                     <options: devnet|testnet|mainnet>\n  --profileName=<value>              [default: default] If --keypair is pointing to a yaml file, provide an optional\n                                     profile to load. If none provided, default will be used\n  --programId=<value>                Switchboard programId on the selected Aptos network\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sbv2 aptos push crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-queue-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos queue create")),(0,r.kt)("p",null,"create a new oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos queue create --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet] [--programId <value>]\n    [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--minStake\n    <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled] [--unpermissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers] [--lockLeaseFunding] [--new]\n\nFLAGS\n  -a, --authority=<value>  alternate account HexString that will be the authority for the queue\n  -h, --help               Show CLI help.\n  -r, --reward=<value>     oracle rewards for successfully responding to an update request\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --enableBufferRelayers   enable oracles to fulfill buffer relayer requests\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --lockLeaseFunding       lock lease funding\n  --metadata=<value>       metadata of the queue for easier identification\n  --minStake=<value>       minimum stake required by an oracle to join the queue\n  --name=<value>           name of the queue for easier identification\n  --networkId=<option>     [default: testnet] Aptos network to connect to\n                           <options: devnet|testnet|mainnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --oracleTimeout=<value>  [default: 180] number of oracles to add to the queue\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      Switchboard programId on the selected Aptos network\n  --queueSize=<value>      [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled        permit slashing malicous oracles\n  --unpermissionedFeeds    permit unpermissioned feeds\n  --unpermissionedVrf      permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 aptos create queue\n")),(0,r.kt)("h2",{id:"sbv2-aptos-update-aggregator-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos update aggregator AGGREGATORHEXSTRING")),(0,r.kt)("p",null,"request a new value on-chain for an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos update aggregator AGGREGATORHEXSTRING --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet|mainnet]\n    [--programId <value>] [-u <value>] [--profileName <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --keypair=<value>      (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>   [default: testnet] Aptos network to connect to\n                         <options: devnet|testnet|mainnet>\n  --profileName=<value>  [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                         load. If none provided, default will be used\n  --programId=<value>    Switchboard programId on the selected Aptos network\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sbv2 aptos update aggregator\n")))}s.isMDXComponent=!0},33569:(e,a,n)=>{n.d(a,{ZP:()=>s});var t=n(48041),r=(n(49231),n(54852));const o={toc:[{value:"<code>sbv2 near aggregator add history AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-add-history-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator add job AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-add-job-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator create QUEUEADDRESS</code>",id:"sbv2-near-aggregator-create-queueaddress",level:2},{value:"<code>sbv2 near aggregator escrow AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-escrow-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator fetch</code>",id:"sbv2-near-aggregator-fetch",level:2},{value:"<code>sbv2 near aggregator fund AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-fund-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator history add AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-history-add-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator job add AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-job-add-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator job remove AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-job-remove-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator permission create AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-permission-create-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator remove job AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-remove-job-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator set AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-set-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator update AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-update-aggregatoraddress",level:2},{value:"<code>sbv2 near crank create QUEUEADDRESS</code>",id:"sbv2-near-crank-create-queueaddress",level:2},{value:"<code>sbv2 near crank list CRANKADDRESS</code>",id:"sbv2-near-crank-list-crankaddress",level:2},{value:"<code>sbv2 near crank pop CRANKADDRESS</code>",id:"sbv2-near-crank-pop-crankaddress",level:2},{value:"<code>sbv2 near crank push CRANKADDRESS</code>",id:"sbv2-near-crank-push-crankaddress",level:2},{value:"<code>sbv2 near create aggregator QUEUEADDRESS</code>",id:"sbv2-near-create-aggregator-queueaddress",level:2},{value:"<code>sbv2 near create aggregator permission AGGREGATORADDRESS</code>",id:"sbv2-near-create-aggregator-permission-aggregatoraddress",level:2},{value:"<code>sbv2 near create crank QUEUEADDRESS</code>",id:"sbv2-near-create-crank-queueaddress",level:2},{value:"<code>sbv2 near create escrow</code>",id:"sbv2-near-create-escrow",level:2},{value:"<code>sbv2 near create job JOBDEFINITION</code>",id:"sbv2-near-create-job-jobdefinition",level:2},{value:"<code>sbv2 near create oracle QUEUEADDRESS</code>",id:"sbv2-near-create-oracle-queueaddress",level:2},{value:"<code>sbv2 near create oracle permission</code>",id:"sbv2-near-create-oracle-permission",level:2},{value:"<code>sbv2 near create queue</code>",id:"sbv2-near-create-queue",level:2},{value:"<code>sbv2 near escrow create</code>",id:"sbv2-near-escrow-create",level:2},{value:"<code>sbv2 near escrow print</code>",id:"sbv2-near-escrow-print",level:2},{value:"<code>sbv2 near fetch aggregators</code>",id:"sbv2-near-fetch-aggregators",level:2},{value:"<code>sbv2 near fund aggregator AGGREGATORADDRESS</code>",id:"sbv2-near-fund-aggregator-aggregatoraddress",level:2},{value:"<code>sbv2 near job create JOBDEFINITION</code>",id:"sbv2-near-job-create-jobdefinition",level:2},{value:"<code>sbv2 near list queue QUEUEADDRESS</code>",id:"sbv2-near-list-queue-queueaddress",level:2},{value:"<code>sbv2 near oracle create QUEUEADDRESS</code>",id:"sbv2-near-oracle-create-queueaddress",level:2},{value:"<code>sbv2 near oracle escrow ORACLEADDRESS</code>",id:"sbv2-near-oracle-escrow-oracleaddress",level:2},{value:"<code>sbv2 near oracle stake ORACLEADDRESS</code>",id:"sbv2-near-oracle-stake-oracleaddress",level:2},{value:"<code>sbv2 near oracle unstake ORACLEADDRESS</code>",id:"sbv2-near-oracle-unstake-oracleaddress",level:2},{value:"<code>sbv2 near oracle up ORACLEADDRESS</code>",id:"sbv2-near-oracle-up-oracleaddress",level:2},{value:"<code>sbv2 near permission create</code>",id:"sbv2-near-permission-create",level:2},{value:"<code>sbv2 near pop crank CRANKADDRESS</code>",id:"sbv2-near-pop-crank-crankaddress",level:2},{value:"<code>sbv2 near print ACCOUNTTYPE ADDRESS</code>",id:"sbv2-near-print-accounttype-address",level:2},{value:"<code>sbv2 near print escrow</code>",id:"sbv2-near-print-escrow",level:2},{value:"<code>sbv2 near push crank CRANKADDRESS</code>",id:"sbv2-near-push-crank-crankaddress",level:2},{value:"<code>sbv2 near queue aggregators QUEUEADDRESS</code>",id:"sbv2-near-queue-aggregators-queueaddress",level:2},{value:"<code>sbv2 near queue create</code>",id:"sbv2-near-queue-create",level:2},{value:"<code>sbv2 near queue feeds QUEUEADDRESS</code>",id:"sbv2-near-queue-feeds-queueaddress",level:2},{value:"<code>sbv2 near queue list QUEUEADDRESS</code>",id:"sbv2-near-queue-list-queueaddress",level:2},{value:"<code>sbv2 near queue set QUEUEADDRESS</code>",id:"sbv2-near-queue-set-queueaddress",level:2},{value:"<code>sbv2 near set aggregator AGGREGATORADDRESS</code>",id:"sbv2-near-set-aggregator-aggregatoraddress",level:2},{value:"<code>sbv2 near update aggregator AGGREGATORADDRESS</code>",id:"sbv2-near-update-aggregator-aggregatoraddress",level:2}]},l="wrapper";function s(e){let{components:a,...n}=e;return(0,r.kt)(l,(0,t.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"interact with switchboard on Near"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-add-history-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator add history AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-add-job-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator add job AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator create QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-escrow-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator escrow AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-fetch"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator fetch"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-fund-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator fund AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-history-add-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator history add AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-job-add-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator job add AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-job-remove-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator job remove AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-permission-create-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator permission create AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-remove-job-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator remove job AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-set-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator set AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-update-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator update AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-crank-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near crank create QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-crank-list-crankaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near crank list CRANKADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-crank-pop-crankaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near crank pop CRANKADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-crank-push-crankaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near crank push CRANKADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-aggregator-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create aggregator QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-aggregator-permission-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create aggregator permission AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-crank-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create crank QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-escrow"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create escrow"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-job-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create job JOBDEFINITION"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-oracle-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create oracle QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-oracle-permission"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create oracle permission"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-queue"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create queue"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-escrow-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near escrow create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-escrow-print"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near escrow print"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-fetch-aggregators"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near fetch aggregators"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-fund-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near fund aggregator AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-job-create-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near job create JOBDEFINITION"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-list-queue-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near list queue QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle create QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-escrow-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle escrow ORACLEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-stake-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle stake ORACLEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-unstake-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle unstake ORACLEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-up-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle up ORACLEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-permission-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near permission create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-pop-crank-crankaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near pop crank CRANKADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-print-accounttype-address"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near print ACCOUNTTYPE ADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-print-escrow"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near print escrow"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-push-crank-crankaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near push crank CRANKADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-queue-aggregators-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near queue aggregators QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-queue-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near queue create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-queue-feeds-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near queue feeds QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-queue-list-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near queue list QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-queue-set-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near queue set QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-set-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near set aggregator AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-update-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near update aggregator AGGREGATORADDRESS")))),(0,r.kt)("h2",{id:"sbv2-near-aggregator-add-history-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator add history AGGREGATORADDRESS")),(0,r.kt)("p",null,"add rows to a history vector"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator add history AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--numRows\n    <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --numRows=<value>             [default: 1000] number of rows to add to the aggregator\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add rows to a history vector\n\nALIASES\n  $ sbv2 near aggregator history add\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-add-job-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator add job AGGREGATORADDRESS")),(0,r.kt)("p",null,"add a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator add job AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--name <value> | --jobKey <value>] [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --jobDefinition=<value>       filesystem path of job json definition file\n  --jobKey=<value>              public key of an existing job account to add to an aggregator\n  --jobWeight=<value>           [default: 1] job weight\n  --metadata=<value>            metadata of the job account\n  --name=<value>                name of the job account\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job add\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator create QUEUEADDRESS")),(0,r.kt)("p",null,"create a near aggregator for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator create QUEUEADDRESS --accountName <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize <value>]\n    [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [--rewardEscrow <value>] [--enable]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --enable                      if required and queue authority is provided, enable permissions\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --rewardEscrow=<value>        where to send rewards. defaults to user's escrow account\n  --updateInterval=<value>      (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>   [default: 0] percentage change between a previous accepted result and the next round\n                                before an oracle reports a value on-chain. Used to conserve lease cost during low\n                                volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near aggregator for a given queue\n\nALIASES\n  $ sbv2 near create aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-escrow-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator escrow AGGREGATORADDRESS")),(0,r.kt)("p",null,"view an aggregators escrow state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator escrow AGGREGATORADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nDESCRIPTION\n  view an aggregators escrow state\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-fetch"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator fetch")),(0,r.kt)("p",null,"fetch all aggregators for a given near account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator fetch --accountId <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountId=<value>           (required) optional, authority to fetch aggregators for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given near account\n\nALIASES\n  $ sbv2 near fetch aggregators\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-fund-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator fund AGGREGATORADDRESS")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator fund AGGREGATORADDRESS --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --amount=<value>          (required) amount to deposit into the aggregator's lease\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sbv2 near fund aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-history-add-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator history add AGGREGATORADDRESS")),(0,r.kt)("p",null,"add rows to a history vector"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator history add AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--numRows\n    <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --numRows=<value>             [default: 1000] number of rows to add to the aggregator\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add rows to a history vector\n\nALIASES\n  $ sbv2 near aggregator history add\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-job-add-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator job add AGGREGATORADDRESS")),(0,r.kt)("p",null,"add a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator job add AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--name <value> | --jobKey <value>] [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --jobDefinition=<value>       filesystem path of job json definition file\n  --jobKey=<value>              public key of an existing job account to add to an aggregator\n  --jobWeight=<value>           [default: 1] job weight\n  --metadata=<value>            metadata of the job account\n  --name=<value>                name of the job account\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job add\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-job-remove-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator job remove AGGREGATORADDRESS")),(0,r.kt)("p",null,"remove a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator job remove AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [-j <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -j, --jobAddress=<value>...   public key of an existing job account to remove from an aggregator\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  remove a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job remove\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-permission-create-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator permission create AGGREGATORADDRESS")),(0,r.kt)("p",null,"create a permission account for a near aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator permission create AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account for a near aggregator\n\nALIASES\n  $ sbv2 near create aggregator permission\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-remove-job-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator remove job AGGREGATORADDRESS")),(0,r.kt)("p",null,"remove a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator remove job AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [-j <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -j, --jobAddress=<value>...   public key of an existing job account to remove from an aggregator\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  remove a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job remove\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-set-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator set AGGREGATORADDRESS")),(0,r.kt)("p",null,"set a near aggregator's config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator set AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--queueAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod\n    <value>] [--batchSize <value>] [--minJobs <value>] [--minOracles <value>] [--updateInterval <value>]\n    [--varianceThreshold <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --queueAddress=<value>        optional, address of the new queue to add the aggregator to\n  --updateInterval=<value>      set an aggregator's minimum update delay\n  --varianceThreshold=<value>   percentage change between a previous accepted result and the next round before an oracle\n                                reports a value on-chain. Used to conserve lease cost during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set a near aggregator's config\n\nALIASES\n  $ sbv2 near set aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-update-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator update AGGREGATORADDRESS")),(0,r.kt)("p",null,"request a new value on-chain for an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator update AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sbv2 near update aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-crank-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank create QUEUEADDRESS")),(0,r.kt)("p",null,"create a new crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank create QUEUEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--name <value>] [--metadata <value>]\n    [--maxRows <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --maxRows=<value>             [default: 100] maximum number of rows on the crank\n  --metadata=<value>            metadata of the crank for easier identification\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sbv2 near create crank\n")),(0,r.kt)("h2",{id:"sbv2-near-crank-list-crankaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank list CRANKADDRESS")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank list CRANKADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 near pop crank\n")),(0,r.kt)("h2",{id:"sbv2-near-crank-pop-crankaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank pop CRANKADDRESS")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank pop CRANKADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 near pop crank\n")),(0,r.kt)("h2",{id:"sbv2-near-crank-push-crankaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank push CRANKADDRESS")),(0,r.kt)("p",null,"push an aggregator onto the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank push CRANKADDRESS --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --aggregatorAddress=<value>  (required) address of the aggregator in Uint8 or Base58 encoding\n  -h, --help                       Show CLI help.\n  -s, --silent                     suppress cli prompts\n  -u, --rpcUrl=<value>             alternate RPC url\n  -v, --verbose                    log everything\n  --accountName=<value>            (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>     [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                   Defaults to ~/.near-credentials\n  --networkId=<option>             [default: testnet] Near network ID to connect to\n                                   <options: testnet|mainnet|localnet>\n  --programId=<value>              Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sbv2 near push crank\n")),(0,r.kt)("h2",{id:"sbv2-near-create-aggregator-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create aggregator QUEUEADDRESS")),(0,r.kt)("p",null,"create a near aggregator for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create aggregator QUEUEADDRESS --accountName <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize <value>]\n    [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [--rewardEscrow <value>] [--enable]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --enable                      if required and queue authority is provided, enable permissions\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --rewardEscrow=<value>        where to send rewards. defaults to user's escrow account\n  --updateInterval=<value>      (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>   [default: 0] percentage change between a previous accepted result and the next round\n                                before an oracle reports a value on-chain. Used to conserve lease cost during low\n                                volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near aggregator for a given queue\n\nALIASES\n  $ sbv2 near create aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-create-aggregator-permission-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create aggregator permission AGGREGATORADDRESS")),(0,r.kt)("p",null,"create a permission account for a near aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create aggregator permission AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account for a near aggregator\n\nALIASES\n  $ sbv2 near create aggregator permission\n")),(0,r.kt)("h2",{id:"sbv2-near-create-crank-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create crank QUEUEADDRESS")),(0,r.kt)("p",null,"create a new crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create crank QUEUEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--name <value>] [--metadata <value>]\n    [--maxRows <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --maxRows=<value>             [default: 100] maximum number of rows on the crank\n  --metadata=<value>            metadata of the crank for easier identification\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sbv2 near create crank\n")),(0,r.kt)("h2",{id:"sbv2-near-create-escrow"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create escrow")),(0,r.kt)("p",null,"create an escrow token account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create escrow --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--mint <value>]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --mint=<value>                [default: wrap.test] token mint to create escrow account for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an escrow token account\n\nALIASES\n  $ sbv2 near create escrow\n")),(0,r.kt)("h2",{id:"sbv2-near-create-job-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create job JOBDEFINITION")),(0,r.kt)("p",null,"create a job on near"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create job JOBDEFINITION --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>]\n\nARGUMENTS\n  JOBDEFINITION  filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the job account\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the job for easier identification\n  --name=<value>                name of the job for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a job on near\n\nALIASES\n  $ sbv2 near create job\n")),(0,r.kt)("h2",{id:"sbv2-near-create-oracle-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create oracle QUEUEADDRESS")),(0,r.kt)("p",null,"create a near oracle for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create oracle QUEUEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the oracle for easier identification\n  --name=<value>                name of the oracle for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near oracle for a given queue\n\nALIASES\n  $ sbv2 near create oracle\n")),(0,r.kt)("h2",{id:"sbv2-near-create-oracle-permission"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create oracle permission")),(0,r.kt)("p",null,"create a permission account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create oracle permission --accountName <value> --granter <value> --grantee <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--enable]\n\nFLAGS\n  -a, --authority=<value>       alternate account that is the granters authority\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enable                      enable permissions\n  --grantee=<value>             (required) account that will be granted permissions, typically an Oracle or Aggregator\n  --granter=<value>             (required) account that will grant permissions, typically the OracleQueue\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account\n\nALIASES\n  $ sbv2 near create oracle permission\n")),(0,r.kt)("h2",{id:"sbv2-near-create-queue"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create queue")),(0,r.kt)("p",null,"create a new oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create queue --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata <value>]\n    [--minStake <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled]\n    [--unpermissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the queue\n  -h, --help                    Show CLI help.\n  -r, --reward=<value>          [default: 0] oracle rewards for successfully responding to an update request\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enableBufferRelayers        enable oracles to fulfill buffer relayer requests\n  --metadata=<value>            metadata of the queue for easier identification\n  --minStake=<value>            [default: 0] minimum stake required by an oracle to join the queue\n  --name=<value>                name of the queue for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --oracleTimeout=<value>       [default: 180] number of oracles to add to the queue\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --queueSize=<value>           [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled             permit slashing malicous oracles\n  --unpermissionedFeeds         permit unpermissioned feeds\n  --unpermissionedVrf           permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 near create queue\n")),(0,r.kt)("h2",{id:"sbv2-near-escrow-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near escrow create")),(0,r.kt)("p",null,"create an escrow token account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near escrow create --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--mint <value>]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --mint=<value>                [default: wrap.test] token mint to create escrow account for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an escrow token account\n\nALIASES\n  $ sbv2 near create escrow\n")),(0,r.kt)("h2",{id:"sbv2-near-escrow-print"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near escrow print")),(0,r.kt)("p",null,"print an escrow token account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near escrow print --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an escrow token account\n\nALIASES\n  $ sbv2 near print escrow\n")),(0,r.kt)("h2",{id:"sbv2-near-fetch-aggregators"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near fetch aggregators")),(0,r.kt)("p",null,"fetch all aggregators for a given near account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near fetch aggregators --accountId <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountId=<value>           (required) optional, authority to fetch aggregators for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given near account\n\nALIASES\n  $ sbv2 near fetch aggregators\n")),(0,r.kt)("h2",{id:"sbv2-near-fund-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near fund aggregator AGGREGATORADDRESS")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near fund aggregator AGGREGATORADDRESS --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --amount=<value>          (required) amount to deposit into the aggregator's lease\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sbv2 near fund aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-job-create-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near job create JOBDEFINITION")),(0,r.kt)("p",null,"create a job on near"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near job create JOBDEFINITION --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>]\n\nARGUMENTS\n  JOBDEFINITION  filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the job account\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the job for easier identification\n  --name=<value>                name of the job for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a job on near\n\nALIASES\n  $ sbv2 near create job\n")),(0,r.kt)("h2",{id:"sbv2-near-list-queue-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near list queue QUEUEADDRESS")),(0,r.kt)("p",null,"list aggregators for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near list queue QUEUEADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  list aggregators for a given queue\n\nALIASES\n  $ sbv2 near list queue\n")),(0,r.kt)("h2",{id:"sbv2-near-oracle-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle create QUEUEADDRESS")),(0,r.kt)("p",null,"create a near oracle for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle create QUEUEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the oracle for easier identification\n  --name=<value>                name of the oracle for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near oracle for a given queue\n\nALIASES\n  $ sbv2 near create oracle\n")),(0,r.kt)("h2",{id:"sbv2-near-oracle-escrow-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle escrow ORACLEADDRESS")),(0,r.kt)("p",null,"view an aggregators escrow state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle escrow ORACLEADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>]\n    [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  view an aggregators escrow state\n")),(0,r.kt)("h2",{id:"sbv2-near-oracle-stake-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle stake ORACLEADDRESS")),(0,r.kt)("p",null,"deposit funds to an oracle's staking wallet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle stake ORACLEADDRESS --accountName <value> --amount <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --amount=<value>              (required) amount of Near to deposit into oracle staking wallet\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  deposit funds to an oracle's staking wallet\n")),(0,r.kt)("h2",{id:"sbv2-near-oracle-unstake-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle unstake ORACLEADDRESS")),(0,r.kt)("p",null,"deposit funds to an oracle's staking wallet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle unstake ORACLEADDRESS --accountName <value> --amount <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --amount=<value>              (required) amount of Near to unstake from oracle staking wallet\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  deposit funds to an oracle's staking wallet\n")),(0,r.kt)("h2",{id:"sbv2-near-oracle-up-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle up ORACLEADDRESS")),(0,r.kt)("p",null,"start a near docker oracle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle up ORACLEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-d <value>] [--nodeImage <value>]\n    [--arm]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress docker logging\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --arm                         apple silicon needs to use a docker image for linux/arm64\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --nodeImage=<value>           [default: dev-v2-RC_02_24_23_18_43] public key of the oracle to start-up\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  start a near docker oracle\n")),(0,r.kt)("h2",{id:"sbv2-near-permission-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near permission create")),(0,r.kt)("p",null,"create a permission account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near permission create --accountName <value> --granter <value> --grantee <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--enable]\n\nFLAGS\n  -a, --authority=<value>       alternate account that is the granters authority\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enable                      enable permissions\n  --grantee=<value>             (required) account that will be granted permissions, typically an Oracle or Aggregator\n  --granter=<value>             (required) account that will grant permissions, typically the OracleQueue\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account\n\nALIASES\n  $ sbv2 near create oracle permission\n")),(0,r.kt)("h2",{id:"sbv2-near-pop-crank-crankaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near pop crank CRANKADDRESS")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near pop crank CRANKADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 near pop crank\n")),(0,r.kt)("h2",{id:"sbv2-near-print-accounttype-address"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near print ACCOUNTTYPE ADDRESS")),(0,r.kt)("p",null,"print a near switchboard account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near print ACCOUNTTYPE ADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--all]\n\nARGUMENTS\n  ACCOUNTTYPE  (queue|aggregator|crank|oracle|permission|lease|job) account type to print\n  ADDRESS      address of the account to print in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --all                         print all account attributes including jobs, permissions, and leases\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a near switchboard account\n\nALIASES\n  $ sbv2 near print\n")),(0,r.kt)("h2",{id:"sbv2-near-print-escrow"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near print escrow")),(0,r.kt)("p",null,"print an escrow token account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near print escrow --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an escrow token account\n\nALIASES\n  $ sbv2 near print escrow\n")),(0,r.kt)("h2",{id:"sbv2-near-push-crank-crankaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near push crank CRANKADDRESS")),(0,r.kt)("p",null,"push an aggregator onto the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near push crank CRANKADDRESS --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --aggregatorAddress=<value>  (required) address of the aggregator in Uint8 or Base58 encoding\n  -h, --help                       Show CLI help.\n  -s, --silent                     suppress cli prompts\n  -u, --rpcUrl=<value>             alternate RPC url\n  -v, --verbose                    log everything\n  --accountName=<value>            (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>     [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                   Defaults to ~/.near-credentials\n  --networkId=<option>             [default: testnet] Near network ID to connect to\n                                   <options: testnet|mainnet|localnet>\n  --programId=<value>              Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sbv2 near push crank\n")),(0,r.kt)("h2",{id:"sbv2-near-queue-aggregators-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue aggregators QUEUEADDRESS")),(0,r.kt)("p",null,"fetch all aggregators for a given queue account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue aggregators QUEUEADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given queue account\n\nALIASES\n  $ sbv2 near queue feeds\n")),(0,r.kt)("h2",{id:"sbv2-near-queue-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue create")),(0,r.kt)("p",null,"create a new oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue create --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata <value>]\n    [--minStake <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled]\n    [--unpermissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the queue\n  -h, --help                    Show CLI help.\n  -r, --reward=<value>          [default: 0] oracle rewards for successfully responding to an update request\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enableBufferRelayers        enable oracles to fulfill buffer relayer requests\n  --metadata=<value>            metadata of the queue for easier identification\n  --minStake=<value>            [default: 0] minimum stake required by an oracle to join the queue\n  --name=<value>                name of the queue for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --oracleTimeout=<value>       [default: 180] number of oracles to add to the queue\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --queueSize=<value>           [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled             permit slashing malicous oracles\n  --unpermissionedFeeds         permit unpermissioned feeds\n  --unpermissionedVrf           permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 near create queue\n")),(0,r.kt)("h2",{id:"sbv2-near-queue-feeds-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue feeds QUEUEADDRESS")),(0,r.kt)("p",null,"fetch all aggregators for a given queue account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue feeds QUEUEADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given queue account\n\nALIASES\n  $ sbv2 near queue feeds\n")),(0,r.kt)("h2",{id:"sbv2-near-queue-list-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue list QUEUEADDRESS")),(0,r.kt)("p",null,"list aggregators for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue list QUEUEADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  list aggregators for a given queue\n\nALIASES\n  $ sbv2 near list queue\n")),(0,r.kt)("h2",{id:"sbv2-near-queue-set-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue set QUEUEADDRESS")),(0,r.kt)("p",null,"create a new oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue set QUEUEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--minStake <value>] [-r <value>] [--oracleTimeout <value>] [--slashingEnabled] [--unpermissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the queue\n  -h, --help                    Show CLI help.\n  -r, --reward=<value>          oracle rewards for successfully responding to an update request\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enableBufferRelayers        enable oracles to fulfill buffer relayer requests\n  --metadata=<value>            metadata of the queue for easier identification\n  --minStake=<value>            minimum stake required by an oracle to join the queue\n  --name=<value>                name of the queue for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --oracleTimeout=<value>       number of oracles to add to the queue\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --slashingEnabled             permit slashing malicous oracles\n  --unpermissionedFeeds         permit unpermissioned feeds\n  --unpermissionedVrf           permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 near create queue\n")),(0,r.kt)("h2",{id:"sbv2-near-set-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near set aggregator AGGREGATORADDRESS")),(0,r.kt)("p",null,"set a near aggregator's config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near set aggregator AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--queueAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod\n    <value>] [--batchSize <value>] [--minJobs <value>] [--minOracles <value>] [--updateInterval <value>]\n    [--varianceThreshold <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --queueAddress=<value>        optional, address of the new queue to add the aggregator to\n  --updateInterval=<value>      set an aggregator's minimum update delay\n  --varianceThreshold=<value>   percentage change between a previous accepted result and the next round before an oracle\n                                reports a value on-chain. Used to conserve lease cost during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set a near aggregator's config\n\nALIASES\n  $ sbv2 near set aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-update-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near update aggregator AGGREGATORADDRESS")),(0,r.kt)("p",null,"request a new value on-chain for an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near update aggregator AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sbv2 near update aggregator\n")))}s.isMDXComponent=!0},23676:(e,a,n)=>{n.d(a,{ZP:()=>s});var t=n(48041),r=(n(49231),n(54852));const o={toc:[{value:"<code>sbv2 solana aggregator add history AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-add-history-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator add job AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-add-job-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator authority AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-authority-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator close AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-close-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator create QUEUEKEY</code>",id:"sbv2-solana-aggregator-create-queuekey",level:2},{value:"<code>sbv2 solana aggregator create json DEFINITIONFILE</code>",id:"sbv2-solana-aggregator-create-json-definitionfile",level:2},{value:"<code>sbv2 solana aggregator deposit AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-deposit-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator extend AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-extend-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator fund AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-fund-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator history AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-history-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator lease set AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-lease-set-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator list AUTHORITYKEY</code>",id:"sbv2-solana-aggregator-list-authoritykey",level:2},{value:"<code>sbv2 solana aggregator lock AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-lock-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator metrics AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-metrics-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator open-round AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-open-round-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator permission create AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-permission-create-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator print AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-print-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator remove job AGGREGATORKEY JOBKEY</code>",id:"sbv2-solana-aggregator-remove-job-aggregatorkey-jobkey",level:2},{value:"<code>sbv2 solana aggregator set AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-set-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator transfer AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-transfer-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator update AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-update-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator watch AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-watch-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator withdraw AGGREGATORKEY</code>",id:"sbv2-solana-aggregator-withdraw-aggregatorkey",level:2},{value:"<code>sbv2 solana anchor test</code>",id:"sbv2-solana-anchor-test",level:2},{value:"<code>sbv2 solana buffer create QUEUEKEY</code>",id:"sbv2-solana-buffer-create-queuekey",level:2},{value:"<code>sbv2 solana buffer open-round BUFFERRELAYERKEY</code>",id:"sbv2-solana-buffer-open-round-bufferrelayerkey",level:2},{value:"<code>sbv2 solana buffer update BUFFERRELAYERKEY</code>",id:"sbv2-solana-buffer-update-bufferrelayerkey",level:2},{value:"<code>sbv2 solana crank create QUEUEKEY</code>",id:"sbv2-solana-crank-create-queuekey",level:2},{value:"<code>sbv2 solana crank events AGGREGATORKEY</code>",id:"sbv2-solana-crank-events-aggregatorkey",level:2},{value:"<code>sbv2 solana crank pop CRANKKEY</code>",id:"sbv2-solana-crank-pop-crankkey",level:2},{value:"<code>sbv2 solana crank print CRANKKEY</code>",id:"sbv2-solana-crank-print-crankkey",level:2},{value:"<code>sbv2 solana crank push AGGREGATORKEY</code>",id:"sbv2-solana-crank-push-aggregatorkey",level:2},{value:"<code>sbv2 solana job create</code>",id:"sbv2-solana-job-create",level:2},{value:"<code>sbv2 solana job print JOBKEY</code>",id:"sbv2-solana-job-print-jobkey",level:2},{value:"<code>sbv2 solana json create aggregator DEFINITIONFILE</code>",id:"sbv2-solana-json-create-aggregator-definitionfile",level:2},{value:"<code>sbv2 solana lease create AGGREGATORKEY</code>",id:"sbv2-solana-lease-create-aggregatorkey",level:2},{value:"<code>sbv2 solana lease extend AGGREGATORKEY</code>",id:"sbv2-solana-lease-extend-aggregatorkey",level:2},{value:"<code>sbv2 solana lease print LEASEKEY</code>",id:"sbv2-solana-lease-print-leasekey",level:2},{value:"<code>sbv2 solana lease set AGGREGATORKEY</code>",id:"sbv2-solana-lease-set-aggregatorkey",level:2},{value:"<code>sbv2 solana lease withdraw AGGREGATORKEY</code>",id:"sbv2-solana-lease-withdraw-aggregatorkey",level:2},{value:"<code>sbv2 solana localnet env</code>",id:"sbv2-solana-localnet-env",level:2},{value:"<code>sbv2 solana localnet up</code>",id:"sbv2-solana-localnet-up",level:2},{value:"<code>sbv2 solana network create</code>",id:"sbv2-solana-network-create",level:2},{value:"<code>sbv2 solana network save</code>",id:"sbv2-solana-network-save",level:2},{value:"<code>sbv2 solana network start</code>",id:"sbv2-solana-network-start",level:2},{value:"<code>sbv2 solana oracle create QUEUEKEY</code>",id:"sbv2-solana-oracle-create-queuekey",level:2},{value:"<code>sbv2 solana oracle print ORACLEKEY</code>",id:"sbv2-solana-oracle-print-oraclekey",level:2},{value:"<code>sbv2 solana oracle up</code>",id:"sbv2-solana-oracle-up",level:2},{value:"<code>sbv2 solana oracle withdraw ORACLEKEY</code>",id:"sbv2-solana-oracle-withdraw-oraclekey",level:2},{value:"<code>sbv2 solana permission create</code>",id:"sbv2-solana-permission-create",level:2},{value:"<code>sbv2 solana permission grant PERMISSIONKEY</code>",id:"sbv2-solana-permission-grant-permissionkey",level:2},{value:"<code>sbv2 solana permission print PERMISSIONKEY</code>",id:"sbv2-solana-permission-print-permissionkey",level:2},{value:"<code>sbv2 solana permission revoke PERMISSIONKEY</code>",id:"sbv2-solana-permission-revoke-permissionkey",level:2},{value:"<code>sbv2 solana print PUBKEY</code>",id:"sbv2-solana-print-pubkey",level:2},{value:"<code>sbv2 solana queue create</code>",id:"sbv2-solana-queue-create",level:2},{value:"<code>sbv2 solana queue print QUEUEKEY</code>",id:"sbv2-solana-queue-print-queuekey",level:2},{value:"<code>sbv2 solana queue set QUEUEKEY</code>",id:"sbv2-solana-queue-set-queuekey",level:2},{value:"<code>sbv2 solana vrf open-round VRFKEY</code>",id:"sbv2-solana-vrf-open-round-vrfkey",level:2},{value:"<code>sbv2 solana vrf print VRFKEY</code>",id:"sbv2-solana-vrf-print-vrfkey",level:2},{value:"<code>sbv2 solana vrf request VRFKEY</code>",id:"sbv2-solana-vrf-request-vrfkey",level:2},{value:"<code>sbv2 solana vrf update VRFKEY</code>",id:"sbv2-solana-vrf-update-vrfkey",level:2}]},l="wrapper";function s(e){let{components:a,...n}=e;return(0,r.kt)(l,(0,t.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"interact with switchboard on Solana"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-add-history-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator add history AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-add-job-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator add job AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-authority-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator authority AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-close-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator close AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator create QUEUEKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-create-json-definitionfile"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator create json DEFINITIONFILE"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-deposit-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator deposit AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-extend-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator extend AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-fund-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator fund AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-history-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator history AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-lease-set-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator lease set AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-list-authoritykey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator list AUTHORITYKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-lock-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator lock AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-metrics-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator metrics AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-open-round-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator open-round AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-permission-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator permission create AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-print-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator print AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-remove-job-aggregatorkey-jobkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator remove job AGGREGATORKEY JOBKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-transfer-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator transfer AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-update-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator update AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-watch-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator watch AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-withdraw-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator withdraw AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-anchor-test"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana anchor test"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-buffer-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana buffer create QUEUEKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-buffer-open-round-bufferrelayerkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana buffer open-round BUFFERRELAYERKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-buffer-update-bufferrelayerkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana buffer update BUFFERRELAYERKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank create QUEUEKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-events-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank events AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-pop-crankkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank pop CRANKKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-print-crankkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank print CRANKKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-push-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank push AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-job-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana job create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-job-print-jobkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana job print JOBKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-json-create-aggregator-definitionfile"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana json create aggregator DEFINITIONFILE"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease create AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-extend-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease extend AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-print-leasekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease print LEASEKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-set-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease set AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-withdraw-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease withdraw AGGREGATORKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-localnet-env"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana localnet env"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-localnet-up"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana localnet up"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-network-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana network create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-network-save"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana network save"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-network-start"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana network start"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle create QUEUEKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-print-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle print ORACLEKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-up"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle up"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-withdraw-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle withdraw ORACLEKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-grant-permissionkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission grant PERMISSIONKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-print-permissionkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission print PERMISSIONKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-revoke-permissionkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission revoke PERMISSIONKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-pubkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print PUBKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-queue-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana queue create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-queue-print-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana queue print QUEUEKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-queue-set-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana queue set QUEUEKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-open-round-vrfkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf open-round VRFKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-print-vrfkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf print VRFKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-request-vrfkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf request VRFKEY"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-update-vrfkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf update VRFKEY")))),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-add-history-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator add history AGGREGATORKEY")),(0,r.kt)("p",null,"add a history buffer to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator add history AGGREGATORKEY --historyLimit <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--force] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --force                  overwrite an existing history buffer if one already exists\n  --historyLimit=<value>   (required) the number of samples to store before overwriting old samples\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  add a history buffer to an aggregator\n\nEXAMPLES\n  $ sbv2 solana:aggregator:add:history\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-add-job-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator add job AGGREGATORKEY")),(0,r.kt)("p",null,"add jobs to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator add job AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--jobDefinition <value>] [--jobKey\n    <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>     alternate keypair that is the authority for the aggregator\n  -h, --help                  Show CLI help.\n  -k, --keypair=<value>       keypair that will pay for onchain transactions. defaults to new account authority if no\n                              alternate authority provided\n  -s, --silent                suppress cli prompts\n  -u, --rpcUrl=<value>        alternate RPC url\n  -v, --verbose               log everything\n  --cluster=<option>          the solana cluster to connect to\n                              <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>       [default: confirmed] transaction commitment level to use\n                              <options: confirmed|finalized|processed>\n  --jobDefinition=<value>...  filesystem path of job json definition file\n  --jobKey=<value>...         public key of an existing job account to add to an aggregator\n  --ledger                    enable ledger support\n  --ledgerPath=<value>        HID path to the ledger\n  --mainnetBeta               WARNING: use mainnet-beta solana cluster\n  --programId=<value>         alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  add jobs to an aggregator\n\nEXAMPLES\n  $ sbv2 solana aggregator add job\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-authority-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator authority AGGREGATORKEY")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator authority AGGREGATORKEY --newAuthority <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator and required to make config\n                           changes\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --newAuthority=<value>   (required)\n  --programId=<value>      alternative Switchboard program ID to interact with\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-close-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator close AGGREGATORKEY")),(0,r.kt)("p",null,"close an aggregator and associated PDA accounts on devnet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator close AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator and required to make config\n                           changes\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  close an aggregator and associated PDA accounts on devnet\n\nEXAMPLES\n  $ sbv2 solana aggregator close J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator create QUEUEKEY")),(0,r.kt)("p",null,"create an aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator create QUEUEKEY --updateInterval <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--aggregatorKeypair <value>] [--name <value>] [--metadata <value>] [--batchSize <value>] [--minJobs <value>]\n    [--minOracles <value>] [--forceReportPeriod <value>] [--varianceThreshold <value>] [--historyLimit <value>]\n    [--crankKey <value> | --disableCrank] [--queueAuthority <value>] [--enable] [--leaseAmount <value>] [-j <value>]\n    [--jobKey <value>] [--slidingWindow] [--basePriorityFee <value>] [--priorityFeeBump <value>]\n    [--priorityFeeBumpPeriod <value>] [--maxPriorityFeeMultiplier <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create an aggregator on\n\nFLAGS\n  -a, --authority=<value>             alternate keypair that is the authority for the aggregator\n  -h, --help                          Show CLI help.\n  -j, --job=<value>...                filesystem path to job definition file\n  -k, --keypair=<value>               keypair that will pay for onchain transactions. defaults to new account authority\n                                      if no alternate authority provided\n  -s, --silent                        suppress cli prompts\n  -u, --rpcUrl=<value>                alternate RPC url\n  -v, --verbose                       log everything\n  --aggregatorKeypair=<value>         keypair to use for aggregator account. This will be the account's publicKey\n  --basePriorityFee=<value>\n  --batchSize=<value>                 [default: 1] number of oracles requested for each open round call\n  --cluster=<option>                  the solana cluster to connect to\n                                      <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>               [default: confirmed] transaction commitment level to use\n                                      <options: confirmed|finalized|processed>\n  --crankKey=<value>                  public key of the crank to join\n  --disableCrank                      whether the newly created feed can be pushed onto a crank. irreversible\n  --enable                            set permissions to PERMIT_ORACLE_QUEUE_USAGE\n  --forceReportPeriod=<value>         Number of seconds for which, even if the variance threshold is not passed, accept\n                                      new responses from oracles.\n  --historyLimit=<value>              number of historical samples to store\n  --jobKey=<value>...                 public key of existing job account\n  --leaseAmount=<value>               [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5\n                                      wSOL\n  --ledger                            enable ledger support\n  --ledgerPath=<value>                HID path to the ledger\n  --mainnetBeta                       WARNING: use mainnet-beta solana cluster\n  --maxPriorityFeeMultiplier=<value>\n  --metadata=<value>                  metadata of the aggregator\n  --minJobs=<value>                   [default: 1] number of jobs that must respond before an oracle responds\n  --minOracles=<value>                [default: 1] number of oracles that must respond before a value is accepted\n                                      on-chain\n  --name=<value>                      name of the aggregator\n  --priorityFeeBump=<value>\n  --priorityFeeBumpPeriod=<value>\n  --programId=<value>                 alternative Switchboard program ID to interact with\n  --queueAuthority=<value>            alternative keypair to use for queue authority\n  --slidingWindow                     enable sliding window resolution mode\n  --updateInterval=<value>            (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>         [default: 0] percentage change between a previous accepted result and the next\n                                      round before an oracle reports a value on-chain. Used to conserve lease cost\n                                      during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator account\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-create-json-definitionfile"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator create json DEFINITIONFILE")),(0,r.kt)("p",null,"create an aggregator from a json file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator create json DEFINITIONFILE [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-q <value>] [-a <value>]\n    [--leaseAmount <value>]\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of queue definition json file\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -q, --queueKey=<value>   public key of the oracle queue to create aggregator for\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --leaseAmount=<value>    [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5 wSOL\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator from a json file\n\nALIASES\n  $ sbv2 solana json create aggregator\n\nEXAMPLES\n  $ sbv2 solana aggregator create json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-deposit-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator deposit AGGREGATORKEY")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator deposit AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) amount to deposit into the lease escrow\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator fund\n  $ sbv2 solana aggregator deposit\n  $ sbv2 solana aggregator extend\n\nEXAMPLES\n  $ sbv2 solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-extend-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator extend AGGREGATORKEY")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator extend AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) amount to deposit into the lease escrow\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator fund\n  $ sbv2 solana aggregator deposit\n  $ sbv2 solana aggregator extend\n\nEXAMPLES\n  $ sbv2 solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-fund-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator fund AGGREGATORKEY")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator fund AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) amount to deposit into the lease escrow\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator fund\n  $ sbv2 solana aggregator deposit\n  $ sbv2 solana aggregator extend\n\nEXAMPLES\n  $ sbv2 solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-history-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator history AGGREGATORKEY")),(0,r.kt)("p",null,"print an aggregator's history'"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator history AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json] [--metrics]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --metrics              print metrics on an aggregators history like average update interval\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aggregator's history'\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-lease-set-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator lease set AGGREGATORKEY")),(0,r.kt)("p",null,"set a lease's withdraw authority"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator lease set AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>] [--queuePubkey <value>]\n    [--newAuthority <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair delegated as the authority for managing the lease account\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --newAuthority=<value>   new lease withdraw authority. if not set, defaults to the aggregator authority\n  --programId=<value>      alternative Switchboard program ID to interact with\n  --queuePubkey=<value>    override the aggregators current queue. useful for withdrawing from a lease after moving to a\n                           new queue\n\nDESCRIPTION\n  set a lease's withdraw authority\n\nALIASES\n  $ sbv2 solana aggregator lease set\n\nEXAMPLES\n  $ sbv2 solana:lease:set GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-list-authoritykey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator list AUTHORITYKEY")),(0,r.kt)("p",null,"get a list of aggregators from a provided authority pubkey"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator list AUTHORITYKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  AUTHORITYKEY  public key of the aggregator authority\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  get a list of aggregators from a provided authority pubkey\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-lock-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator lock AGGREGATORKEY")),(0,r.kt)("p",null,"lock an aggregator's configuration and prevent further changes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator lock AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  lock an aggregator's configuration and prevent further changes\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-metrics-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator metrics AGGREGATORKEY")),(0,r.kt)("p",null,"print an aggregator's metrics'"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator metrics AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json] [--period <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --period=<value>...    the period to collect metrics for. Ex. 3600 will collect update metrics for the last 1hr\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aggregator's metrics'\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-open-round-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator open-round AGGREGATORKEY")),(0,r.kt)("p",null,"request a new aggregator result from a set of oracles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator open-round AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new aggregator result from a set of oracles\n\nALIASES\n  $ sbv2 solana aggregator open-round\n\nEXAMPLES\n  $ sbv2 solana aggregator update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-permission-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator permission create AGGREGATORKEY")),(0,r.kt)("p",null,"create a permission account for an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator permission create AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a permission account for an aggregator\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-print-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator print AGGREGATORKEY")),(0,r.kt)("p",null,"print an aggregator and it's associated accounts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator print AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json] [--queuePubkey <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n  --queuePubkey=<value>  override the aggregators current queue. useful for viewing permission lease accounts if an\n                         aggregator has moved queues\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aggregator and it's associated accounts\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-remove-job-aggregatorkey-jobkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator remove job AGGREGATORKEY JOBKEY")),(0,r.kt)("p",null,"remove a switchboard job account from an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator remove job AGGREGATORKEY JOBKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  JOBKEY         public key of an existing job account to remove from an aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  remove a switchboard job account from an aggregator\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set AGGREGATORKEY")),(0,r.kt)("p",null,"set an aggregators config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--name <value>]\n    [--metadata <value>] [--batchSize <value>] [--minJobs <value>] [--minOracles <value>] [--updateInterval <value>]\n    [--varianceThreshold <value>] [--forceReportPeriod <value>] [--basePriorityFee <value>] [--priorityFeeBump <value>]\n    [--priorityFeeBumpPeriod <value>] [--maxPriorityFeeMultiplier <value>] [--enableSlidingWindow]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>             alternate keypair that is the authority for the aggregator and required to make\n                                      config changes\n  -h, --help                          Show CLI help.\n  -k, --keypair=<value>               keypair that will pay for onchain transactions. defaults to new account authority\n                                      if no alternate authority provided\n  -s, --silent                        suppress cli prompts\n  -u, --rpcUrl=<value>                alternate RPC url\n  -v, --verbose                       log everything\n  --basePriorityFee=<value>\n  --batchSize=<value>                 number of oracles requested for each open round call\n  --cluster=<option>                  the solana cluster to connect to\n                                      <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>               [default: confirmed] transaction commitment level to use\n                                      <options: confirmed|finalized|processed>\n  --enableSlidingWindow               set the aggregator resolution mode\n  --forceReportPeriod=<value>         Number of seconds for which, even if the variance threshold is not passed, accept\n                                      new responses from oracles.\n  --ledger                            enable ledger support\n  --ledgerPath=<value>                HID path to the ledger\n  --mainnetBeta                       WARNING: use mainnet-beta solana cluster\n  --maxPriorityFeeMultiplier=<value>\n  --metadata=<value>                  metadata of the aggregator\n  --minJobs=<value>                   number of jobs that must respond before an oracle responds\n  --minOracles=<value>                number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                      name of the aggregator\n  --priorityFeeBump=<value>\n  --priorityFeeBumpPeriod=<value>\n  --programId=<value>                 alternative Switchboard program ID to interact with\n  --updateInterval=<value>            set an aggregator's minimum update delay\n  --varianceThreshold=<value>         percentage change between a previous accepted result and the next round before an\n                                      oracle reports a value on-chain. Used to conserve lease cost during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set an aggregators config\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-transfer-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator transfer AGGREGATORKEY")),(0,r.kt)("p",null,"transfer an aggregator to a new queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator transfer AGGREGATORKEY --newQueue <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>] [--newCrank <value>]\n    [--loadAmount <value>] [--enable] [--queueAuthority <value>] [--force]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>   alternate keypair that is the authority for the aggregator\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --cluster=<option>        the solana cluster to connect to\n                            <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enable                  enable permissions on the new queue\n  --force                   skip permission checks\n  --ledger                  enable ledger support\n  --ledgerPath=<value>      HID path to the ledger\n  --loadAmount=<value>      [default: 0.0] amount of funds to load into the new lease, in addition to the funds\n                            remaining in the old lease account\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --newCrank=<value>        publicKey of the crank to transfer to\n  --newQueue=<value>        (required) publicKey of the new queue to transfer to\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternate keypair that is the authority for the queue. only used if enabling permissions in\n                            one transaction\n\nDESCRIPTION\n  transfer an aggregator to a new queue\n\nEXAMPLES\n  $ sbv2 solana aggregator transfer GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --mainnetBeta --loadAmount 0.1 --newQueue 3HBb2DQqDfuMdzWxNk1Eo9RTMkFYmuEAd32RiLKn9pAn --newCrank GdNVLWzcE6h9SPuSbmu69YzxAj8enim9t6mjzuqTXgLd --keypair ~/.config/solana/id.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-update-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator update AGGREGATORKEY")),(0,r.kt)("p",null,"request a new aggregator result from a set of oracles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator update AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new aggregator result from a set of oracles\n\nALIASES\n  $ sbv2 solana aggregator open-round\n\nEXAMPLES\n  $ sbv2 solana aggregator update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-watch-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator watch AGGREGATORKEY")),(0,r.kt)("p",null,"watch an aggregator account and stream the results"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator watch AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-t <value>] [-f <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -f, --outfile=<value>  save results to a file\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -t, --timeout=<value>  time to watch feed for updates\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch an aggregator account and stream the results\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-withdraw-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator withdraw AGGREGATORKEY")),(0,r.kt)("p",null,"withdraw funds from an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator withdraw AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>] [--queuePubkey <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  keypair delegated as the authority for managing the lease account\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --amount=<value>         (required) token amount to withdraw from lease account\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n  --queuePubkey=<value>    override the aggregators current queue. useful for withdrawing from a lease after moving to a\n                           new queue\n\nDESCRIPTION\n  withdraw funds from an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator withdraw\n\nEXAMPLES\n  $ sbv2 solana:aggregator:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-anchor-test"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana anchor test")),(0,r.kt)("p",null,"run anchor test and a switchboard oracle in parallel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana anchor test [-h] [-v] [-s] [--mainnetBeta | --cluster localnet|devnet] [-u <value>] [--mainnetRpcUrl\n    <value>] [--programId <value>] [-d <value>] [--oracleKey <value>] [-k <value>] [--nodeImage <value>] [--arm] [-t\n    <value>] [--detach] [--testValidatorArgs <value>]\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -k, --keypair=<value>         keypair that will pay for onchain transactions. defaults to new account authority if no\n                                alternate authority provided\n  -s, --silent                  suppress docker logging\n  -t, --timeout=<value>         [default: 120] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --arm                         apple silicon needs to use a docker image for linux/arm64\n  --cluster=<option>            [default: localnet] cluster\n                                <options: localnet|devnet>\n  --detach                      keep the localnet rpc running\n  --mainnetBeta                 WARNING: use mainnet-beta solana cluster\n  --mainnetRpcUrl=<value>       [default: https://api.mainnet-beta.solana.com/] Solana mainnet RPC URL to use for the\n                                oracle task runner\n  --nodeImage=<value>           [default: dev-v2-RC_02_24_23_18_43] public key of the oracle to start-up\n  --oracleKey=<value>           public key of the oracle to start-up\n  --programId=<value>           alternative Switchboard program ID to interact with\n  --testValidatorArgs=<value>   additional args passed to the local solana validator\n\nDESCRIPTION\n  run anchor test and a switchboard oracle in parallel\n\nALIASES\n  $ sbv2 anchor test\n")),(0,r.kt)("h2",{id:"sbv2-solana-buffer-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana buffer create QUEUEKEY")),(0,r.kt)("p",null,"create a buffer relayer account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana buffer create QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--json] [--bufferKeypair <value>] [-a <value>] [-n <value>] [--minUpdateDelaySeconds <value>]\n    [--jobDefinition <value> | --jobKey <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account\n\nFLAGS\n  -a, --authority=<value>          alternate keypair that will be the buffer relayer authority\n  -h, --help                       Show CLI help.\n  -k, --keypair=<value>            keypair that will pay for onchain transactions. defaults to new account authority if\n                                   no alternate authority provided\n  -n, --name=<value>               name of the buffer account\n  -s, --silent                     suppress cli prompts\n  -u, --rpcUrl=<value>             alternate RPC url\n  -v, --verbose                    log everything\n  --bufferKeypair=<value>          keypair to use for the buffer relayer account. This will be the account's publicKey\n  --cluster=<option>               the solana cluster to connect to\n                                   <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>            [default: confirmed] transaction commitment level to use\n                                   <options: confirmed|finalized|processed>\n  --jobDefinition=<value>          filesystem path to job definition\n  --jobKey=<value>                 public key of existing job account\n  --ledger                         enable ledger support\n  --ledgerPath=<value>             HID path to the ledger\n  --mainnetBeta                    WARNING: use mainnet-beta solana cluster\n  --minUpdateDelaySeconds=<value>  [default: 30] minimum number of seconds between update calls\n  --programId=<value>              alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a buffer relayer account\n")),(0,r.kt)("h2",{id:"sbv2-solana-buffer-open-round-bufferrelayerkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana buffer open-round BUFFERRELAYERKEY")),(0,r.kt)("p",null,"request a new buffer relayer result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana buffer open-round BUFFERRELAYERKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  BUFFERRELAYERKEY  public key of the buffer relayer account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new buffer relayer result\n\nALIASES\n  $ sbv2 solana buffer open-round\n\nEXAMPLES\n  $ sbv2 solana buffer update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-buffer-update-bufferrelayerkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana buffer update BUFFERRELAYERKEY")),(0,r.kt)("p",null,"request a new buffer relayer result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana buffer update BUFFERRELAYERKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  BUFFERRELAYERKEY  public key of the buffer relayer account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new buffer relayer result\n\nALIASES\n  $ sbv2 solana buffer open-round\n\nEXAMPLES\n  $ sbv2 solana buffer update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank create QUEUEKEY")),(0,r.kt)("p",null,"create a new crank account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank create QUEUEKEY -s <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-n <value>] [--metadata\n    <value>] [--crankKeypair <value>] [--dataBufferKeypair <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create a crank on\n\nFLAGS\n  -h, --help                   Show CLI help.\n  -k, --keypair=<value>        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n  -n, --name=<value>           name of the crank for easier identification\n  -s, --silent                 suppress cli prompts\n  -s, --size=<value>           (required) maximum number of rows a crank can support\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --cluster=<option>           the solana cluster to connect to\n                               <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>        [default: confirmed] transaction commitment level to use\n                               <options: confirmed|finalized|processed>\n  --crankKeypair=<value>       keypair to use for the crank account. This will be the account's publicKey\n  --dataBufferKeypair=<value>  keypair to use for the crank data buffer account.\n  --ledger                     enable ledger support\n  --ledgerPath=<value>         HID path to the ledger\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n  --metadata=<value>           metadata of the crank for easier identification\n  --programId=<value>          alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank account\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-events-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank events AGGREGATORKEY")),(0,r.kt)("p",null,"watch an aggregator account and stream the on-chain events"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank events AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-t <value>] [-f <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -f, --outfile=<value>  save results to a file\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -t, --timeout=<value>  time to watch feed for updates\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch an aggregator account and stream the on-chain events\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-pop-crankkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank pop CRANKKEY")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank pop CRANKKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger]\n\nARGUMENTS\n  CRANKKEY  public key of the crank account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  pop the crank\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-print-crankkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank print CRANKKEY")),(0,r.kt)("p",null,"print a crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank print CRANKKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json] [--rows]\n\nARGUMENTS\n  CRANKKEY  public key of the crank account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n  --rows                 print the crank rows in order\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a crank\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-push-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank push AGGREGATORKEY")),(0,r.kt)("p",null,"push the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank push AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--crankKey <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --crankKey=<value>     push onto a new crank, if provided\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  push the crank\n")),(0,r.kt)("h2",{id:"sbv2-solana-job-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana job create")),(0,r.kt)("p",null,"create a job account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana job create --jobDefinition <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--jobKeypair <value>] [-a\n    <value>] [-n <value>]\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the buffer relayer authority\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -n, --name=<value>       name of the buffer account\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --jobDefinition=<value>  (required) filesystem path to job definition\n  --jobKeypair=<value>     keypair to use for the job account. This will be the account's publicKey\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a job account\n")),(0,r.kt)("h2",{id:"sbv2-solana-job-print-jobkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana job print JOBKEY")),(0,r.kt)("p",null,"print an job and it's associated accounts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana job print JOBKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  JOBKEY  public key of the job account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an job and it's associated accounts\n")),(0,r.kt)("h2",{id:"sbv2-solana-json-create-aggregator-definitionfile"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana json create aggregator DEFINITIONFILE")),(0,r.kt)("p",null,"create an aggregator from a json file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana json create aggregator DEFINITIONFILE [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-q <value>] [-a <value>]\n    [--leaseAmount <value>]\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of queue definition json file\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -q, --queueKey=<value>   public key of the oracle queue to create aggregator for\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --leaseAmount=<value>    [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5 wSOL\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator from a json file\n\nALIASES\n  $ sbv2 solana json create aggregator\n\nEXAMPLES\n  $ sbv2 solana aggregator create json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-lease-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease create AGGREGATORKEY")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease create AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--amount <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       token amount to load into the lease escrow. If decimals provided, amount will be normalized to\n                         raw tokenAmount\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nEXAMPLES\n  $ sbv2 solana lease create GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.5 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-lease-extend-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease extend AGGREGATORKEY")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease extend AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) amount to deposit into the lease escrow\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator fund\n  $ sbv2 solana aggregator deposit\n  $ sbv2 solana aggregator extend\n\nEXAMPLES\n  $ sbv2 solana:aggregator:fund GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-lease-print-leasekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease print LEASEKEY")),(0,r.kt)("p",null,"print a lease account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease print LEASEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  LEASEKEY  public key of the lease account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a lease account\n")),(0,r.kt)("h2",{id:"sbv2-solana-lease-set-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease set AGGREGATORKEY")),(0,r.kt)("p",null,"set a lease's withdraw authority"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease set AGGREGATORKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>] [--queuePubkey <value>]\n    [--newAuthority <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair delegated as the authority for managing the lease account\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --newAuthority=<value>   new lease withdraw authority. if not set, defaults to the aggregator authority\n  --programId=<value>      alternative Switchboard program ID to interact with\n  --queuePubkey=<value>    override the aggregators current queue. useful for withdrawing from a lease after moving to a\n                           new queue\n\nDESCRIPTION\n  set a lease's withdraw authority\n\nALIASES\n  $ sbv2 solana aggregator lease set\n\nEXAMPLES\n  $ sbv2 solana:lease:set GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-lease-withdraw-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease withdraw AGGREGATORKEY")),(0,r.kt)("p",null,"withdraw funds from an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease withdraw AGGREGATORKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>] [--queuePubkey <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  keypair delegated as the authority for managing the lease account\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --amount=<value>         (required) token amount to withdraw from lease account\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n  --queuePubkey=<value>    override the aggregators current queue. useful for withdrawing from a lease after moving to a\n                           new queue\n\nDESCRIPTION\n  withdraw funds from an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator withdraw\n\nEXAMPLES\n  $ sbv2 solana:aggregator:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-localnet-env"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana localnet env")),(0,r.kt)("p",null,"create a localnet switchboard environment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana localnet env [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n    [--force] [-o <value>]\n\nFLAGS\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -o, --outputDir=<value>  [default: ./.switchboard] output directory for scripts\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --force                  overwrite output file if existing\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a localnet switchboard environment\n")),(0,r.kt)("h2",{id:"sbv2-solana-localnet-up"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana localnet up")),(0,r.kt)("p",null,"start a local solana validator with a switchboard environment and oracle running alongside it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana localnet up [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n    [--oracleStakingWalletKeypair <value> --queueKeypair <value>] [--nodeImage <value>] [--arm] [-t <value>] [--reward\n    <value>] [--minStake <value>] [--oracleTimeout <value>] [--slashingEnabled] [--permissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers]\n\nFLAGS\n  -h, --help                            Show CLI help.\n  -k, --keypair=<value>                 keypair that will pay for onchain transactions. defaults to new account\n                                        authority if no alternate authority provided\n  -s, --silent                          suppress docker logging\n  -t, --timeout=<value>                 [default: 120] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>                  alternate RPC url\n  -v, --verbose                         log everything\n  --arm                                 apple silicon needs to use a docker image for linux/arm64\n  --cluster=<option>                    the solana cluster to connect to\n                                        <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                 [default: confirmed] transaction commitment level to use\n                                        <options: confirmed|finalized|processed>\n  --enableBufferRelayers                enabling this setting will allow buffer relayer accounts to call openRound.\n  --ledger                              enable ledger support\n  --ledgerPath=<value>                  HID path to the ledger\n  --mainnetBeta                         WARNING: use mainnet-beta solana cluster\n  --minStake=<value>                    [default: 0] the reward payed out to oracles for responding to an update request\n                                        on-chain, Ex: 2 requires oracles to have 2 wSOL in their staking wallet before\n                                        heartbeating\n  --nodeImage=<value>                   [default: dev-v2-RC_02_24_23_18_43] public key of the oracle to start-up\n  --oracleStakingWalletKeypair=<value>  keypair to use for the oracle staking wallet. Using a static staking wallet with\n                                        the same queue will produce the same oracle pubkey each time.\n  --oracleTimeout=<value>               [default: 180] time period (in seconds) we should remove an oracle after if no\n                                        response\n  --permissionedFeeds                   enabling this setting means data feeds need explicit permission to join the\n                                        queue.\n  --programId=<value>                   alternative Switchboard program ID to interact with\n  --queueKeypair=<value>                keypair to use for the oracle queue account. This will be the account's\n                                        publicKey\n  --reward=<value>                      [default: 0] the reward payed out to oracles for responding to an update request\n                                        on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4 would\n                                        deduct (4 * 0.0000075) wSOL from an aggregators lease each round.\n  --slashingEnabled                     whether slashing is enabled on this queue.\n  --unpermissionedVrf                   enabling this setting means data feeds do not need explicit permission to\n                                        request VRF proofs and verifications from this queue.\n\nDESCRIPTION\n  start a local solana validator with a switchboard environment and oracle running alongside it\n")),(0,r.kt)("h2",{id:"sbv2-solana-network-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana network create")),(0,r.kt)("p",null,"create an oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana network create --configFile <value> --schemaFile <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--force]\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --configFile=<value>   (required)\n  --force\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n  --schemaFile=<value>   (required)\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an oracle queue\n")),(0,r.kt)("h2",{id:"sbv2-solana-network-save"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana network save")),(0,r.kt)("p",null,"save an existing switchboard network"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana network save --queueKey <value> --outputFile <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json] [--force]\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --force\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --outputFile=<value>   (required) outputFile to save accounts in JSON format\n  --programId=<value>    alternative Switchboard program ID to interact with\n  --queueKey=<value>     (required) queue account to load\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  save an existing switchboard network\n")),(0,r.kt)("h2",{id:"sbv2-solana-network-start"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana network start")),(0,r.kt)("p",null,"start a switchboard network from a JSON file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana network start [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n    [--json] [--configFile <value>] [--schemaFile <value>] [--nodeImage <value>] [--arm] [-t <value>] [--mainnetRpcUrl\n    <value>]\n\nFLAGS\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress docker logging\n  -t, --timeout=<value>    [default: 300] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --arm                    apple silicon needs to use a docker image for linux/arm64\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --configFile=<value>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --mainnetRpcUrl=<value>  [default: https://api.mainnet-beta.solana.com/] Solana mainnet RPC URL to use for the oracle\n                           task runner\n  --nodeImage=<value>      [default: dev-v2-RC_02_24_23_18_43] public key of the oracle to start-up\n  --programId=<value>      alternative Switchboard program ID to interact with\n  --schemaFile=<value>\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  start a switchboard network from a JSON file\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle create QUEUEKEY")),(0,r.kt)("p",null,"create a new oracle account for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle create QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--json] [-n <value>] [--metadata <value>] [-a <value>] [--enable] [--queueAuthority <value>]\n    [--stakeAmount <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account\n\nFLAGS\n  -a, --authority=<value>   keypair to delegate authority to for managing the oracle account\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -n, --name=<value>        name of the oracle for easier identification\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --cluster=<option>        the solana cluster to connect to\n                            <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enable                  enable oracle heartbeat permissions\n  --ledger                  enable ledger support\n  --ledgerPath=<value>      HID path to the ledger\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --metadata=<value>        metadata of the oracle for easier identification\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n  --stakeAmount=<value>     token amount to load into the oracle's staking wallet.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle account for a given queue\n\nEXAMPLES\n  $ sbv2 solana:oracle:create F8ce7MsckeZAbAGmxjJNetxYXQa9mKr9nnrC3qKubyYy --name oracle-1 --stakeAmount 1\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-print-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle print ORACLEKEY")),(0,r.kt)("p",null,"print an oracle account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle print ORACLEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet]\n    [-u <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an oracle account\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-up"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle up")),(0,r.kt)("p",null,"start a solana docker oracle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle up --oracleKey <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--nodeImage <value>] [--arm] [-t\n    <value>]\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress docker logging\n  -t, --timeout=<value>  [default: 120] number of seconds before ending the docker process\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --arm                  apple silicon needs to use a docker image for linux/arm64\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --nodeImage=<value>    [default: dev-v2-RC_02_24_23_18_43] public key of the oracle to start-up\n  --oracleKey=<value>    (required) public key of the oracle to start-up\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  start a solana docker oracle\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-withdraw-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle withdraw ORACLEKEY")),(0,r.kt)("p",null,"withdraw from an oracle's staking wallet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle withdraw ORACLEKEY --amount <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair for the oracle authority\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --amount=<value>         (required) amount to withdraw\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  withdraw from an oracle's staking wallet\n")),(0,r.kt)("h2",{id:"sbv2-solana-permission-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission create")),(0,r.kt)("p",null,"create a permission account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission create --granter <value> --grantee <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [--enable] [-a <value>]\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the granter\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --enable                 whether to enable permissions on the resource. --keypair or --authority must be provided\n  --grantee=<value>        (required) publicKey of the resource that is being granted permissions. This is typically an\n                           AggregatorAccount, BufferRelayerAccount, OracleAccount, or VrfAccount.\n  --granter=<value>        (required) publicKey of the resource that is granting permissions. This is typically the\n                           QueueAccount.\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account\n")),(0,r.kt)("h2",{id:"sbv2-solana-permission-grant-permissionkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission grant PERMISSIONKEY")),(0,r.kt)("p",null,"enable a resources permissions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission grant PERMISSIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the permission account\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  enable a resources permissions\n")),(0,r.kt)("h2",{id:"sbv2-solana-permission-print-permissionkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission print PERMISSIONKEY")),(0,r.kt)("p",null,"print a permission account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission print PERMISSIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a permission account\n")),(0,r.kt)("h2",{id:"sbv2-solana-permission-revoke-permissionkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission revoke PERMISSIONKEY")),(0,r.kt)("p",null,"disable a resources permissions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission revoke PERMISSIONKEY [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [-a <value>]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the permission account\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --cluster=<option>       the solana cluster to connect to\n                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --ledger                 enable ledger support\n  --ledgerPath=<value>     HID path to the ledger\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  disable a resources permissions\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-pubkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print PUBKEY")),(0,r.kt)("p",null,"print a Switchboard account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print PUBKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  PUBKEY  publicKey of the Switchboard account to search for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a Switchboard account\n")),(0,r.kt)("h2",{id:"sbv2-solana-queue-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana queue create")),(0,r.kt)("p",null,"create an oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana queue create [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n    [--json] [-a <value>] [--queueKeypair <value>] [--dataBufferKeypair <value>] [--size <value>] [--name <value>]\n    [--metadata <value>] [--reward <value>] [--minStake <value>] [--oracleTimeout <value>] [--slashingEnabled]\n    [--permissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [--feedProbationPeriod <value>]\n    [--consecutiveFeedFailureLimit <value>] [--consecutiveOracleFailureLimit <value>]\n\nFLAGS\n  -a, --authority=<value>                  alternate keypair that is the authority for the queue and is required to\n                                           approve permissions\n  -h, --help                               Show CLI help.\n  -k, --keypair=<value>                    keypair that will pay for onchain transactions. defaults to new account\n                                           authority if no alternate authority provided\n  -s, --silent                             suppress cli prompts\n  -u, --rpcUrl=<value>                     alternate RPC url\n  -v, --verbose                            log everything\n  --cluster=<option>                       the solana cluster to connect to\n                                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                    [default: confirmed] transaction commitment level to use\n                                           <options: confirmed|finalized|processed>\n  --consecutiveFeedFailureLimit=<value>    [default: 1000] consecutive failure limit for a feed before feed permission\n                                           is revoked.\n  --consecutiveOracleFailureLimit=<value>  [default: 1000] consecutive failure limit for an oracle before oracle\n                                           permission is revoked.\n  --dataBufferKeypair=<value>              keypair to use for the oracle queue data buffer account.\n  --enableBufferRelayers                   enabling this setting will allow buffer relayer accounts to call openRound.\n  --feedProbationPeriod=<value>            [default: 1000] After a feed lease is funded or re-funded, it must\n                                           consecutively succeed N amount of times or its authorization to use the queue\n                                           is auto-revoked.\n  --ledger                                 enable ledger support\n  --ledgerPath=<value>                     HID path to the ledger\n  --mainnetBeta                            WARNING: use mainnet-beta solana cluster\n  --metadata=<value>                       metadata of the aggregator\n  --minStake=<value>                       [default: 0] the reward payed out to oracles for responding to an update\n                                           request on-chain, Ex: 2 requires oracles to have 2 wSOL in their staking\n                                           wallet before heartbeating\n  --name=<value>                           name of the aggregator\n  --oracleTimeout=<value>                  [default: 180] time period (in seconds) we should remove an oracle after if\n                                           no response\n  --permissionedFeeds                      enabling this setting means data feeds need explicit permission to join the\n                                           queue.\n  --programId=<value>                      alternative Switchboard program ID to interact with\n  --queueKeypair=<value>                   keypair to use for the oracle queue account. This will be the account's\n                                           publicKey\n  --reward=<value>                         [default: 0] the reward payed out to oracles for responding to an update\n                                           request on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4\n                                           would deduct (4 * 0.0000075) wSOL from an aggregators lease each round.\n  --size=<value>                           [default: 100] set the size of the queue\n  --slashingEnabled                        whether slashing is enabled on this queue.\n  --unpermissionedVrf                      enabling this setting means data feeds do not need explicit permission to\n                                           request VRF proofs and verifications from this queue.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an oracle queue\n")),(0,r.kt)("h2",{id:"sbv2-solana-queue-print-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana queue print QUEUEKEY")),(0,r.kt)("p",null,"print a queue account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana queue print QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  QUEUEKEY  public key of the queue account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a queue account\n")),(0,r.kt)("h2",{id:"sbv2-solana-queue-set-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana queue set QUEUEKEY")),(0,r.kt)("p",null,"set an oracle queue's config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana queue set QUEUEKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--json] [-a <value>] [--name <value>] [--metadata <value>] [--reward <value>] [--minStake <value>]\n    [--oracleTimeout <value>] [--slashingEnabled] [--unpermissionedFeeds | --permissionedFeeds] [--unpermissionedVrf]\n    [--enableBufferRelayers] [--consecutiveFeedFailureLimit <value>] [--consecutiveOracleFailureLimit <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the queue account\n\nFLAGS\n  -a, --authority=<value>                  alternate keypair that is the authority for the queue and is required to\n                                           approve permissions\n  -h, --help                               Show CLI help.\n  -k, --keypair=<value>                    keypair that will pay for onchain transactions. defaults to new account\n                                           authority if no alternate authority provided\n  -s, --silent                             suppress cli prompts\n  -u, --rpcUrl=<value>                     alternate RPC url\n  -v, --verbose                            log everything\n  --cluster=<option>                       the solana cluster to connect to\n                                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                    [default: confirmed] transaction commitment level to use\n                                           <options: confirmed|finalized|processed>\n  --consecutiveFeedFailureLimit=<value>    consecutive failure limit for a feed before feed permission is revoked.\n  --consecutiveOracleFailureLimit=<value>  consecutive failure limit for an oracle before oracle permission is revoked.\n  --enableBufferRelayers                   enabling this setting will allow buffer relayer accounts to call openRound.\n  --ledger                                 enable ledger support\n  --ledgerPath=<value>                     HID path to the ledger\n  --mainnetBeta                            WARNING: use mainnet-beta solana cluster\n  --metadata=<value>                       metadata of the aggregator\n  --minStake=<value>                       the reward payed out to oracles for responding to an update request on-chain,\n                                           Ex: 2 requires oracles to have 2 wSOL in their staking wallet before\n                                           heartbeating\n  --name=<value>                           name of the aggregator\n  --oracleTimeout=<value>                  time period (in seconds) we should remove an oracle after if no response\n  --permissionedFeeds                      enabling this setting means data feeds need explicit permission to join the\n                                           queue.\n  --programId=<value>                      alternative Switchboard program ID to interact with\n  --reward=<value>                         the reward payed out to oracles for responding to an update request on-chain,\n                                           Ex: A reward of 0.0000075 with a feed with a batchSize of 4 would deduct (4 *\n                                           0.0000075) wSOL from an aggregators lease each round.\n  --slashingEnabled                        whether slashing is enabled on this queue.\n  --unpermissionedFeeds                    enabling this setting means data feeds do not need explicit permission to\n                                           join the queue.\n  --unpermissionedVrf                      enabling this setting means data feeds do not need explicit permission to\n                                           request VRF proofs and verifications from this queue.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set an oracle queue's config\n")),(0,r.kt)("h2",{id:"sbv2-solana-vrf-open-round-vrfkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf open-round VRFKEY")),(0,r.kt)("p",null,"request a new vrf result from a set of oracles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf open-round VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --authority=<value>    alternative keypair that is the VRF authority\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new vrf result from a set of oracles\n\nALIASES\n  $ sbv2 solana vrf update\n  $ sbv2 solana vrf open-round\n\nEXAMPLES\n  $ sbv2 solana vrf request\n")),(0,r.kt)("h2",{id:"sbv2-solana-vrf-print-vrfkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf print VRFKEY")),(0,r.kt)("p",null,"print a VRF and it's associated accounts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf print VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a VRF and it's associated accounts\n")),(0,r.kt)("h2",{id:"sbv2-solana-vrf-request-vrfkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf request VRFKEY")),(0,r.kt)("p",null,"request a new vrf result from a set of oracles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf request VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --authority=<value>    alternative keypair that is the VRF authority\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new vrf result from a set of oracles\n\nALIASES\n  $ sbv2 solana vrf update\n  $ sbv2 solana vrf open-round\n\nEXAMPLES\n  $ sbv2 solana vrf request\n")),(0,r.kt)("h2",{id:"sbv2-solana-vrf-update-vrfkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf update VRFKEY")),(0,r.kt)("p",null,"request a new vrf result from a set of oracles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf update VRFKEY [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u\n    <value>] [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value>\n    --ledger] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --authority=<value>    alternative keypair that is the VRF authority\n  --cluster=<option>     the solana cluster to connect to\n                         <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --ledger               enable ledger support\n  --ledgerPath=<value>   HID path to the ledger\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new vrf result from a set of oracles\n\nALIASES\n  $ sbv2 solana vrf update\n  $ sbv2 solana vrf open-round\n\nEXAMPLES\n  $ sbv2 solana vrf request\n")))}s.isMDXComponent=!0},49562:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>y,contentTitle:()=>R,default:()=>L,frontMatter:()=>I,metadata:()=>G,toc:()=>w});var t=n(48041),r=(n(49231),n(54852)),o=n(26365),l=n(43939),s=n(66081),i=n(2004);const u={toc:[]},c="wrapper";function d(e){let{components:a,...n}=e;return(0,r.kt)(c,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g @switchboard-xyz/cli^2\n"))),(0,r.kt)(i.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -g @switchboard-xyz/cli^2\n")))))}d.isMDXComponent=!0;const p={toc:[]},v="wrapper";function m(e){let{components:a,...n}=e;return(0,r.kt)(v,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Testnet\nsbv2 config set aptos testnet rpc https://fullnode.testnet.aptoslabs.com/v1\nsbv2 config set aptos testnet default-account ".aptos/config.yaml"\n\n# Devnet\nsbv2 config set aptos devnet rpc https://fullnode.devnet.aptoslabs.com/v1\nsbv2 config set aptos devnet default-account ".aptos/config.yaml"\n')))}m.isMDXComponent=!0;var g=n(90239);const h={toc:[]},f="wrapper";function k(e){let{components:a,...n}=e;return(0,r.kt)(f,(0,t.Z)({},h,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Testnet\nsbv2 config set near testnet rpc https://rpc.testnet.near.org\nsbv2 config set near testnet default-account my-named-account.testnet\n\n# Mainnet\nsbv2 config set near mainnet rpc https://rpc.mainnet.near.org\nsbv2 config set near mainnet default-account my-named-account.near\n")))}k.isMDXComponent=!0;var b=n(33569);const A={toc:[]},E="wrapper";function S(e){let{components:a,...n}=e;return(0,r.kt)(E,(0,t.Z)({},A,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Devnet\nsbv2 config set solana devnet rpc https://api.devnet.solana.com\nsbv2 config set solana devnet default-account "~/.config/solana/id.json"\n\n# Mainnet\nsbv2 config set solana mainnet-beta rpc https://api.mainnet-beta.solana.com\nsbv2 config set solana mainnet-beta default-account "~/.config/solana/id.json"\n')))}S.isMDXComponent=!0;var N=n(23676);const I={sidebar_position:1,slug:".",title:"Setup"},R=void 0,G={unversionedId:"dev/cli/overview",id:"dev/cli/overview",title:"Setup",description:"Quick Links",source:"@site/docs/dev/cli/overview.mdx",sourceDirName:"dev/cli",slug:"/dev/cli/",permalink:"/dev/cli/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:".",title:"Setup"},sidebar:"dev",previous:{title:"@switchboard-xyz/oracle",permalink:"/dev/oracle"},next:{title:"Index",permalink:"/dev/cli/config/print/"}},y={},w=[{value:"Quick Links",id:"quick-links",level:2},{value:"Install",id:"install",level:2},{value:"Aptos",id:"aptos",level:2},{value:"Config",id:"config",level:3},{value:"Commands",id:"commands",level:3},{value:"Near",id:"near",level:2},{value:"Config",id:"config-1",level:3},{value:"Commands",id:"commands-1",level:3},{value:"Solana",id:"solana",level:2},{value:"Config",id:"config-2",level:3},{value:"Commands",id:"commands-2",level:3}],C={toc:w},D="wrapper";function L(e){let{components:a,...n}=e;return(0,r.kt)(D,(0,t.Z)({},C,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"quick-links"},"Quick Links"),(0,r.kt)(o.Z,{cols:2,items:[{to:"https://github.com/switchboard-xyz/sbv2-core/tree/main/cli",title:"Github",description:"View the Github repo",image:(0,r.kt)("img",{src:(0,l.Z)("/img/icons/github/light.svg")}),imageDark:(0,r.kt)("img",{src:(0,l.Z)("/img/icons/github/dark.svg")})}],mdxType:"RoundedCardGroup"}),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)(d,{mdxType:"Install"}),(0,r.kt)("h2",{id:"aptos"},"Aptos"),(0,r.kt)("h3",{id:"config"},"Config"),(0,r.kt)(m,{mdxType:"AptosConfig"}),(0,r.kt)("h3",{id:"commands"},"Commands"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h2",null,"sbv2 aptos")),(0,r.kt)(g.ZP,{mdxType:"AptosCli"})),(0,r.kt)("h2",{id:"near"},"Near"),(0,r.kt)("h3",{id:"config-1"},"Config"),(0,r.kt)(k,{mdxType:"NearConfig"}),(0,r.kt)("h3",{id:"commands-1"},"Commands"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h2",null,"sbv2 near")),(0,r.kt)(b.ZP,{mdxType:"NearCli"})),(0,r.kt)("h2",{id:"solana"},"Solana"),(0,r.kt)("h3",{id:"config-2"},"Config"),(0,r.kt)(S,{mdxType:"SolanaConfig"}),(0,r.kt)("h3",{id:"commands-2"},"Commands"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h2",null,"sbv2 solana")),(0,r.kt)(N.ZP,{mdxType:"SolanaCli"})))}L.isMDXComponent=!0}}]);