"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[867],{54852:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(49231);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),l=s(t),f=o,m=l["".concat(u,".").concat(f)]||l[f]||p[f]||a;return t?r.createElement(m,d(d({ref:n},c),{},{components:t})):r.createElement(m,d({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,d=new Array(a);d[0]=f;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[l]="string"==typeof e?e:o,d[1]=i;for(var s=2;s<a;s++)d[s]=t[s];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},79794:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(95634),o=(t(49231),t(54852));const a={title:"Aggregator.sol",keywords:["Switchboard","oracle network","evm"]},d=void 0,i={unversionedId:"evm/dev/aggregator-sol",id:"evm/dev/aggregator-sol",title:"Aggregator.sol",description:"Aggregator.sol is a Solidity interface to help you migrate legacy oracles to a",source:"@site/docs/202-evm/70-dev/10-aggregator-sol.mdx",sourceDirName:"202-evm/70-dev",slug:"/evm/dev/aggregator-sol",permalink:"/evm/dev/aggregator-sol",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Aggregator.sol",keywords:["Switchboard","oracle network","evm"]},sidebar:"sidebar",previous:{title:"Developer Resources",permalink:"/evm/dev/"},next:{title:"FunctionsClient.sol",permalink:"/evm/dev/functions-client-sol"}},u={},s=[{value:"Hardhat Setup",id:"hardhat-setup",level:2},{value:"Source Code",id:"source-code",level:2}],c={toc:s},l="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(l,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Aggregator.sol is a Solidity interface to help you migrate legacy oracles to a\nSwitchboard interface."),(0,o.kt)("h2",{id:"hardhat-setup"},"Hardhat Setup"),(0,o.kt)("p",null,"Add ",(0,o.kt)("inlineCode",{parentName:"p"},"@switchboard-xyz/evm.js")," to your Hardhat project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -D @switchboard-xyz/evm.js\n")),(0,o.kt)("p",null,"Then import it into your Solidity contract with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'import {AggregatorV3Interface} from "@switchboard-xyz/evm.js/contracts";\n')),(0,o.kt)("h2",{id:"source-code"},"Source Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport {ISwitchboardPush} from "./ISwitchboardPush.sol";\n\n// CLASSIC PUSH ADAPTER INTERFACE\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ncontract Aggregator is AggregatorV3Interface {\n    // errors\n    error RoundEmpty(bytes32 feedName, uint80 roundId);\n\n    address public switchboardPricesContract;\n    address public feedId;\n    bytes32 public feedName;\n    string public name;\n    string public description;\n\n    constructor(\n        address _switchboard, // Switchboard contract address\n        address _feedId,\n        bytes32 _feedName, // Function id corresponding to the feed\n        string memory _name, // Name of the feed\n        string memory _description\n    ) {\n        switchboardPricesContract = _switchboard;\n        feedId = _feedId;\n        feedName = _feedName;\n        name = _name;\n        description = _description;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return 18;\n    }\n\n    function version() external pure override returns (uint256) {\n        return 1;\n    }\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        // Get round data / Check if the round exists\n        (\n            roundId,\n            answer,\n            startedAt,\n            updatedAt,\n            answeredInRound\n        ) = viewRoundData(_roundId);\n        if (updatedAt == 0) {\n            revert RoundEmpty(feedName, roundId);\n        }\n    }\n\n    function latestRoundData()\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        roundId = ISwitchboardPush(switchboardPricesContract)\n            .feeds(feedName)\n            .latestIntervalId;\n        if (roundId == 0) {\n            revert RoundEmpty(feedName, 0);\n        }\n        return viewLatestRoundData();\n    }\n\n    // View Functions (for off-chain use / no protection from empty rounds)\n    function viewRoundData(\n        uint80 _roundId\n    )\n        public\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        ISwitchboardPush.Feed memory feed = ISwitchboardPush(\n            switchboardPricesContract\n        ).feeds(feedName);\n        ISwitchboardPush.Result memory result;\n\n        if (_roundId == feed.latestIntervalId) {\n            result = feed.latestResult;\n        } else {\n            result = ISwitchboardPush(switchboardPricesContract).results(\n                feedName,\n                _roundId\n            );\n        }\n\n        answer = result.value;\n        startedAt = result.startedAt;\n        updatedAt = result.updatedAt;\n        roundId = _roundId;\n        answeredInRound = _roundId;\n    }\n\n    function viewLatestRoundData()\n        public\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        ISwitchboardPush.Result memory result = ISwitchboardPush(\n            switchboardPricesContract\n        ).feeds(feedName).latestResult;\n        answer = result.value;\n        startedAt = result.startedAt;\n        updatedAt = result.updatedAt;\n        roundId = roundId;\n        answeredInRound = roundId;\n    }\n}\n')))}p.isMDXComponent=!0}}]);