"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3994],{54852:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var r=a(49231);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),i=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=i(a),f=n,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return a?r.createElement(m,s(s({ref:t},u),{},{components:a})):r.createElement(m,s({ref:t},u))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:n,s[1]=l;for(var i=2;i<o;i++)s[i]=a[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}f.displayName="MDXCreateElement"},8475:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var r=a(95634),n=(a(49231),a(54852));const o={title:"switchboard-v2",slug:"/solana/sdk/rust/",hide_title:!0,sidebar_class_name:"sidebar__rust",sidebar_position:1,keywords:["Solana","Solana SDK","Switchboard Solana SDK","switchboard-v2 crate","solana rust crate"]},s=void 0,l={unversionedId:"solana/sdk/clients/switchboard-v2",id:"solana/sdk/clients/switchboard-v2",title:"switchboard-v2",description:"Switchboard Logo",source:"@site/docs/solana/sdk/clients/switchboard-v2.mdx",sourceDirName:"solana/sdk/clients",slug:"/solana/sdk/rust/",permalink:"/solana/sdk/rust/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"switchboard-v2",slug:"/solana/sdk/rust/",hide_title:!0,sidebar_class_name:"sidebar__rust",sidebar_position:1,keywords:["Solana","Solana SDK","Switchboard Solana SDK","switchboard-v2 crate","solana rust crate"]},sidebar:"solanaSidebar",previous:{title:"Switchboard x Solana",permalink:"/solana/"},next:{title:"@switchboard-xyz/solana.js",permalink:"/solana/sdk/javascript/"}},c={},i=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Read Latest Result",id:"read-latest-result",level:3},{value:"Read History Buffer",id:"read-history-buffer",level:3},{value:"Read VRF",id:"read-vrf",level:3},{value:"Request Randomness CPI",id:"request-randomness-cpi",level:3}],u={toc:i},p="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("div",{align:"center"},(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://github.com/switchboard-xyz/sbv2-core/raw/main/website/static/img/icons/switchboard/avatar.png",alt:"Switchboard Logo"})),(0,n.kt)("h1",{id:"switchboard-v2"},"switchboard-v2"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"A Rust library to interact with Switchboard accounts on Solana.")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://crates.io/crates/switchboard-v2"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/crates/v/switchboard-v2?label=switchboard-v2&logo=rust",alt:"Crates.io"})))),(0,n.kt)("h2",{id:"install"},"Install"),(0,n.kt)("p",null,"Run the following Cargo command in your project directory:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"cargo add switchboard-v2\n")),(0,n.kt)("p",null,"Or add the following line to your Cargo.toml:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nswitchboard-v2 = "0.1.23"\n')),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Directory")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#read-latest-result"},"Read Latest Result")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#read-history-buffer"},"Read History Buffer")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#read-vrf"},"Read VRF")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#request-randomness-cpi"},"Request Randomness CPI")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#read-buffer-relayer"},"Read Buffer Relayer"))),(0,n.kt)("h3",{id:"read-latest-result"},"Read Latest Result"),(0,n.kt)("p",null,"Read an aggregator result on-chain"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::solana_program::clock;\nuse std::convert::TryInto;\nuse switchboard_v2::{AggregatorAccountData, SwitchboardDecimal, SWITCHBOARD_PROGRAM_ID};\n\n// check feed owner\nlet owner = *aggregator.owner;\nif owner != SWITCHBOARD_PROGRAM_ID {\n  return Err(error!(ErrorCode::InvalidSwitchboardAccount));\n}\n\n// deserialize account info\nlet feed = ctx.accounts.aggregator.load()?;\n// OR\nlet feed = AggregatorAccountData::new(feed_account_info)?;\n\n// get result\nlet decimal: f64 = feed.get_result()?.try_into()?;\n\n// check if feed has been updated in the last 5 minutes\nfeed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)?;\n\n// check if feed exceeds a confidence interval of +/i $0.80\nfeed.check_confidence_interval(SwitchboardDecimal::from_f64(0.80))?;\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example Program(s)"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/examples/feeds/01_feed_client/src/lib.rs"},"anchor-feed-parser")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/examples/feeds/02_spl_native/src/lib.rs"},"native-feed-parser"))),(0,n.kt)("h3",{id:"read-history-buffer"},"Read History Buffer"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"Note: The Aggregator must have a history buffer initialized before using"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"use switchboard_v2::AggregatorHistoryBuffer;\nuse std::convert::TryInto;\n\nlet history_buffer = AggregatorHistoryBuffer::new(history_account_info)?;\nlet current_timestamp = Clock::get()?.unix_timestamp;\nlet one_hour_ago: f64 = history_buffer.lower_bound(current_timestamp - 3600).unwrap().try_into()?;\n")),(0,n.kt)("h3",{id:"read-vrf"},"Read VRF"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"use switchboard_v2::VrfAccountData;\n\n// deserialize the account info\nlet vrf = ctx.accounts.vrf.load()?;\n// OR\nlet vrf = VrfAccountData::new(vrf_account_info)?;\n\n// read the result\nlet result_buffer = vrf.get_result()?;\nlet value: &[u128] = bytemuck::cast_slice(&result_buffer[..]);\nlet result = value[0] % 256000 as u128;\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example Program(s)"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/examples/vrf/01_vrf_client/src/actions/update_result.rs"},"anchor-vrf-parser")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/vrf-flip"},"vrf-flip"))),(0,n.kt)("h3",{id:"request-randomness-cpi"},"Request Randomness CPI"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'pub use switchboard_v2::{VrfAccountData, VrfRequestRandomness};\n\nlet switchboard_program = ctx.accounts.switchboard_program.to_account_info();\n\nlet vrf_request_randomness = VrfRequestRandomness {\n  authority: ctx.accounts.state.to_account_info(),\n  vrf: ctx.accounts.vrf.to_account_info(),\n  oracle_queue: ctx.accounts.oracle_queue.to_account_info(),\n  queue_authority: ctx.accounts.queue_authority.to_account_info(),\n  data_buffer: ctx.accounts.data_buffer.to_account_info(),\n  permission: ctx.accounts.permission.to_account_info(),\n  escrow: ctx.accounts.escrow.clone(),\n  payer_wallet: ctx.accounts.payer_wallet.clone(),\n  payer_authority: ctx.accounts.payer_authority.to_account_info(),\n  recent_blockhashes: ctx.accounts.recent_blockhashes.to_account_info(),\n  program_state: ctx.accounts.program_state.to_account_info(),\n  token_program: ctx.accounts.token_program.to_account_info(),\n};\n\nlet vrf_key = ctx.accounts.vrf.key.clone();\nlet authority_key = ctx.accounts.authority.key.clone();\n\nlet state_seeds: &[&[&[u8]]] = &[&[\n  &STATE_SEED,\n  vrf_key.as_ref(),\n  authority_key.as_ref(),\n  &[bump],\n]];\nmsg!("requesting randomness");\nvrf_request_randomness.invoke_signed(\n  switchboard_program,\n  params.switchboard_state_bump,\n  params.permission_bump,\n  state_seeds,\n)?;\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example Program(s)"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/examples/vrf/01_vrf_client/src/actions/request_result.rs"},"anchor-vrf-parser")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/vrf-flip"},"vrf-flip"))))}d.isMDXComponent=!0}}]);