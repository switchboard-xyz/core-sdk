"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9267],{54852:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(49231);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),g=a,m=p["".concat(c,".").concat(g)]||p[g]||u[g]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},75454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(95634),a=(n(49231),n(54852));const i={title:"@switchboard-xyz/sui.js",hide_title:!0,sidebar_class_name:"sidebar__typescript",sidebar_position:1},o=void 0,s={unversionedId:"sui/javascript",id:"sui/javascript",title:"@switchboard-xyz/sui.js",description:"Switchboard Logo",source:"@site/docs/sui/javascript.mdx",sourceDirName:"sui",slug:"/sui/javascript",permalink:"/sui/javascript",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"@switchboard-xyz/sui.js",hide_title:!0,sidebar_class_name:"sidebar__typescript",sidebar_position:1},sidebar:"gettingStartedSidebar",previous:{title:"Getting Started",permalink:"/sui/"},next:{title:"SwitchboardStd",permalink:"/sui/move/"}},c={},l=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Reading Feeds",id:"reading-feeds",level:3},{value:"Creating Feeds",id:"creating-feeds",level:3}],d={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{align:"center"},(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/switchboard-xyz/sbv2-core/raw/main/website/static/img/icons/switchboard/avatar.png",alt:"Switchboard Logo"})),(0,a.kt)("h1",{id:"switchboard-xyzsuijs"},"@switchboard-xyz/sui.js"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A Typescript client to interact with Switchboard V2 on Sui.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@switchboard-xyz/sui.js"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/github/package-json/v/switchboard-xyz/sui-sdk?color=red&filename=javascript%2Fsui.js%2Fpackage.json&label=%40switchboard-xyz%2Fsui.js&logo=npm",alt:"NPM Badge"})))),(0,a.kt)("h2",{id:"install"},"Install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @switchboard-xyz/sui.js\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Directory")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#reading-feeds"},"Reading Feeds")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#creating-feeds"},"Creating Feeds"))),(0,a.kt)("h3",{id:"reading-feeds"},"Reading Feeds"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { AggregatorAccount } from "@switchboard-xyz/sui.js";\n\nconst aggregatorAccount: AggregatorAccount = new AggregatorAccount(\n  client,\n  aggregator_address,\n  SWITCHBOARD_ADDRESS\n);\n\nconsole.log(await aggregatorAccount.loadData());\n')),(0,a.kt)("h3",{id:"creating-feeds"},"Creating Feeds"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Buffer } from "buffer";\nimport { OracleJob, createFeed } from "@switchboard-xyz/sui.js";\nimport Big from "big.js";\nimport {\nEd25519Keypair,\nJsonRpcProvider,\ndevnetConnection,\n} from "@mysten/sui.js";\n\n// devnet address\nconst SWITCHBOARD_ADDRESS = "0x23ecb0df7bed0b4048f939298c9a179973e13d4e";\nconst QUEUE_ADDRESS = "0xacbb5327b76a6980495f4f3b7482c7f6cc5a4791";\n\n// keypair\nconst keypair = Ed25519Keypair.fromSecretKey(Buffer.from(/** YOUR KEYPAIR IMPORT GOES HERE **/, "hex"));\n\n// Make Job data for btc price\nconst serializedJob = Buffer.from(\nOracleJob.encodeDelimited(\n  OracleJob.create({\n    tasks: [\n      {\n        httpTask: {\n          url: "https://www.binance.us/api/v3/ticker/price?symbol=BTCUSD",\n        },\n      },\n      {\n        jsonParseTask: {\n          path: "$.price",\n        },\n      },\n    ],\n  })\n).finish()\n);\n\nconst coins = await provider.selectCoinsWithBalanceGreaterThanOrEqual(\nuserAddress,\nBigInt(10000000)\n);\n\nconst coin: any = coins.pop();\n\nconst [aggregator, createFeedTx] = await createFeed(\nprovider,\nkeypair, // you will need to import a Sui Payer Keypair\n{\n  name: "BTC/USD",\n  authority: userAddress,\n  queueAddress: queue.address,\n  batchSize: 1,\n  minJobResults: 1,\n  minOracleResults: 1,\n  minUpdateDelaySeconds: 5,\n  varianceThreshold: new Big(0),\n  forceReportPeriod: 0,\n  coinType: "0x2::sui::SUI",\n  initialLoadAmount: 1,\n  loadCoin: coin.details.reference.objectId,\n  jobs: [\n    {\n      name: "BTC/USD",\n      data: Array.from(serializedJob1),\n      weight: 1,\n    },\n  ],\n},\nSWITCHBOARD_ADDRESS\n);\n\nconsole.log(`Created Aggregator address ${aggregator.address}.`);\n')))}u.isMDXComponent=!0}}]);