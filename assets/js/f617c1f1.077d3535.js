"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2147],{54852:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var a=n(49231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,b=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(b,s(s({ref:t},c),{},{components:n})):a.createElement(b,s({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},77680:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(49231),r=n(19841);const o={tabItem:"tabItem_ftN3"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:n},t)}},8450:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(66e3),r=n(49231),o=n(19841),s=n(61084),i=n(95773),l=n(16082);const u={tabList:"tabList_QucB",tabItem:"tabItem_qpyD"};function c(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),m=e=>{const t=e.currentTarget,n=d.indexOf(t),a=c[n].value;a!==i&&(p(t),l(a))},b=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:b,onClick:m},s,{className:(0,o.Z)("tabs__item",u.tabItem,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function d(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function p(e){const t=(0,i.Y)(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",u.tabList)},r.createElement(c,(0,a.Z)({},e,t)),r.createElement(d,(0,a.Z)({},e,t)))}function m(e){const t=(0,l.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},95773:(e,t,n)=>{n.d(t,{Y:()=>p});var a=n(49231),r=n(19409),o=n(26002),s=n(75851),i=n(95149);function l(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??l(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:n}=e;const s=(0,r.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(s.location.search);t.set(i,e),s.replace({...s.location,search:t.toString()})}),[i,s])]}function p(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=u(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[p,m]=d({queryString:n,groupId:r}),[b,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,i.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),h=(()=>{const e=p??b;return c({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!c({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),f(e)}),[m,f,o]),tabValues:o}}},83911:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>b,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var a=n(66e3),r=(n(49231),n(54852)),o=n(8450),s=n(77680);const i={sidebar_position:90,title:"Test Integration"},l=void 0,u={unversionedId:"guides/solana/test-integration",id:"guides/solana/test-integration",title:"Test Integration",description:"Switchboard provides some tools to streamline test integration. This requires",source:"@site/docs/guides/solana/test-integration.mdx",sourceDirName:"guides/solana",slug:"/guides/solana/test-integration",permalink:"/guides/solana/test-integration",draft:!1,tags:[],version:"current",sidebarPosition:90,frontMatter:{sidebar_position:90,title:"Test Integration"},sidebar:"guidesSidebar",previous:{title:"Functions: Getting Started",permalink:"/guides/solana/functions/"}},c={},d=[{value:"Setup Localnet Environment",id:"setup-localnet-environment",level:2},{value:"Test Suite",id:"test-suite",level:2}],p={toc:d},m="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Switchboard provides some tools to streamline test integration. ",(0,r.kt)("strong",{parentName:"p"},"This requires\nDocker to be installed and running on the host machine.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This is compatible with ",(0,r.kt)("strong",{parentName:"p"},"localnet")," and ",(0,r.kt)("strong",{parentName:"p"},"devnet"),".")),(0,r.kt)("h2",{id:"setup-localnet-environment"},"Setup Localnet Environment"),(0,r.kt)("p",null,"You may wish to run a localnet version of Switchboard to watch how your program\nreacts to data feed updates. You will need to copy some Switchboard accounts\nfrom devnet to your local validator on the initial startup sequence. This can be\ndone with Anchor by editing your Anchor.toml config or by starting the local\nvalidator with the accounts provided."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"Anchor",label:"Anchor",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[test.validator]\nurl = "https://api.mainnet-beta.solana.com"\n\n[test]\nstartup_wait = 15000\n\n[[test.validator.clone]] # sbv2 programID\naddress = "SW1TCH7qEPTdLsDHRgPuMQjbQxKdH2aBStViMFnt64f"\n\n[[test.validator.clone]] # sbv2 IDL\naddress = "Fi8vncGpNKbq62gPo56G4toCehWNy77GgqGkTaAF5Lkk"\n\n[[test.validator.clone]] # sbv2 SbState\naddress = "CyZuD7RPDcrqCGbNvLCyqk6Py9cEZTKmNKujfPi3ynDd"\n\n[[test.validator.clone]] # sbv2 SOL/USD Feed\naddress="GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR"\n'))),(0,r.kt)(s.Z,{value:"CLI",label:"solana-test-validator CLI",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"solana-test-validator -r --bind-address 0.0.0.0 --rpc-port 8899 \\\n  --url https://api.mainnet-beta.solana.com \\\n  --clone SW1TCH7qEPTdLsDHRgPuMQjbQxKdH2aBStViMFnt64f `# programId` \\\n  --clone 7nYabs9dUhvxYwdTnrWVBL9MYviKSfrEbdWCUbcnwkpF `# programDataAddress` \\\n  --clone Fi8vncGpNKbq62gPo56G4toCehWNy77GgqGkTaAF5Lkk `# idlAddress` \\\n  --clone CyZuD7RPDcrqCGbNvLCyqk6Py9cEZTKmNKujfPi3ynDd `# programState`\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Now start your tests with ",(0,r.kt)("inlineCode",{parentName:"p"},"anchor test --skip-local-validator"))))),(0,r.kt)("h2",{id:"test-suite"},"Test Suite"),(0,r.kt)("p",null,"Update your test file and add a before and after hook to create your Switchboard\nenvironment. You may omit the keypair arguements to create a brand new queue and\noracle with each run. If no keypair is found at the path provided, one will be\ncreated for you."),(0,r.kt)("p",null,"The start method lets you specify the version of the oracle to run along with a\ndocker config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  AggregatorAccount,\n  SwitchboardTestContext,\n} from "@switchboard-xyz/solana.js";\nimport { NodeOracle } from "@switchboard-xyz/oracle";\nimport { OracleJob } from "@switchboard-xyz/common";\n\ndescribe("anchor-feed-parser test", () => {\n  const provider = anchor.AnchorProvider.env();\n  anchor.setProvider(provider);\n\n  let switchboard: SwitchboardTestContext;\n  let oracle: NodeOracle;\n\n  let aggregatorAccount: AggregatorAccount;\n\n  before(async () => {\n    switchboard = await SwitchboardTestContext.loadFromProvider(provider, {\n      name: "Test Queue",\n      // You can provide a keypair to so the PDA schemes dont change between test runs\n      keypair: SwitchboardTestContext.loadKeypair("~/.keypairs/queue.json"),\n      queueSize: 10,\n      reward: 0,\n      minStake: 0,\n      oracleTimeout: 900,\n      // aggregators will not require PERMIT_ORACLE_QUEUE_USAGE before joining a queue\n      unpermissionedFeeds: true,\n      unpermissionedVrf: true,\n      enableBufferRelayers: true,\n      oracle: {\n        name: "Test Oracle",\n        enable: true,\n        stakingWalletKeypair: SwitchboardTestContext.loadKeypair(\n          "~/.keypairs/oracleWallet.json"\n        ),\n      },\n    });\n\n    oracle = await NodeOracle.fromReleaseChannel({\n      chain: "solana",\n      // use the latest testnet (devnet) version of the oracle\n      releaseChannel: "testnet",\n      // disables production capabilities like monitoring and alerts\n      network: "localnet",\n      rpcUrl: provider.connection.rpcEndpoint,\n      oracleKey: switchboard.oracle.publicKey.toBase58(),\n      // path to the payer keypair so the oracle can pay for txns\n      secretPath: switchboard.walletPath || "~/.config/solana/id.json",\n      // set to true to suppress oracle logs in the console\n      silent: false,\n      // optional env variables to speed up the workflow\n      envVariables: {\n        VERBOSE: "1",\n        DEBUG: "1",\n        DISABLE_NONCE_QUEUE: "1",\n        DISABLE_METRICS: "1",\n      },\n    });\n\n    // start the oracle and wait for it to start heartbeating on-chain\n    await oracle.startAndAwait();\n  });\n\n  after(() => {\n    oracle?.stop();\n  });\n\n  it("Creates a static feed that resolves to 100", async () => {\n    [aggregatorAccount] = await switchboard.queue.createFeed({\n      batchSize: 1,\n      minRequiredOracleResults: 1,\n      minRequiredJobResults: 1,\n      minUpdateDelaySeconds: 10,\n      fundAmount: 0.15,\n      enable: true,\n      slidingWindow: true,\n      jobs: [\n        {\n          data: OracleJob.encodeDelimited(\n            OracleJob.fromObject({\n              tasks: [\n                {\n                  valueTask: {\n                    value: 100,\n                  },\n                },\n              ],\n            })\n          ).finish(),\n        },\n      ],\n    });\n\n    const aggregator = await aggregatorAccount.loadData();\n    const [updatedState] = await aggregatorAccount.openRoundAndAwaitResult();\n    const result = AggregatorAccount.decodeLatestValue(updatedState);\n    assert(result.toNumber() === 100, "Aggregator result mismatch");\n  });\n});\n')))}b.isMDXComponent=!0}}]);