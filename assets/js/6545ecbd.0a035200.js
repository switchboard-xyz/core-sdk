"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3304],{54852:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>m});var r=n(49231);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),c=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=c(t.components);return r.createElement(l.Provider,{value:e},t.children)},u="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},h=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,d=s(t,["components","mdxType","originalType","parentName"]),u=c(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(m,i(i({ref:e},d),{},{components:n})):r.createElement(m,i({ref:e},d))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[u]="string"==typeof t?t:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},70651:(t,e,n)=>{n.d(e,{Z:()=>i});var r=n(49231),a=n(19841);const o={tabItem:"tabItem_cjqz"};function i(t){let{children:e,hidden:n,className:i}=t;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,i),hidden:n},e)}},54405:(t,e,n)=>{n.d(e,{Z:()=>h});var r=n(95634),a=n(49231),o=n(19841),i=n(93682),s=n(17096),l=n(80852);const c={tabList:"tabList_URvL",tabItem:"tabItem_e5E2"};function d(t){let{className:e,block:n,selectedValue:s,selectValue:l,tabValues:d}=t;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),h=t=>{const e=t.currentTarget,n=u.indexOf(e),r=d[n].value;r!==s&&(p(e),l(r))},m=t=>{let e=null;switch(t.key){case"Enter":h(t);break;case"ArrowRight":{const n=u.indexOf(t.currentTarget)+1;e=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(t.currentTarget)-1;e=u[n]??u[u.length-1];break}}e?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},e)},d.map((t=>{let{value:e,label:n,attributes:i}=t;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,key:e,ref:t=>u.push(t),onKeyDown:m,onClick:h},i,{className:(0,o.Z)("tabs__item",c.tabItem,i?.className,{"tabs__item--active":s===e})}),n??e)})))}function u(t){let{lazy:e,children:n,selectedValue:r}=t;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const t=o.find((t=>t.props.value===r));return t?(0,a.cloneElement)(t,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((t,e)=>(0,a.cloneElement)(t,{key:e,hidden:t.props.value!==r}))))}function p(t){const e=(0,s.Y)(t);return a.createElement("div",{className:(0,o.Z)("tabs-container",c.tabList)},a.createElement(d,(0,r.Z)({},t,e)),a.createElement(u,(0,r.Z)({},t,e)))}function h(t){const e=(0,l.Z)();return a.createElement(p,(0,r.Z)({key:String(e)},t))}},17096:(t,e,n)=>{n.d(e,{Y:()=>p});var r=n(49231),a=n(19409),o=n(18948),i=n(79862),s=n(42150);function l(t){return function(t){return r.Children.map(t,(t=>{if(!t||(0,r.isValidElement)(t)&&function(t){const{props:e}=t;return!!e&&"object"==typeof e&&"value"in e}(t))return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(t).map((t=>{let{props:{value:e,label:n,attributes:r,default:a}}=t;return{value:e,label:n,attributes:r,default:a}}))}function c(t){const{values:e,children:n}=t;return(0,r.useMemo)((()=>{const t=e??l(n);return function(t){const e=(0,i.l)(t,((t,e)=>t.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(t),t}),[e,n])}function d(t){let{value:e,tabValues:n}=t;return n.some((t=>t.value===e))}function u(t){let{queryString:e=!1,groupId:n}=t;const i=(0,a.k6)(),s=function(t){let{queryString:e=!1,groupId:n}=t;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o._X)(s),(0,r.useCallback)((t=>{if(!s)return;const e=new URLSearchParams(i.location.search);e.set(s,t),i.replace({...i.location,search:e.toString()})}),[s,i])]}function p(t){const{defaultValue:e,queryString:n=!1,groupId:a}=t,o=c(t),[i,l]=(0,r.useState)((()=>function(t){let{defaultValue:e,tabValues:n}=t;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find((t=>t.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:e,tabValues:o}))),[p,h]=u({queryString:n,groupId:a}),[m,b]=function(t){let{groupId:e}=t;const n=function(t){return t?`docusaurus.tab.${t}`:null}(e),[a,o]=(0,s.Nk)(n);return[a,(0,r.useCallback)((t=>{n&&o.set(t)}),[n,o])]}({groupId:a}),f=(()=>{const t=p??m;return d({value:t,tabValues:o})?t:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((t=>{if(!d({value:t,tabValues:o}))throw new Error(`Can't select invalid tab value=${t}`);l(t),h(t),b(t)}),[h,b,o]),tabValues:o}}},29345:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var r=n(95634),a=(n(49231),n(54852)),o=n(54405),i=n(70651);const s={title:"ISwitchboard.sol",hide_table_of_contents:!0,keywords:["Switchboard","oracle network","evm"]},l=void 0,c={unversionedId:"evm/dev/switchboard-sol",id:"evm/dev/switchboard-sol",title:"ISwitchboard.sol",description:"ISwitchboard.sol is a solidity interface representing the Switchboard contract.",source:"@site/docs/202-evm/70-dev/10-switchboard-sol.mdx",sourceDirName:"202-evm/70-dev",slug:"/evm/dev/switchboard-sol",permalink:"/evm/dev/switchboard-sol",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"ISwitchboard.sol",hide_table_of_contents:!0,keywords:["Switchboard","oracle network","evm"]},sidebar:"sidebar",previous:{title:"Developer Resources",permalink:"/evm/dev/"},next:{title:"\u27a1\ufe0f Your First Contract",permalink:"/evm/guides/first-contract"}},d={},u=[{value:"Setup",id:"setup",level:2},{value:"Install Contracts",id:"install-contracts",level:3},{value:"Import the Contract",id:"import-the-contract",level:3},{value:"Deploying with Hardhat",id:"deploying-with-hardhat",level:3},{value:"Import the Contract",id:"import-the-contract-1",level:3},{value:"Deploying with Foundry",id:"deploying-with-foundry",level:3},{value:"Testing with Foundry",id:"testing-with-foundry",level:3},{value:"Usage",id:"usage",level:2},{value:"Read Attestation Queue",id:"read-attestation-queue",level:3},{value:"Create a Function",id:"create-a-function",level:3},{value:"Read Function",id:"read-function",level:3},{value:"Fund Function",id:"fund-function",level:3},{value:"Call Function",id:"call-function",level:3}],p={toc:u},h="wrapper";function m(t){let{components:e,...n}=t;return(0,a.kt)(h,(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"ISwitchboard.sol is a solidity interface representing the Switchboard contract.\nYou may initialize this interface in your program if you pass a valid\nSwitchboard address. You may find a list of supported networks in the\n",(0,a.kt)("a",{parentName:"p",href:"/network"},"Networks Page")," - or use some of the utility functions below to load\nthe addresses dynamically based on a chainId."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)(o.Z,{groupId:"evm-tooling",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"hardhat",label:"Hardhat",default:!0,mdxType:"TabItem"},(0,a.kt)("h3",{id:"install-contracts"},"Install Contracts"),(0,a.kt)("p",null,"Add\n",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@switchboard-xyz/evm.js"},"@switchboard-xyz/evm.js"),"\nto your Hardhat project:"),(0,a.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -D @switchboard-xyz/evm.js\n"))),(0,a.kt)(i.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev @switchboard-xyz/evm.js\n"))),(0,a.kt)(i.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm add -D @switchboard-xyz/evm.js\n")))),(0,a.kt)("h3",{id:"import-the-contract"},"Import the Contract"),(0,a.kt)("p",null,"Import the ISwitchboard interface from ",(0,a.kt)("inlineCode",{parentName:"p"},"@switchboard-xyz/evm.js/contracts/"),"."),(0,a.kt)("p",null,"You will need to pass the Switchboard address into your constructor or\ninitialization function. This ensures you always call the correct Switchboard\ncontract."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="contracts/MyContract.sol"',title:'"contracts/MyContract.sol"'},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {ISwitchboard} from "@switchboard-xyz/evm.js/contracts/ISwitchboard.sol";\n\ncontract MyContract {\n    ISwitchboard switchboard;\n\n    constructor(address switchboardAddress) {\n        switchboard = ISwitchboard(switchboardAddress);\n    }\n}\n')),(0,a.kt)("h3",{id:"deploying-with-hardhat"},"Deploying with Hardhat"),(0,a.kt)("p",null,"If you're using a hardhat deployment script, you can use the following snippet\nto get the address of the Switchboard contract from a provided chainId:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="scripts/deploy.ts"',title:'"scripts/deploy.ts"'},'import { ethers } from "hardhat";\nimport { getEvmConfig, IEvmNetworkConfig } from "@switchboard-xyz/evm.js";\n\nasync function main() {\n  const { chainId } = await ethers.provider.getNetwork();\n  const sbConfig: IEvmNetworkConfig = getEvmConfig(chainId);\n  const sbAddress: string = sbConfig.address;\n\n  // ... hardhat sample deploy script\n\n  const myContract = await ethers.deployContract("MyContract", [sbAddress]);\n  await myContract.waitForDeployment();\n\n  console.log(\n    `MyContract deployed to ${myContract.target} with Switchboard address ${sbAddress}`\n  );\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n'))),(0,a.kt)(i.Z,{value:"foundry",label:"Foundry",mdxType:"TabItem"},(0,a.kt)("p",null,"Add\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/switchboard-contracts"},"switchboard-xyz/switchboard-contracts"),"\nto your foundry project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"forge install --no-commit switchboard-xyz/switchboard-contracts\n")),(0,a.kt)("p",null,"Then add the following to your remappings.txt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-txt"},"switchboard-contracts/=lib/switchboard-contracts/\nswitchboard/=lib/switchboard-contracts/src/\nswitchboard-scripts/=lib/switchboard-contracts/script/\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE:")," If you do not have this file you can generate it with:\n",(0,a.kt)("inlineCode",{parentName:"p"},"forge remappings > remappings.txt"),"."),(0,a.kt)("h3",{id:"import-the-contract-1"},"Import the Contract"),(0,a.kt)("p",null,"Import the ISwitchboard interface from ",(0,a.kt)("inlineCode",{parentName:"p"},"switchboard/ISwitchboard.sol"),"."),(0,a.kt)("p",null,"You will need to pass the Switchboard address into your constructor or\ninitialization function. This ensures you always call the correct Switchboard\ncontract."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="src/MyContract.sol"',title:'"src/MyContract.sol"'},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {ISwitchboard} from "switchboard/ISwitchboard.sol";\n\ncontract MyContract {\n    ISwitchboard switchboard;\n\n    constructor(address switchboardAddress) {\n        switchboard = ISwitchboard(switchboardAddress);\n    }\n}\n')),(0,a.kt)("h3",{id:"deploying-with-foundry"},"Deploying with Foundry"),(0,a.kt)("p",null,"Foundry uses solidity scripts to handle deployments. The ",(0,a.kt)("inlineCode",{parentName:"p"},"switchboard-contracts"),"\nrepository contains a\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/switchboard-contracts/blob/main/script/HelperConfig.s.sol"},"HelperConfig contract"),"\nto check if the current chainId corresponds to a valid Switchboard deployment -\nand if the chainId is not found it fallsback to a mock contract."),(0,a.kt)("p",null,"Below is a sample deployment script to deploy our contract. We can call this\nscript with ",(0,a.kt)("inlineCode",{parentName:"p"},"forge script script/Deploy.s.sol:DeployScript -vv"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="script/Deploy.s.sol"',title:'"script/Deploy.s.sol"'},'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {MyContract} from "../src/MyContract.sol";\n\nimport {Script, console2} from "forge-std/Script.sol";\nimport {SwitchboardHelperConfig} from "switchboard-scripts/HelperConfig.s.sol";\n\ncontract DeployScript is Script {\n    function setUp() public {}\n\n    function run() external returns (MyContract, SwitchboardHelperConfig) {\n        SwitchboardHelperConfig sbConfig = new SwitchboardHelperConfig();\n        console2.log("Switchboard address: %s", sbConfig.getSwitchboardAddress());\n        console2.log("AttestationQueueId: %s", sbConfig.getAttestationQueueId());\n\n        vm.startBroadcast();\n        MyContract myContract = new MyContract(sbConfig.getSwitchboardAddress());\n        vm.stopBroadcast();\n\n        console2.log("MyContract address: %s", address(myContract));\n\n        return (myContract, sbConfig);\n    }\n}\n')),(0,a.kt)("h3",{id:"testing-with-foundry"},"Testing with Foundry"),(0,a.kt)("p",null,"We now have a deployment script to deploy our contract. We can also use this in\nour integration tests to streamline our deploys. We'll add a basic helloWorld\nfunction to ",(0,a.kt)("inlineCode",{parentName:"p"},"src/MyContract.sol")," then test our contract with ",(0,a.kt)("inlineCode",{parentName:"p"},"forge test"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="test/MyContract.t.sol"',title:'"test/MyContract.t.sol"'},'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {MyContract} from "../src/MyContract.sol";\nimport {DeployScript} from "../script/Deploy.s.sol";\n\nimport {Test} from "forge-std/Test.sol";\nimport {SwitchboardHelperConfig} from "switchboard-scripts/HelperConfig.s.sol";\n\ncontract MyContractTest is Test {\n    MyContract public myContract;\n    SwitchboardHelperConfig public sbConfig;\n\n    function setUp() public {\n        DeployScript deployer = new DeployScript();\n        (myContract, sbConfig) = deployer.run();\n    }\n\n    function testHelloWorld() public {\n        myContract.helloWorld();\n    }\n}\n')))),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"TBD - example calls using the ISwitchboard interface"),(0,a.kt)("h3",{id:"read-attestation-queue"},"Read Attestation Queue"),(0,a.kt)("h3",{id:"create-a-function"},"Create a Function"),(0,a.kt)("h3",{id:"read-function"},"Read Function"),(0,a.kt)("h3",{id:"fund-function"},"Fund Function"),(0,a.kt)("h3",{id:"call-function"},"Call Function"))}m.isMDXComponent=!0}}]);