"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2251],{54852:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var r=n(49231);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,b=p["".concat(c,".").concat(m)]||p[m]||u[m]||s;return n?r.createElement(b,o(o({ref:t},d),{},{components:n})):r.createElement(b,o({ref:t},d))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},60930:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(95907),a=(n(49231),n(54852));const s={title:"@switchboard-xyz/evm.js",slug:"/arbitrum/sdk/javascript/",hide_title:!0,sidebar_class_name:"sidebar__typescript",sidebar_position:3},o=void 0,i={unversionedId:"arbitrum/sdk/clients/evm_js",id:"arbitrum/sdk/clients/evm_js",title:"@switchboard-xyz/evm.js",description:"Switchboard Logo",source:"@site/docs/arbitrum/sdk/clients/evm_js.mdx",sourceDirName:"arbitrum/sdk/clients",slug:"/arbitrum/sdk/javascript/",permalink:"/arbitrum/sdk/javascript/",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"@switchboard-xyz/evm.js",slug:"/arbitrum/sdk/javascript/",hide_title:!0,sidebar_class_name:"sidebar__typescript",sidebar_position:3},sidebar:"arbitrumSidebar",previous:{title:"ILegacyOracle",permalink:"/arbitrum/sdk/solidity/ILegacyOracle"},next:{title:"feed-parser",permalink:"/arbitrum/sdk/solidity/feed-parser"}},c={},l=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Create a Data Feed",id:"create-a-data-feed",level:3},{value:"Create a Job on IPFS",id:"create-a-job-on-ipfs",level:3}],d={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{align:"center"},(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/switchboard-xyz/sbv2-core/raw/main/website/static/img/icons/switchboard/avatar.png",alt:"Switchboard Logo"})),(0,a.kt)("h1",{id:"switchboard-xyzevmjs"},"@switchboard-xyz/evm.js"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A Typescript client to interact with Switchboard on NEAR.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@switchboard-xyz/evm.js"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/github/package-json/v/switchboard-xyz/sbv2-evm?color=red&filename=javascript%2Fevm.js%2Fpackage.json&label=%40switchboard-xyz%2Fevm.js&logo=npm",alt:"NPM Badge"})))),(0,a.kt)("h2",{id:"install"},"Install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @switchboard-xyz/evm.js\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Directory")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#create-a-data-feed"},"Create a Data Feed")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#create-a-job-on-ipfs"},"Create a Job on IPFS"))),(0,a.kt)("h3",{id:"create-a-data-feed"},"Create a Data Feed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { AggregatorAccount, OracleJob } from "@switchboard-xyz/evm.js";\nimport { BigNumber, Wallet } from "ethers";\n\nconst authorityAddress = "0x1"; // Add your address here\nconst queueAddress = "0x83Fb069B10426056Ef8Ca54750cB9bB552a59e7D"; // Permissionless queue address\nconst switchboardAddress = "0xe9F5Ecb00BC437F061DF59d899F00f260740dC48";\n\nconst batchSize = 1; // 1 oracle will resolve a feed\nconst minUpdateDelaySeconds = 30; // update every 30 seconds\nconst minOracleResults = 1; // it should only take 1 oracle to resolve the feed\nconst ipfsJobsAddress = ""; // OracleJobs stored in IPFS\nconst varianceThreshold = 0; // Always update - but this is stored as a fixed scale factor decimal 18 digits represent the decimal portion of each num\nconst minJobResults = 1; // It should only take 1 job to resolve a feed\nconst forceReportPeriod = 0; // Force a result is off\n\nconst tx = await switchboard.createAggregator(\n  "My BTC Feed",\n  authorityAddress,\n  oracleRequestBatchSize,\n  minUpdateDelaySeconds,\n  minOracleResults,\n  ipfsJobsAddress,\n  queueAddress,\n\n  /// Response Configs (not used on-chain)\n  varianceThreshold,\n  minJobResults,\n  forceReportPeriod,\n\n  false, // Aggregator V3 Inteface is off (makes updates more expensive)\n  {\n    value: BigNumber.from(\n      new Big(params.initialLoadAmount).mul(WEI_PER_ETH.toString()).toString()\n    ),\n  }\n);\n\n// get aggregator address from receipt\nconst aggregatorAddress = tx.wait().then((logs) => {\n  const log = logs.logs[0];\n  const sbLog = switchboard.interface.parseLog(log);\n  return sbLog.args.accountAddress as string;\n});\n')),(0,a.kt)("h3",{id:"create-a-job-on-ipfs"},"Create a Job on IPFS"),(0,a.kt)("p",null,"A set of jobs must be encoded with the\n",(0,a.kt)("a",{parentName:"p",href:"https://ipfs.io/ipfs/bafybeiaprigfe7hakc4hgqyrjtgsbggrpvzfufpufzvpwtzlznyjb5hjw4/%20USD"},"following structure"),".\nThis example uses ",(0,a.kt)("a",{parentName:"p",href:"https://web3.storage"},"web3.storage"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const jobs = [\n  {\n    name: job.name,\n    weight: job.weight,\n    data: Buffer.from(\n      sb.OracleJob.encodeDelimited({\n        tasks: [\n          {\n            httpTask: {\n              url: "https://api.coinbase.com/v2/prices/USDC-USD/spot",\n            },\n          },\n          {\n            jsonParseTask: {\n              path: "$.data.amount",\n            },\n          },\n          {\n            boundTask: {\n              lowerBoundValue: "0.98",\n              upperBoundValue: "1.02",\n            },\n          },\n        ],\n      }).finish()\n    ).toString("base64"),\n  },\n];\n\nconst client = new Web3Storage({\n  token: "<TOKEN_GOES_HERE>",\n});\n\n// get jobs from validation\nconst content = new File([JSON.stringify(jobs)], "", {\n  type: "application/json",\n});\n\n// get content ID - fetchable immediately via ipfs\nconst cid = await client.put([content], {\n  wrapWithDirectory: false,\n});\n')))}u.isMDXComponent=!0}}]);