"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3154],{54852:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>b});var r=a(49231);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(a),g=n,b=u["".concat(l,".").concat(g)]||u[g]||p[g]||o;return a?r.createElement(b,s(s({ref:t},d),{},{components:a})):r.createElement(b,s({ref:t},d))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},88986:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=a(95634),n=(a(49231),a(54852));const o={title:"switchboard",slug:"/aptos/sdk/move/",hide_title:!0,sidebar_class_name:"sidebar__move",sidebar_position:1},s=void 0,i={unversionedId:"aptos/sdk/clients/switchboard",id:"aptos/sdk/clients/switchboard",title:"switchboard",description:"Switchboard Logo",source:"@site/docs/aptos/sdk/clients/switchboard.mdx",sourceDirName:"aptos/sdk/clients",slug:"/aptos/sdk/move/",permalink:"/aptos/sdk/move/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"switchboard",slug:"/aptos/sdk/move/",hide_title:!0,sidebar_class_name:"sidebar__move",sidebar_position:1},sidebar:"aptosSidebar",previous:{title:"Switchboard x Aptos",permalink:"/aptos/"},next:{title:"@switchboard-xyz/aptos.js",permalink:"/aptos/sdk/javascript/"}},l={},c=[{value:"Build",id:"build",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Reading Feeds",id:"reading-feeds",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("div",{align:"center"},(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://github.com/switchboard-xyz/sbv2-core/raw/main/website/static/img/icons/switchboard/avatar.png",alt:"Switchboard Logo"})),(0,n.kt)("h1",{id:"switchboard"},"switchboard"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"A Move module to interact with Switchboard on Aptos."))),(0,n.kt)("h2",{id:"build"},"Build"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"aptos move compile --named-addresses switchboard=default\n")),(0,n.kt)("h2",{id:"install"},"Install"),(0,n.kt)("p",null,"Add the following to your ",(0,n.kt)("inlineCode",{parentName:"p"},"Move.toml"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml"},'[addresses]\nswitchboard = "0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77"\n\n[dependencies]\nMoveStdlib = { git = "https://github.com/aptos-labs/aptos-core.git", subdir = "aptos-move/framework/move-stdlib/", rev = "devnet" }\nAptosFramework = { git = "https://github.com/aptos-labs/aptos-core.git", subdir = "aptos-move/framework/aptos-framework/", rev = "devnet" }\nAptosStdlib = { git = "https://github.com/aptos-labs/aptos-core.git", subdir = "aptos-move/framework/aptos-stdlib/", rev = "devnet" }\nSwitchboard = { git = "https://github.com/switchboard-xyz/sbv2-aptos.git", subdir = "move/switchboard/", rev = "main" }\n')),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Directory")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#reading-feeds"},"Reading Feeds"))),(0,n.kt)("h3",{id:"reading-feeds"},"Reading Feeds"),(0,n.kt)("p",null,"Read an aggregator result on-chain"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-move"},"use switchboard::aggregator;\nuse switchboard::math;\n\n// store latest value\nstruct AggregatorInfo has copy, drop, store, key {\n  aggregator_addr: address,\n  latest_result: u128,\n  latest_result_scaling_factor: u8,\n  latest_result_neg: bool,\n}\n\n// get latest value\npublic fun save_latest_value(aggregator_addr: address) {\n  // get latest value\n  let latest_value = aggregator::latest_value(aggregator_addr);\n  let (value, scaling_factor, neg) = math::unpack(latest_value);\n  move_to(account, AggregatorInfo {\n      aggregator_addr: aggregator_addr,\n      latest_result: value,\n      latest_result_scaling_factor: scaling_factor,\n      latest_result_neg: neg,\n  });\n}\n\n// some testing that uses aggregator test utility functions\n#[test(account = @0x1)]\npublic entry fun test_aggregator(account: &signer) {\n\n  // creates test aggregator with data\n  aggregator::new_test(account, 100, 0, false);\n\n  // print out value\n  std::debug::print(&aggregator::latest_value(signer::address_of(account)));\n}\n")))}p.isMDXComponent=!0}}]);