"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1353],{54852:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(49231);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(a),h=r,f=u["".concat(c,".").concat(h)]||u[h]||p[h]||o;return a?n.createElement(f,i(i({ref:t},d),{},{components:a})):n.createElement(f,i({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},12225:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=a(66e3),r=(a(49231),a(54852));const o={title:"Switchboard V2 (pt.2)\u200a\u2014\u200aArchitecture and Data Flows",description:"",authors:["gallynaut"],tags:[],hide_table_of_contents:!0},i="Switchboard V2 (pt.2) \u2014 Architecture and Data Flows",s={permalink:"/blog/2021/10/12/Switchboard-V2-Architecture-and-Data-Flows",source:"@site/blog/2021/10-12-Switchboard-V2-Architecture-and-Data-Flows.mdx",title:"Switchboard V2 (pt.2)\u200a\u2014\u200aArchitecture and Data Flows",description:"",date:"2021-10-12T00:00:00.000Z",formattedDate:"October 12, 2021",tags:[],readingTime:5.89,hasTruncateMarker:!0,authors:[{name:"gallynaut",title:"Developer Relations",url:"https://twitter.com/gallynaut",imageURL:"https://pbs.twimg.com/profile_images/1649642820993679365/buRwDkVY_400x400.jpg",key:"gallynaut"}],frontMatter:{title:"Switchboard V2 (pt.2)\u200a\u2014\u200aArchitecture and Data Flows",description:"",authors:["gallynaut"],tags:[],hide_table_of_contents:!0},prevItem:{title:"Switchboard V2 (pt.3) \u2014 Incentives",permalink:"/blog/2021/11/03/Switchboard-V2-Incentives"},nextItem:{title:"Switchboard x GRAPE Network",permalink:"/blog/2021/10/04/Switchboard-x-GRAPE-Network"}},c={authorsImageUrls:[void 0]},l=[{value:"Overview",id:"overview",level:2}],d={toc:l},u="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In a previous article we looked at the different stakeholders and how they\noperate within Switchboard V2. Today\u2019s article will focus on the technical\ncomponents and how they interact with each other. So let\u2019s jump right in."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"What is a Data Feed?"))),(0,r.kt)("p",null,"A data feed is the centerpiece of Switchboard and is what on-chain developers\nwill use when building smart contracts. A data feed is a collection of jobs that\nget aggregated to produce some deterministic result. Each job is associated with\nan endpoint and has a number of tasks that get executed in sequential order in\norder to produce a single value. Typically the first task in a job will fetch\nexternal data with subsequent tasks responsible for parsing the response and\ntransforming the value into a single data type, like an integer or decimal. When\nan oracle is assigned to process a data feed update, the oracle executes the\ndefined jobs and publishes the median result on-chain. The data feed then\ncomputes the final value as the median response among the assigned oracles. In\nsummary, the data feed is the blueprint for how data gets fetched from off-chain\nsources."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(61297).Z,width:"1652",height:"1024"})),(0,r.kt)("p",null,"Along with the jobs, a data feed also includes a configuration dictating how\noften a feed should be updated and the minimum number of jobs or oracles that\nmust respond before accepting a result. The publisher is ultimately responsible\nfor building a data feed and making the necessary trade-offs as it\u2019s a careful\nbalance between cost and update interval. The publisher is usually the on-chain\nconsumer of the data and will have the most familiarity with how the data may be\nused to make these considerations."))}p.isMDXComponent=!0},61297:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2021-10-12-Switchboard-V2-Architecture-and-Data-Flows_FeedComposition-7e5049ec91c3b3eca31427777fe32560.jpg"}}]);