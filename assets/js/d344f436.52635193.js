"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3573],{54852:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var a=r(49231);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(r),p=n,m=u["".concat(l,".").concat(p)]||u[p]||g[p]||i;return r?a.createElement(m,o(o({ref:t},d),{},{components:r})):a.createElement(m,o({ref:t},d))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},17700:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=r(95634),n=(r(49231),r(54852));const i={title:"SwitchboardStd",slug:"/sui/move/",hide_title:!0,sidebar_class_name:"sidebar__move",sidebar_position:2},o=void 0,s={unversionedId:"sui/SwitchboardStd",id:"sui/SwitchboardStd",title:"SwitchboardStd",description:"Switchboard Logo",source:"@site/docs/sui/SwitchboardStd.mdx",sourceDirName:"sui",slug:"/sui/move/",permalink:"/sui/move/",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"SwitchboardStd",slug:"/sui/move/",hide_title:!0,sidebar_class_name:"sidebar__move",sidebar_position:2},sidebar:"gettingStartedSidebar",previous:{title:"@switchboard-xyz/sui.js",permalink:"/sui/javascript"},next:{title:"SwitchboardStd (testnet)",permalink:"/sui/move/testnet"}},l={},c=[{value:"Build",id:"build",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Reading Feeds",id:"reading-feeds",level:3}],d={toc:c},u="wrapper";function g(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("div",{align:"center"},(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://github.com/switchboard-xyz/core-sdk/raw/main/website/static/img/icons/switchboard/avatar.png",alt:"Switchboard Logo"})),(0,n.kt)("h1",{id:"switchboard-move"},"switchboard-move"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"A Move module to interact with Switchboard V2 on Sui Mainnet."))),(0,n.kt)("h2",{id:"build"},"Build"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"sui move compile\n")),(0,n.kt)("h2",{id:"install"},"Install"),(0,n.kt)("p",null,"Add the following to your ",(0,n.kt)("inlineCode",{parentName:"p"},"Move.toml"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "Package"\nversion = "0.0.1"\n\n[dependencies]\nSui = { git = "https://github.com/MystenLabs/sui.git", subdir = "crates/sui-framework/packages/sui-framework", rev = "mainnet" }\nMoveStdlib = { git = "https://github.com/MystenLabs/sui.git", subdir = "crates/sui-framework/packages/move-stdlib", rev = "mainnet" }\nSwitchboardStdLib = { git = "https://github.com/switchboard-xyz/sui-sdk.git", subdir = "move/mainnet/switchboard_std/", rev = "main"  }\n\n\n[addresses]\npackage = "0x0"\nstd = "0x1"\nsui =  "0x2"\nswitchboard =  "0x08d79f4d920b03d88faca1e421af023a87fbb1e4a6fd200248e6e9998d09e470"\n')),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Directory")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#reading-feeds"},"Reading Feeds"))),(0,n.kt)("h3",{id:"reading-feeds"},"Reading Feeds"),(0,n.kt)("p",null,"Read an aggregator result on-chain"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-move"},"use switchboard::aggregator;\nuse switchboard::math;\n\n// store latest value\nstruct AggregatorInfo has store, key {\n  id: UID,\n  aggregator_addr: address,\n  latest_result: u128,\n  latest_result_scaling_factor: u8,\n  latest_timestamp: u64,\n}\n\n// get latest value\npublic entry fun save_aggregator_info(\n  feed: &Aggregator,\n  ctx: &mut TxContext\n) {\n  let (latest_result, latest_timestamp) = aggregator::latest_value(feed);\n\n  // get latest value\n  let (value, scaling_factor, _neg) = math::unpack(latest_result);\n  transfer::transfer(\n      AggregatorInfo {\n          id: object::new(ctx),\n          latest_result: value,\n          latest_result_scaling_factor: scaling_factor,\n          aggregator_addr: aggregator::aggregator_address(feed),\n          latest_timestamp,\n      },\n      tx_context::sender(ctx)\n  );\n}\n")))}g.isMDXComponent=!0}}]);