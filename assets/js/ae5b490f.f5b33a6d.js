"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[831],{85162:(e,a,n)=>{n.d(a,{Z:()=>o});var t=n(67294),r=n(86010);const l="tabItem_Ymn6";function o(e){let{children:a,hidden:n,className:o}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},a)}},65488:(e,a,n)=>{n.d(a,{Z:()=>p});var t=n(83117),r=n(67294),l=n(86010),o=n(72389),s=n(67392),c=n(7094),i=n(12466);const d="tabList__CuJ",u="tabItem_LNqP";function m(e){var a,n;const{lazy:o,block:m,defaultValue:p,values:f,groupId:v,className:h}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=f?f:b.map((e=>{let{props:{value:a,label:n,attributes:t}}=e;return{value:a,label:n,attributes:t}})),_=(0,s.l)(g,((e,a)=>e.value===a.value));if(_.length>0)throw new Error('Docusaurus error: Duplicate values "'+_.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===p?p:null!=(a=null!=p?p:null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)?a:b[0].props.value;if(null!==k&&!g.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:R}=(0,c.U)(),[A,C]=(0,r.useState)(k),x=[],{blockElementScrollPositionUntilNextRender:T}=(0,i.o5)();if(null!=v){const e=w[v];null!=e&&e!==A&&g.some((a=>a.value===e))&&C(e)}const y=e=>{const a=e.currentTarget,n=x.indexOf(a),t=g[n].value;t!==A&&(T(a),C(t),null!=v&&R(v,String(t)))},E=e=>{var a;let n=null;switch(e.key){case"ArrowRight":{var t;const a=x.indexOf(e.currentTarget)+1;n=null!=(t=x[a])?t:x[0];break}case"ArrowLeft":{var r;const a=x.indexOf(e.currentTarget)-1;n=null!=(r=x[a])?r:x[x.length-1];break}}null==(a=n)||a.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},h)},g.map((e=>{let{value:a,label:n,attributes:o}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:A===a?0:-1,"aria-selected":A===a,key:a,ref:e=>x.push(e),onKeyDown:E,onFocus:y,onClick:y},o,{className:(0,l.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":A===a})}),null!=n?n:a)}))),o?(0,r.cloneElement)(b.filter((e=>e.props.value===A))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==A})))))}function p(e){const a=(0,o.Z)();return r.createElement(m,(0,t.Z)({key:String(a)},e))}},57918:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>i,default:()=>f,frontMatter:()=>c,metadata:()=>d,toc:()=>m});var t=n(83117),r=(n(67294),n(3905)),l=n(90814);var o=n(65488),s=n(85162);const c={sidebar_position:20},i="Read a Feed",d={unversionedId:"solana/feeds/read",id:"solana/feeds/read",title:"Read a Feed",description:"Switchboard allows you to read a data feed using",source:"@site/docs/solana/feeds/read.mdx",sourceDirName:"solana/feeds",slug:"/solana/feeds/read",permalink:"/solana/feeds/read",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"solana",previous:{title:"Create a Feed",permalink:"/solana/feeds/create"},next:{title:"Update a Feed",permalink:"/solana/feeds/update"}},u={},m=[{value:"Rust",id:"rust",level:2},{value:"Javascript",id:"javascript",level:2},{value:"Command Line",id:"command-line",level:2}],p={toc:m};function f(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"read-a-feed"},"Read a Feed"),(0,r.kt)("p",null,"Switchboard allows you to read a data feed using"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rust"},"Rust")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#javascript"},"Javascript")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#command-line"},"Command Line"))),(0,r.kt)("h2",{id:"rust"},"Rust"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"preview",label:"Preview",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"rust",mdxType:"CodeBlock"},"use anchor_lang::solana_program::clock;\nuse std::convert::TryInto;\nuse switchboard_v2::{AggregatorAccountData, SwitchboardDecimal, SWITCHBOARD_PROGRAM_ID};\n\n// check feed owner\nlet owner = *aggregator.owner;\nif owner != SWITCHBOARD_PROGRAM_ID {\n    return Err(error!(ErrorCode::InvalidSwitchboardAccount));\n}\n\n// deserialize account info\nlet feed = ctx.accounts.aggregator.load()?;\n// OR\nlet feed = AggregatorAccountData::new(feed_account_info)?;\n\n// get result\nlet decimal: f64 = feed.get_result()?.try_into()?;\n\n// check if feed has been updated in the last 5 minutes\nfeed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)?;\n\n// check if feed exceeds a confidence interval of +/i $0.80\nfeed.check_confidence_interval(SwitchboardDecimal::from_f64(0.80))?;")),(0,r.kt)(s.Z,{value:"full",label:"Full",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"rust",mdxType:"CodeBlock"},'use anchor_lang::prelude::*;\nuse anchor_lang::solana_program::clock;\nuse std::convert::TryInto;\npub use switchboard_v2::{AggregatorAccountData, SwitchboardDecimal, SWITCHBOARD_PROGRAM_ID};\n\ndeclare_id!("FnsPs665aBSwJRu2A8wGv6ZT76ipR41kHm4hoA3B1QGh");\n\n#[derive(Accounts)]\n#[instruction(params: ReadResultParams)]\npub struct ReadResult<\'info> {\n    #[account(\n        constraint = \n            *aggregator.to_account_info().owner == SWITCHBOARD_PROGRAM_ID @ FeedErrorCode::InvalidSwitchboardAccount\n    )]\n    pub aggregator: AccountLoader<\'info, AggregatorAccountData>,\n}\n\n#[derive(Clone, AnchorSerialize, AnchorDeserialize)]\npub struct ReadResultParams {\n    pub max_confidence_interval: Option<f64>,\n}\n\n#[program]\npub mod anchor_feed_parser {\n    use super::*;\n\n    pub fn read_result(\n        ctx: Context<ReadResult>,\n        params: ReadResultParams,\n    ) -> anchor_lang::Result<()> {\n        let feed = &ctx.accounts.aggregator.load()?;\n\n        // get result\n        let val: f64 = feed.get_result()?.try_into()?;\n\n        // check whether the feed has been updated in the last 300 seconds\n        feed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)\n            .map_err(|_| error!(FeedErrorCode::StaleFeed))?;\n\n        // check feed does not exceed max_confidence_interval\n        if let Some(max_confidence_interval) = params.max_confidence_interval {\n            feed.check_confidence_interval(SwitchboardDecimal::from_f64(max_confidence_interval))\n                .map_err(|_| error!(FeedErrorCode::ConfidenceIntervalExceeded))?;\n        }\n\n        msg!("Current feed result is {}!", val);\n\n        Ok(())\n    }\n}\n\n#[error_code]\n#[derive(Eq, PartialEq)]\npub enum FeedErrorCode {\n    #[msg("Not a valid Switchboard account")]\n    InvalidSwitchboardAccount,\n    #[msg("Switchboard feed has not been updated in 5 minutes")]\n    StaleFeed,\n    #[msg("Switchboard feed exceeded provided confidence interval")]\n    ConfidenceIntervalExceeded,\n}'))),(0,r.kt)("h2",{id:"javascript"},"Javascript"),(0,r.kt)("h2",{id:"command-line"},"Command Line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sbv2 solana print aggregator [AGGREGATOR_KEY]\n")))}f.isMDXComponent=!0}}]);