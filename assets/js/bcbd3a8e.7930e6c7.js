"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[70872],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(a),c=r,g=m["".concat(s,".").concat(c)]||m[c]||u[c]||l;return a?n.createElement(g,o(o({ref:t},p),{},{components:a})):n.createElement(g,o({ref:t},p))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},46550:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=a(83117),r=(a(67294),a(3905));const l={},o=void 0,i={unversionedId:"solana/idl/types/AggregatorRound",id:"solana/idl/types/AggregatorRound",title:"AggregatorRound",description:"| Field              | Type                                                           | Description                                                                                                                                           |",source:"@site/docs/solana/idl/types/AggregatorRound.md",sourceDirName:"solana/idl/types",slug:"/solana/idl/types/AggregatorRound",permalink:"/solana/idl/types/AggregatorRound",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"solana",previous:{title:"AggregatorResolutionMode",permalink:"/solana/idl/types/AggregatorResolutionMode"},next:{title:"AggregatorSaveResultParams",permalink:"/solana/idl/types/AggregatorSaveResultParams"}},s={},d=[],p={toc:d};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"numSuccess"),(0,r.kt)("td",{parentName:"tr",align:null},"u32"),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the number of successful responses received from nodes. Nodes can submit one successful response per round. Number of successful responses.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"numError"),(0,r.kt)("td",{parentName:"tr",align:null},"u32"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of error responses.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isClosed"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether an update request round has ended.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"roundOpenSlot"),(0,r.kt)("td",{parentName:"tr",align:null},"u64"),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the ",(0,r.kt)("inlineCode",{parentName:"td"},"solana_program::clock::Slot")," that the round was opened at. Solana slot when the update request round was open.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"roundOpenTimestamp"),(0,r.kt)("td",{parentName:"tr",align:null},"i64"),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the ",(0,r.kt)("inlineCode",{parentName:"td"},"solana_program::clock::UnixTimestamp;")," the round was opened at. Timestamp when the update request round was open.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"result"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/solana/idl/types/switchboarddecimal"},"SwitchboardDecimal")),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the current median of all successful round responses.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stdDeviation"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/solana/idl/types/switchboarddecimal"},"SwitchboardDecimal")),(0,r.kt)("td",{parentName:"tr",align:null},"Standard deviation of the accepted results in the round.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minResponse"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/solana/idl/types/switchboarddecimal"},"SwitchboardDecimal")),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the minimum node response this round. Maintains the minimum oracle response this round.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxResponse"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/solana/idl/types/switchboarddecimal"},"SwitchboardDecimal")),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the maximum node response this round. Maintains the maximum oracle response this round.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"oraclePubkeysData"),(0,r.kt)("td",{parentName:"tr",align:null},"publicKey","[16]"),(0,r.kt)("td",{parentName:"tr",align:null},"Pubkeys of the oracles fulfilling this round. Public keys of the oracles fulfilling this round.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mediansData"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/solana/idl/types/switchboarddecimal"},"SwitchboardDecimal"),"[16]"),(0,r.kt)("td",{parentName:"tr",align:null},"Represents all successful node responses this round. ",(0,r.kt)("inlineCode",{parentName:"td"},"NaN")," if empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"currentPayout"),(0,r.kt)("td",{parentName:"tr",align:null},"i64","[16]"),(0,r.kt)("td",{parentName:"tr",align:null},"Current rewards/slashes oracles have received this round. Rewards to provide oracles and round openers on this queue.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mediansFulfilled"),(0,r.kt)("td",{parentName:"tr",align:null},"bool","[16]"),(0,r.kt)("td",{parentName:"tr",align:null},"Keep track of which responses are fulfilled here. Keeps track of which responses are fulfilled here.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"errorsFulfilled"),(0,r.kt)("td",{parentName:"tr",align:null},"bool","[16]"),(0,r.kt)("td",{parentName:"tr",align:null},"Keeps track of which errors are fulfilled here.")))))}u.isMDXComponent=!0}}]);