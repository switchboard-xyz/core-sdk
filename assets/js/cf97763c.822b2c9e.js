"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3780,8664,6773,1368,5211,6978,8077,701],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>p});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),c=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},u=function(e){var a=c(e.components);return n.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},v=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),v=c(t),p=r,m=v["".concat(s,".").concat(p)]||v[p]||d[p]||o;return t?n.createElement(m,l(l({ref:a},u),{},{components:t})):n.createElement(m,l({ref:a},u))}));function p(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=v;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}v.displayName="MDXCreateElement"},85162:(e,a,t)=>{t.d(a,{Z:()=>l});var n=t(67294),r=t(86010);const o="tabItem_Ymn6";function l(e){let{children:a,hidden:t,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:t},a)}},65488:(e,a,t)=>{t.d(a,{Z:()=>p});var n=t(83117),r=t(67294),o=t(86010),l=t(72389),i=t(67392),s=t(7094),c=t(12466);const u="tabList__CuJ",d="tabItem_LNqP";function v(e){var a,t;const{lazy:l,block:v,defaultValue:p,values:m,groupId:g,className:b}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=m?m:f.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),y=(0,i.l)(h,((e,a)=>e.value===a.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===p?p:null!=(a=null!=p?p:null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)?a:f[0].props.value;if(null!==k&&!h.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:j,setTabGroupChoices:w}=(0,s.U)(),[I,C]=(0,r.useState)(k),E=[],{blockElementScrollPositionUntilNextRender:N}=(0,c.o5)();if(null!=g){const e=j[g];null!=e&&e!==I&&h.some((a=>a.value===e))&&C(e)}const T=e=>{const a=e.currentTarget,t=E.indexOf(a),n=h[t].value;n!==I&&(N(a),C(n),null!=g&&w(g,String(n)))},S=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{var n;const a=E.indexOf(e.currentTarget)+1;t=null!=(n=E[a])?n:E[0];break}case"ArrowLeft":{var r;const a=E.indexOf(e.currentTarget)-1;t=null!=(r=E[a])?r:E[E.length-1];break}}null==(a=t)||a.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":v},b)},h.map((e=>{let{value:a,label:t,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:I===a?0:-1,"aria-selected":I===a,key:a,ref:e=>E.push(e),onKeyDown:S,onFocus:T,onClick:T},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":I===a})}),null!=t?t:a)}))),l?(0,r.cloneElement)(f.filter((e=>e.props.value===I))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==I})))))}function p(e){const a=(0,l.Z)();return r.createElement(v,(0,n.Z)({key:String(a)},e))}},8735:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(83117),r=(t(67294),t(3905));const o={title:"Add Job"},l=void 0,i={unversionedId:"dev/cli/solana/aggregator/add_job",id:"dev/cli/solana/aggregator/add_job",title:"Add Job",description:"add a job to an aggregator",source:"@site/docs/dev/cli/solana/aggregator/add_job.md",sourceDirName:"dev/cli/solana/aggregator",slug:"/dev/cli/solana/aggregator/add_job",permalink:"/dev/cli/solana/aggregator/add_job",draft:!1,tags:[],version:"current",frontMatter:{title:"Add Job"},sidebar:"dev",previous:{title:"Add Crank",permalink:"/dev/cli/solana/aggregator/add_crank"},next:{title:"Create",permalink:"/dev/cli/solana/aggregator/create"}},s={},c=[],u={toc:c};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"add a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana aggregator add job [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--jobDefinition <value> | --jobKey <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --jobDefinition=<value>  filesystem path of job json definition file\n  --jobKey=<value>         public key of an existing job account to add to an aggregator\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  add a job to an aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:add:job\n")))}d.isMDXComponent=!0},30413:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(83117),r=(t(67294),t(3905));const o={title:"Create"},l=void 0,i={unversionedId:"dev/cli/solana/aggregator/create",id:"dev/cli/solana/aggregator/create",title:"Create",description:"create an aggregator account",source:"@site/docs/dev/cli/solana/aggregator/create.md",sourceDirName:"dev/cli/solana/aggregator",slug:"/dev/cli/solana/aggregator/create",permalink:"/dev/cli/solana/aggregator/create",draft:!1,tags:[],version:"current",frontMatter:{title:"Create"},sidebar:"dev",previous:{title:"Add Job",permalink:"/dev/cli/solana/aggregator/add_job"},next:{title:"Create Copy",permalink:"/dev/cli/solana/aggregator/create_copy"}},s={},c=[],u={toc:c};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"create an aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana aggregator create [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [-a <value>] [--crankKey <value>] [--enable] [--queueAuthority <value>]\n    [-n <value>] [--forceReportPeriod <value>] [--batchSize <value>] [--minJobs <value>] [--minOracles <value>]\n    [--updateInterval <value>] [--varianceThreshold <value>] [-j <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account to create aggregator for\n\nFLAGS\n  -a, --authority=<value>      alternate keypair that is the authority for the aggregator\n  -h, --help                   Show CLI help.\n  -j, --job=<value>...         filesystem path to job definition file\n  -k, --keypair=<value>        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n  -n, --name=<value>           name of the aggregator\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          number of oracles requested for each open round call\n  --commitment=<option>        [default: confirmed] transaction commitment level to use\n                               <options: confirmed|finalized|processed>\n  --crankKey=<value>           public key of the crank to join\n  --enable                     set permissions to PERMIT_ORACLE_QUEUE_USAGE\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --programId=<value>          alternative Switchboard program ID to interact with\n  --queueAuthority=<value>     alternative keypair to use for queue authority\n  --updateInterval=<value>     set an aggregator's minimum update delay\n  --varianceThreshold=<value>  percentage change between a previous accepted result and the next round before an oracle\n                               reports a value on-chain. Used to conserve lease cost during low volatility\n\nDESCRIPTION\n  create an aggregator account\n")))}d.isMDXComponent=!0},11309:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(83117),r=(t(67294),t(3905));const o={title:"Remove Job"},l=void 0,i={unversionedId:"dev/cli/solana/aggregator/remove_job",id:"dev/cli/solana/aggregator/remove_job",title:"Remove Job",description:"remove a switchboard job account from an aggregator",source:"@site/docs/dev/cli/solana/aggregator/remove_job.md",sourceDirName:"dev/cli/solana/aggregator",slug:"/dev/cli/solana/aggregator/remove_job",permalink:"/dev/cli/solana/aggregator/remove_job",draft:!1,tags:[],version:"current",frontMatter:{title:"Remove Job"},sidebar:"dev",previous:{title:"Print Permission",permalink:"/dev/cli/solana/aggregator/print_permission"},next:{title:"Save History",permalink:"/dev/cli/solana/aggregator/save_history"}},s={},c=[],u={toc:c};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"remove a switchboard job account from an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana aggregator remove job [AGGREGATORKEY] [JOBKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  JOBKEY         public key of an existing job account to remove from an aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  remove a switchboard job account from an aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:remove:job\n")))}d.isMDXComponent=!0},75669:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(83117),r=(t(67294),t(3905));const o={title:"Create"},l=void 0,i={unversionedId:"dev/cli/solana/job/create",id:"dev/cli/solana/job/create",title:"Create",description:"create a job account",source:"@site/docs/dev/cli/solana/job/create.md",sourceDirName:"dev/cli/solana/job",slug:"/dev/cli/solana/job/create",permalink:"/dev/cli/solana/job/create",draft:!1,tags:[],version:"current",frontMatter:{title:"Create"},sidebar:"dev",previous:{title:"Turn",permalink:"/dev/cli/solana/crank/turn"},next:{title:"Print",permalink:"/dev/cli/solana/job/print"}},s={},c=[],u={toc:c};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"create a job account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana job create [JOBDEFINITION] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>] [-n <value>]\n\nARGUMENTS\n  JOBDEFINITION  filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the account authority\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -n, --name=<value>       name of the buffer account\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a job account\n")))}d.isMDXComponent=!0},17228:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(83117),r=(t(67294),t(3905));const o={title:"Create"},l=void 0,i={unversionedId:"dev/cli/solana/oracle/create",id:"dev/cli/solana/oracle/create",title:"Create",description:"create a new oracle account for a given queue",source:"@site/docs/dev/cli/solana/oracle/create.md",sourceDirName:"dev/cli/solana/oracle",slug:"/dev/cli/solana/oracle/create",permalink:"/dev/cli/solana/oracle/create",draft:!1,tags:[],version:"current",frontMatter:{title:"Create"},sidebar:"dev",previous:{title:"Balance",permalink:"/dev/cli/solana/oracle/balance"},next:{title:"Nonce",permalink:"/dev/cli/solana/oracle/nonce"}},s={},c=[],u={toc:c};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"create a new oracle account for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana oracle create [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [-n <value>] [-a <value>] [--enable] [--queueAuthority <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to join\n\nFLAGS\n  -a, --authority=<value>   keypair to delegate authority to for managing the oracle account\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -n, --name=<value>        name of the oracle for easier identification\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enable                  enable oracle heartbeat permissions\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n\nDESCRIPTION\n  create a new oracle account for a given queue\n\nEXAMPLES\n  $ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --keypair ../payer-and-authority-keypair.json\n\n  $ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --name=oracle-1  --keypair ../payer-and-authority-keypair.json\n\n  $ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --keypair ../payer-keypair.json --authority ../oracle-keypair.json\n")))}d.isMDXComponent=!0},20921:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(83117),r=(t(67294),t(3905));const o={title:"Index"},l=void 0,i={unversionedId:"dev/cli/solana/print/index",id:"dev/cli/solana/print/index",title:"Index",description:"find a switchboard account by public key for a given cluster",source:"@site/docs/dev/cli/solana/print/index.md",sourceDirName:"dev/cli/solana/print",slug:"/dev/cli/solana/print/",permalink:"/dev/cli/solana/print/",draft:!1,tags:[],version:"current",frontMatter:{title:"Index"},sidebar:"dev",previous:{title:"Set",permalink:"/dev/cli/solana/permission/set"},next:{title:"Aggregator",permalink:"/dev/cli/solana/print/aggregator"}},s={},c=[],u={toc:c};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"find a switchboard account by public key for a given cluster"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana print [PUBLICKEY] [-h] [-v]\n\nARGUMENTS\n  PUBLICKEY  public key of a switchboard account to lookup\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose  log everything\n\nDESCRIPTION\n  find a switchboard account by public key for a given cluster\n\nEXAMPLES\n  $ sbv2 print GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U\n")))}d.isMDXComponent=!0},55180:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(83117),r=(t(67294),t(3905));const o={title:"Create"},l=void 0,i={unversionedId:"dev/cli/solana/queue/create",id:"dev/cli/solana/queue/create",title:"Create",description:"create a personal oracle queue",source:"@site/docs/dev/cli/solana/queue/create.md",sourceDirName:"dev/cli/solana/queue",slug:"/dev/cli/solana/queue/create",permalink:"/dev/cli/solana/queue/create",draft:!1,tags:[],version:"current",frontMatter:{title:"Create"},sidebar:"dev",previous:{title:"Print",permalink:"/dev/cli/solana/program/print"},next:{title:"Print",permalink:"/dev/cli/solana/queue/print"}},s={},c=[],u={toc:c};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"create a personal oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana queue create [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--force] [-a <value>] [-n <value>] [--minStake <value>] [-r <value>]\n    [-c <value>] [--oracleTimeout <value>] [-o <value>] [--queueSize <value>] [--unpermissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers] [-f <value>]\n\nFLAGS\n  -a, --authority=<value>   keypair to delegate authority to for creating permissions targeted at the queue\n  -c, --crankSize=<value>   [default: 100] size of the crank\n  -f, --outputFile=<value>  output queue schema to a json file\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -n, --name=<value>        [default: Custom Queue] name of the queue for easier identification\n  -o, --numOracles=<value>  number of oracles to add to the queue\n  -r, --reward=<value>      [default: 0] oracle rewards for successfully responding to an update request\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enableBufferRelayers    enable oracles to fulfill buffer relayer requests\n  --force                   overwrite output file if existing\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --minStake=<value>        [default: 0] minimum stake required by an oracle to join the queue\n  --oracleTimeout=<value>   [default: 180] number of oracles to add to the queue\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueSize=<value>       [default: 100] maximum number of oracles the queue can support\n  --unpermissionedFeeds     permit unpermissioned feeds\n  --unpermissionedVrf       permit unpermissioned VRF accounts\n\nDESCRIPTION\n  create a personal oracle queue\n")))}d.isMDXComponent=!0},42649:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>f,contentTitle:()=>g,default:()=>k,frontMatter:()=>m,metadata:()=>b,toc:()=>h});var n=t(83117),r=(t(67294),t(3905)),o=t(65488),l=t(85162),i=t(20921),s=t(55180),c=t(17228),u=t(75669),d=t(30413),v=t(8735),p=t(11309);const m={sidebar_position:8,title:"Sbv2 CLI"},g=void 0,b={unversionedId:"solana/dev/cli",id:"solana/dev/cli",title:"Sbv2 CLI",description:"Install",source:"@site/docs/solana/dev/cli.mdx",sourceDirName:"solana/dev",slug:"/solana/dev/cli",permalink:"/solana/dev/cli",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Sbv2 CLI"},sidebar:"solana",previous:{title:"Localnet Integration",permalink:"/solana/dev/localnet"},next:{title:"@switchboard-xyz/solana.js",permalink:"/solana/dev/javascript/"}},f={},h=[{value:"Install",id:"install",level:2},{value:"Config",id:"config",level:2},{value:"Print an Account",id:"print-an-account",level:2},{value:"sbv2 solana print",id:"sbv2-solana-print",level:3},{value:"Create a Queue",id:"create-a-queue",level:2},{value:"sbv2 solana queue create",id:"sbv2-solana-queue-create",level:3},{value:"Create an Oracle",id:"create-an-oracle",level:2},{value:"sbv2 solana oracle create",id:"sbv2-solana-oracle-create",level:3},{value:"Create a Data Feed",id:"create-a-data-feed",level:2},{value:"sbv2 solana aggregator create",id:"sbv2-solana-aggregator-create",level:3},{value:"Create a Job",id:"create-a-job",level:2},{value:"sbv2 solana job create",id:"sbv2-solana-job-create",level:3},{value:"Add Job to Feed",id:"add-job-to-feed",level:2},{value:"sbv2 solana aggregator job add",id:"sbv2-solana-aggregator-job-add",level:3},{value:"Remove Job to Feed",id:"remove-job-to-feed",level:2},{value:"sbv2 near aggregator job remove",id:"sbv2-near-aggregator-job-remove",level:3}],y={toc:h};function k(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},y,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g @switchboard-xyz/cli^2\n"))),(0,r.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -g @switchboard-xyz/cli^2\n")))),(0,r.kt)("h2",{id:"config"},"Config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Testnet\nsbv2 config set solana devnet rpc https://devnet.genesysgo.net\nsbv2 config set solana devnet default-account "~/.config/solana/id.json"\n\n# Mainnet\nsbv2 config set solana mainnet-beta rpc https://ssc-dao.genesysgo.net/\nsbv2 config set solana mainnet-beta default-account "~/.config/solana/id.json"\n')),(0,r.kt)("h2",{id:"print-an-account"},"Print an Account"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",{id:"sbv2-solana-print"},"sbv2 solana print")),(0,r.kt)(i.default,{mdxType:"Print"})),(0,r.kt)("h2",{id:"create-a-queue"},"Create a Queue"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",{id:"sbv2-solana-queue-create"},"sbv2 solana queue create")),(0,r.kt)(s.default,{mdxType:"QueueCreate"})),(0,r.kt)("h2",{id:"create-an-oracle"},"Create an Oracle"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",{id:"sbv2-solana-oracle-create"},"sbv2 solana oracle create")),(0,r.kt)(c.default,{mdxType:"OracleCreate"})),(0,r.kt)("h2",{id:"create-a-data-feed"},"Create a Data Feed"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",{id:"sbv2-solana-aggregator-create"},"sbv2 solana aggregator create")),(0,r.kt)(d.default,{mdxType:"AggregatorCreate"})),(0,r.kt)("h2",{id:"create-a-job"},"Create a Job"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",{id:"sbv2-solana-job-create"},"sbv2 solana job create")),(0,r.kt)(u.default,{mdxType:"JobCreate"})),(0,r.kt)("h2",{id:"add-job-to-feed"},"Add Job to Feed"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",{id:"sbv2-solana-aggregator-job-add"},"sbv2 solana aggregator job add")),(0,r.kt)(v.default,{mdxType:"AggregatorAddJob"})),(0,r.kt)("h2",{id:"remove-job-to-feed"},"Remove Job to Feed"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",{id:"sbv2-near-aggregator-job-remove"},"sbv2 near aggregator job remove")),(0,r.kt)(p.default,{mdxType:"AggregatorRemoveJob"})),"```")}k.isMDXComponent=!0}}]);