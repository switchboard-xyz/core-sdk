"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4971],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>v});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),u=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=u(e.components);return t.createElement(i.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),v=r,g=p["".concat(i,".").concat(v)]||p[v]||d[v]||o;return n?t.createElement(g,l(l({ref:a},c),{},{components:n})):t.createElement(g,l({ref:a},c))}));function v(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=p;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},85162:(e,a,n)=>{n.d(a,{Z:()=>l});var t=n(67294),r=n(86010);const o="tabItem_Ymn6";function l(e){let{children:a,hidden:n,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},a)}},65488:(e,a,n)=>{n.d(a,{Z:()=>v});var t=n(83117),r=n(67294),o=n(86010),l=n(72389),s=n(67392),i=n(7094),u=n(12466);const c="tabList__CuJ",d="tabItem_LNqP";function p(e){var a,n;const{lazy:l,block:p,defaultValue:v,values:g,groupId:m,className:h}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=g?g:b.map((e=>{let{props:{value:a,label:n,attributes:t}}=e;return{value:a,label:n,attributes:t}})),k=(0,s.l)(f,((e,a)=>e.value===a.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const E=null===v?v:null!=(a=null!=v?v:null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)?a:b[0].props.value;if(null!==E&&!f.some((e=>e.value===E)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+E+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:A,setTabGroupChoices:S}=(0,i.U)(),[N,R]=(0,r.useState)(E),I=[],{blockElementScrollPositionUntilNextRender:G}=(0,u.o5)();if(null!=m){const e=A[m];null!=e&&e!==N&&f.some((a=>a.value===e))&&R(e)}const y=e=>{const a=e.currentTarget,n=I.indexOf(a),t=f[n].value;t!==N&&(G(a),R(t),null!=m&&S(m,String(t)))},w=e=>{var a;let n=null;switch(e.key){case"ArrowRight":{var t;const a=I.indexOf(e.currentTarget)+1;n=null!=(t=I[a])?t:I[0];break}case"ArrowLeft":{var r;const a=I.indexOf(e.currentTarget)-1;n=null!=(r=I[a])?r:I[I.length-1];break}}null==(a=n)||a.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},h)},f.map((e=>{let{value:a,label:n,attributes:l}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:N===a?0:-1,"aria-selected":N===a,key:a,ref:e=>I.push(e),onKeyDown:w,onFocus:y,onClick:y},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":N===a})}),null!=n?n:a)}))),l?(0,r.cloneElement)(b.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==N})))))}function v(e){const a=(0,l.Z)();return r.createElement(p,(0,t.Z)({key:String(a)},e))}},66153:(e,a,n)=>{n.d(a,{ZP:()=>l});var t=n(83117),r=(n(67294),n(3905));const o={toc:[{value:"<code>sbv2 aptos account airdrop</code>",id:"sbv2-aptos-account-airdrop",level:2},{value:"<code>sbv2 aptos aggregator add job [AGGREGATORHEXSTRING]</code>",id:"sbv2-aptos-aggregator-add-job-aggregatorhexstring",level:2},{value:"<code>sbv2 aptos aggregator create [QUEUEHEXSTRING]</code>",id:"sbv2-aptos-aggregator-create-queuehexstring",level:2},{value:"<code>sbv2 aptos aggregator job add [AGGREGATORHEXSTRING]</code>",id:"sbv2-aptos-aggregator-job-add-aggregatorhexstring",level:2},{value:"<code>sbv2 aptos aggregator update [AGGREGATORHEXSTRING]</code>",id:"sbv2-aptos-aggregator-update-aggregatorhexstring",level:2},{value:"<code>sbv2 aptos crank create [QUEUEHEXSTRING]</code>",id:"sbv2-aptos-crank-create-queuehexstring",level:2},{value:"<code>sbv2 aptos crank list [CRANKHEXSTRING]</code>",id:"sbv2-aptos-crank-list-crankhexstring",level:2},{value:"<code>sbv2 aptos crank pop [CRANKHEXSTRING]</code>",id:"sbv2-aptos-crank-pop-crankhexstring",level:2},{value:"<code>sbv2 aptos crank push [CRANKHEXSTRING]</code>",id:"sbv2-aptos-crank-push-crankhexstring",level:2},{value:"<code>sbv2 aptos create aggregator [QUEUEHEXSTRING]</code>",id:"sbv2-aptos-create-aggregator-queuehexstring",level:2},{value:"<code>sbv2 aptos create crank [QUEUEHEXSTRING]</code>",id:"sbv2-aptos-create-crank-queuehexstring",level:2},{value:"<code>sbv2 aptos create job QUEUEHEXSTRING JOBDEFINITION</code>",id:"sbv2-aptos-create-job-queuehexstring-jobdefinition",level:2},{value:"<code>sbv2 aptos create oracle [QUEUEHEXSTRING]</code>",id:"sbv2-aptos-create-oracle-queuehexstring",level:2},{value:"<code>sbv2 aptos create queue</code>",id:"sbv2-aptos-create-queue",level:2},{value:"<code>sbv2 aptos job create QUEUEHEXSTRING JOBDEFINITION</code>",id:"sbv2-aptos-job-create-queuehexstring-jobdefinition",level:2},{value:"<code>sbv2 aptos list crank [CRANKHEXSTRING]</code>",id:"sbv2-aptos-list-crank-crankhexstring",level:2},{value:"<code>sbv2 aptos oracle create [QUEUEHEXSTRING]</code>",id:"sbv2-aptos-oracle-create-queuehexstring",level:2},{value:"<code>sbv2 aptos oracle metrics [ORACLEHEXSTRING]</code>",id:"sbv2-aptos-oracle-metrics-oraclehexstring",level:2},{value:"<code>sbv2 aptos oracle up [ORACLEHEXSTRING]</code>",id:"sbv2-aptos-oracle-up-oraclehexstring",level:2},{value:"<code>sbv2 aptos pop crank [CRANKHEXSTRING]</code>",id:"sbv2-aptos-pop-crank-crankhexstring",level:2},{value:"<code>sbv2 aptos print ACCOUNTTYPE ADDRESS</code>",id:"sbv2-aptos-print-accounttype-address",level:2},{value:"<code>sbv2 aptos push crank [CRANKHEXSTRING]</code>",id:"sbv2-aptos-push-crank-crankhexstring",level:2},{value:"<code>sbv2 aptos queue create</code>",id:"sbv2-aptos-queue-create",level:2},{value:"<code>sbv2 aptos update aggregator [AGGREGATORHEXSTRING]</code>",id:"sbv2-aptos-update-aggregator-aggregatorhexstring",level:2}]};function l(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"interact with switchboard on Aptos"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-account-airdrop"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos account airdrop"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-aggregator-add-job-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos aggregator add job [AGGREGATORHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-aggregator-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos aggregator create [QUEUEHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-aggregator-job-add-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos aggregator job add [AGGREGATORHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-aggregator-update-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos aggregator update [AGGREGATORHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-crank-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos crank create [QUEUEHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-crank-list-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos crank list [CRANKHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-crank-pop-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos crank pop [CRANKHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-crank-push-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos crank push [CRANKHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-create-aggregator-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos create aggregator [QUEUEHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-create-crank-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos create crank [QUEUEHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-create-job-queuehexstring-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos create job QUEUEHEXSTRING JOBDEFINITION"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-create-oracle-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos create oracle [QUEUEHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-create-queue"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos create queue"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-job-create-queuehexstring-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos job create QUEUEHEXSTRING JOBDEFINITION"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-list-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos list crank [CRANKHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-oracle-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos oracle create [QUEUEHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-oracle-metrics-oraclehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos oracle metrics [ORACLEHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-oracle-up-oraclehexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos oracle up [ORACLEHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-pop-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos pop crank [CRANKHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-print-accounttype-address"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos print ACCOUNTTYPE ADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-push-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos push crank [CRANKHEXSTRING]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-queue-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos queue create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-aptos-update-aggregator-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 aptos update aggregator [AGGREGATORHEXSTRING]")))),(0,r.kt)("h2",{id:"sbv2-aptos-account-airdrop"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos account airdrop")),(0,r.kt)("p",null,"request an airdrop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos account airdrop --address <value> [-h] [-v] [-s] [--networkId devnet|testnet] [--programId <value>]\n    [--stateAddress <value>] [-u <value>] [--json] [-n <value>]\n\nFLAGS\n  -h, --help              Show CLI help.\n  -n, --amount=<value>    [default: 1000000] number of airdrops to request, 10_000 coins each\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --address=<value>       (required) HexString address of account to fund\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  request an airdrop\n")),(0,r.kt)("h2",{id:"sbv2-aptos-aggregator-add-job-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos aggregator add job [AGGREGATORHEXSTRING]")),(0,r.kt)("p",null,"add a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos aggregator add job [AGGREGATORHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet]\n    [--programId <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [-a <value>] [--name <value> |\n    --jobKey <value>] [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --jobDefinition=<value>  filesystem path of job json definition file\n  --jobKey=<value>         public key of an existing job account to add to an aggregator\n  --jobWeight=<value>      [default: 1] job weight\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job account\n  --name=<value>           name of the job account\n  --networkId=<option>     [default: devnet] Aptos network to connect to\n                           <options: devnet|testnet>\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           programId on the selected Aptos network\n  --stateAddress=<value>   [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           state address\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sbv2 aptos aggregator job add\n")),(0,r.kt)("h2",{id:"sbv2-aptos-aggregator-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos aggregator create [QUEUEHEXSTRING]")),(0,r.kt)("p",null,"create an aptos aggregator for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos aggregator create [QUEUEHEXSTRING] --keypair <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet] [--programId <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json] [-a\n    <value>] [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize\n    <value>] [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [-j <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>      alternate named account that will be the authority for the oracle\n  -h, --help                   Show CLI help.\n  -j, --job=<value>...         filesystem path to job definition file\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          number of oracles requested for each open round call\n  --crankAddress=<value>       optional, address of the crank to add the aggregator to\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --keypair=<value>            (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>           metadata of the aggregator for easier identification\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --name=<value>               name of the aggregator for easier identification\n  --networkId=<option>         [default: devnet] Aptos network to connect to\n                               <options: devnet|testnet>\n  --new                        create account at new AptosAccount with authority set to --account\n  --profileName=<value>        [default: default] If --keypair is pointing to a yaml file, provide an optional profile\n                               to load. If none provided, default will be used\n  --programId=<value>          [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                               programId on the selected Aptos network\n  --stateAddress=<value>       [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                               state address\n  --updateInterval=<value>     (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>  [default: 0] percentage change between a previous accepted result and the next round\n                               before an oracle reports a value on-chain. Used to conserve lease cost during low\n                               volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aptos aggregator for a given queue\n\nALIASES\n  $ sbv2 aptos create aggregator\n")),(0,r.kt)("h2",{id:"sbv2-aptos-aggregator-job-add-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos aggregator job add [AGGREGATORHEXSTRING]")),(0,r.kt)("p",null,"add a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos aggregator job add [AGGREGATORHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet]\n    [--programId <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [-a <value>] [--name <value> |\n    --jobKey <value>] [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --jobDefinition=<value>  filesystem path of job json definition file\n  --jobKey=<value>         public key of an existing job account to add to an aggregator\n  --jobWeight=<value>      [default: 1] job weight\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job account\n  --name=<value>           name of the job account\n  --networkId=<option>     [default: devnet] Aptos network to connect to\n                           <options: devnet|testnet>\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           programId on the selected Aptos network\n  --stateAddress=<value>   [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           state address\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sbv2 aptos aggregator job add\n")),(0,r.kt)("h2",{id:"sbv2-aptos-aggregator-update-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos aggregator update [AGGREGATORHEXSTRING]")),(0,r.kt)("p",null,"request a new value on-chain for an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos aggregator update [AGGREGATORHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet]\n    [--programId <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -h, --help              Show CLI help.\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --keypair=<value>       (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --profileName=<value>   [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                          load. If none provided, default will be used\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sbv2 aptos update aggregator\n")),(0,r.kt)("h2",{id:"sbv2-aptos-crank-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos crank create [QUEUEHEXSTRING]")),(0,r.kt)("p",null,"create a new crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos crank create [QUEUEHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet] [--programId\n    <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json] [--name <value>] [--metadata\n    <value>] [--maxRows <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString of the oracle queue to create a crank for\n\nFLAGS\n  -h, --help              Show CLI help.\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --keypair=<value>       (required) Path to AptosAccount keypair or config.yaml file\n  --maxRows=<value>       [default: 100] maximum number of rows on the crank\n  --metadata=<value>      metadata of the queue for easier identification\n  --name=<value>          name of the queue for easier identification\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --new                   create account at new AptosAccount with authority set to --account\n  --profileName=<value>   [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                          load. If none provided, default will be used\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sbv2 aptos create crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-crank-list-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos crank list [CRANKHEXSTRING]")),(0,r.kt)("p",null,"sort the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos crank list [CRANKHEXSTRING] [-h] [-v] [-s] [--networkId devnet|testnet] [--programId <value>]\n    [--stateAddress <value>] [-u <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help              Show CLI help.\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  sort the crank\n\nALIASES\n  $ sbv2 aptos list crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-crank-pop-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos crank pop [CRANKHEXSTRING]")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos crank pop [CRANKHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet] [--programId\n    <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help              Show CLI help.\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --keypair=<value>       (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --profileName=<value>   [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                          load. If none provided, default will be used\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 aptos pop crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-crank-push-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos crank push [CRANKHEXSTRING]")),(0,r.kt)("p",null,"push an aggregator onto the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos crank push [CRANKHEXSTRING] --keypair <value> -a <value> [-h] [-v] [-s] [--networkId devnet|testnet]\n    [--programId <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -a, --aggregatorHexString=<value>  (required) HexString address of the aggregator\n  -h, --help                         Show CLI help.\n  -s, --silent                       suppress cli prompts\n  -u, --rpcUrl=<value>               alternate RPC url\n  -v, --verbose                      log everything\n  --keypair=<value>                  (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>               [default: devnet] Aptos network to connect to\n                                     <options: devnet|testnet>\n  --profileName=<value>              [default: default] If --keypair is pointing to a yaml file, provide an optional\n                                     profile to load. If none provided, default will be used\n  --programId=<value>                [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77]\n                                     Switchboard programId on the selected Aptos network\n  --stateAddress=<value>             [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77]\n                                     Switchboard state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sbv2 aptos push crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-create-aggregator-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos create aggregator [QUEUEHEXSTRING]")),(0,r.kt)("p",null,"create an aptos aggregator for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos create aggregator [QUEUEHEXSTRING] --keypair <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet] [--programId <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json] [-a\n    <value>] [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize\n    <value>] [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [-j <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>      alternate named account that will be the authority for the oracle\n  -h, --help                   Show CLI help.\n  -j, --job=<value>...         filesystem path to job definition file\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          number of oracles requested for each open round call\n  --crankAddress=<value>       optional, address of the crank to add the aggregator to\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --keypair=<value>            (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>           metadata of the aggregator for easier identification\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --name=<value>               name of the aggregator for easier identification\n  --networkId=<option>         [default: devnet] Aptos network to connect to\n                               <options: devnet|testnet>\n  --new                        create account at new AptosAccount with authority set to --account\n  --profileName=<value>        [default: default] If --keypair is pointing to a yaml file, provide an optional profile\n                               to load. If none provided, default will be used\n  --programId=<value>          [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                               programId on the selected Aptos network\n  --stateAddress=<value>       [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                               state address\n  --updateInterval=<value>     (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>  [default: 0] percentage change between a previous accepted result and the next round\n                               before an oracle reports a value on-chain. Used to conserve lease cost during low\n                               volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aptos aggregator for a given queue\n\nALIASES\n  $ sbv2 aptos create aggregator\n")),(0,r.kt)("h2",{id:"sbv2-aptos-create-crank-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos create crank [QUEUEHEXSTRING]")),(0,r.kt)("p",null,"create a new crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos create crank [QUEUEHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet] [--programId\n    <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json] [--name <value>] [--metadata\n    <value>] [--maxRows <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString of the oracle queue to create a crank for\n\nFLAGS\n  -h, --help              Show CLI help.\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --keypair=<value>       (required) Path to AptosAccount keypair or config.yaml file\n  --maxRows=<value>       [default: 100] maximum number of rows on the crank\n  --metadata=<value>      metadata of the queue for easier identification\n  --name=<value>          name of the queue for easier identification\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --new                   create account at new AptosAccount with authority set to --account\n  --profileName=<value>   [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                          load. If none provided, default will be used\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sbv2 aptos create crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-create-job-queuehexstring-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos create job QUEUEHEXSTRING JOBDEFINITION")),(0,r.kt)("p",null,"create a new job"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos create job [QUEUEHEXSTRING] [JOBDEFINITION] --keypair <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet] [--programId <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json] [-a\n    <value>] [--name <value>] [--metadata <value>] [--new] [--weight <value>]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n  JOBDEFINITION   filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the job account\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job for easier identification\n  --name=<value>           name of the job for easier identification\n  --networkId=<option>     [default: devnet] Aptos network to connect to\n                           <options: devnet|testnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           programId on the selected Aptos network\n  --stateAddress=<value>   [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           state address\n  --weight=<value>         [default: 1] job weight to assign\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new job\n\nALIASES\n  $ sbv2 aptos create job\n")),(0,r.kt)("h2",{id:"sbv2-aptos-create-oracle-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos create oracle [QUEUEHEXSTRING]")),(0,r.kt)("p",null,"create a oracle for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos create oracle [QUEUEHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet] [--programId\n    <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>]\n    [--metadata <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the oracle\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the oracle for easier identification\n  --name=<value>           name of the oracle for easier identification\n  --networkId=<option>     [default: devnet] Aptos network to connect to\n                           <options: devnet|testnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           programId on the selected Aptos network\n  --stateAddress=<value>   [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a oracle for a given queue\n\nALIASES\n  $ sbv2 aptos create oracle\n")),(0,r.kt)("h2",{id:"sbv2-aptos-create-queue"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos create queue")),(0,r.kt)("p",null,"create a new oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos create queue --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet] [--programId <value>]\n    [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--minStake <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled]\n    [--unpermissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [--lockLeaseFunding] [--new]\n\nFLAGS\n  -a, --authority=<value>  alternate account HexString that will be the authority for the queue\n  -h, --help               Show CLI help.\n  -r, --reward=<value>     oracle rewards for successfully responding to an update request\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --enableBufferRelayers   enable oracles to fulfill buffer relayer requests\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --lockLeaseFunding       lock lease funding\n  --metadata=<value>       metadata of the queue for easier identification\n  --minStake=<value>       minimum stake required by an oracle to join the queue\n  --name=<value>           name of the queue for easier identification\n  --networkId=<option>     [default: devnet] Aptos network to connect to\n                           <options: devnet|testnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --oracleTimeout=<value>  [default: 180] number of oracles to add to the queue\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           programId on the selected Aptos network\n  --queueSize=<value>      [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled        permit slashing malicous oracles\n  --stateAddress=<value>   [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           state address\n  --unpermissionedFeeds    permit unpermissioned feeds\n  --unpermissionedVrf      permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 aptos create queue\n")),(0,r.kt)("h2",{id:"sbv2-aptos-job-create-queuehexstring-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos job create QUEUEHEXSTRING JOBDEFINITION")),(0,r.kt)("p",null,"create a new job"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos job create [QUEUEHEXSTRING] [JOBDEFINITION] --keypair <value> [-h] [-v] [-s] [--networkId\n    devnet|testnet] [--programId <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json] [-a\n    <value>] [--name <value>] [--metadata <value>] [--new] [--weight <value>]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n  JOBDEFINITION   filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the job account\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the job for easier identification\n  --name=<value>           name of the job for easier identification\n  --networkId=<option>     [default: devnet] Aptos network to connect to\n                           <options: devnet|testnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           programId on the selected Aptos network\n  --stateAddress=<value>   [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           state address\n  --weight=<value>         [default: 1] job weight to assign\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new job\n\nALIASES\n  $ sbv2 aptos create job\n")),(0,r.kt)("h2",{id:"sbv2-aptos-list-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos list crank [CRANKHEXSTRING]")),(0,r.kt)("p",null,"sort the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos list crank [CRANKHEXSTRING] [-h] [-v] [-s] [--networkId devnet|testnet] [--programId <value>]\n    [--stateAddress <value>] [-u <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help              Show CLI help.\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  sort the crank\n\nALIASES\n  $ sbv2 aptos list crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-oracle-create-queuehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos oracle create [QUEUEHEXSTRING]")),(0,r.kt)("p",null,"create a oracle for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos oracle create [QUEUEHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet] [--programId\n    <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>]\n    [--metadata <value>] [--new]\n\nARGUMENTS\n  QUEUEHEXSTRING  HexString address of the queue\n\nFLAGS\n  -a, --authority=<value>  alternate named account that will be the authority for the oracle\n  -h, --help               Show CLI help.\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --metadata=<value>       metadata of the oracle for easier identification\n  --name=<value>           name of the oracle for easier identification\n  --networkId=<option>     [default: devnet] Aptos network to connect to\n                           <options: devnet|testnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           programId on the selected Aptos network\n  --stateAddress=<value>   [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a oracle for a given queue\n\nALIASES\n  $ sbv2 aptos create oracle\n")),(0,r.kt)("h2",{id:"sbv2-aptos-oracle-metrics-oraclehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos oracle metrics [ORACLEHEXSTRING]")),(0,r.kt)("p",null,"list oracle metrics"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos oracle metrics [ORACLEHEXSTRING] [-h] [-v] [-s] [--networkId devnet|testnet] [--programId <value>]\n    [--stateAddress <value>] [-u <value>] [--json]\n\nARGUMENTS\n  ORACLEHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help              Show CLI help.\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  list oracle metrics\n")),(0,r.kt)("h2",{id:"sbv2-aptos-oracle-up-oraclehexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos oracle up [ORACLEHEXSTRING]")),(0,r.kt)("p",null,"start an aptos docker oracle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos oracle up [ORACLEHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet] [--programId\n    <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [-d <value>] [--nodeImage <value>] [--arm]\n\nARGUMENTS\n  ORACLEHEXSTRING  HexString address of the oracle\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress docker logging\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --arm                         apple silicon needs to use a docker image for linux/arm64\n  --keypair=<value>             (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>          [default: devnet] Aptos network to connect to\n                                <options: devnet|testnet>\n  --nodeImage=<value>           [default: dev-v2-10-03-22a] public key of the oracle to start-up\n  --profileName=<value>         [default: default] If --keypair is pointing to a yaml file, provide an optional profile\n                                to load. If none provided, default will be used\n  --programId=<value>           [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77]\n                                Switchboard programId on the selected Aptos network\n  --stateAddress=<value>        [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77]\n                                Switchboard state address\n\nDESCRIPTION\n  start an aptos docker oracle\n")),(0,r.kt)("h2",{id:"sbv2-aptos-pop-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos pop crank [CRANKHEXSTRING]")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos pop crank [CRANKHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet] [--programId\n    <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -h, --help              Show CLI help.\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --keypair=<value>       (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --profileName=<value>   [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                          load. If none provided, default will be used\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 aptos pop crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-print-accounttype-address"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos print ACCOUNTTYPE ADDRESS")),(0,r.kt)("p",null,"print an aptos account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos print [ACCOUNTTYPE] [ADDRESS] [-h] [-v] [-s] [--networkId devnet|testnet] [--programId <value>]\n    [--stateAddress <value>] [-u <value>] [--json]\n\nARGUMENTS\n  ACCOUNTTYPE  (queue|aggregator|crank|oracle|permission|lease|job|state) account type to print\n  ADDRESS      HexString address of the account to print\n\nFLAGS\n  -h, --help              Show CLI help.\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an aptos account\n\nALIASES\n  $ sbv2 aptos print\n")),(0,r.kt)("h2",{id:"sbv2-aptos-push-crank-crankhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos push crank [CRANKHEXSTRING]")),(0,r.kt)("p",null,"push an aggregator onto the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos push crank [CRANKHEXSTRING] --keypair <value> -a <value> [-h] [-v] [-s] [--networkId devnet|testnet]\n    [--programId <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json]\n\nARGUMENTS\n  CRANKHEXSTRING  HexString address of the crank\n\nFLAGS\n  -a, --aggregatorHexString=<value>  (required) HexString address of the aggregator\n  -h, --help                         Show CLI help.\n  -s, --silent                       suppress cli prompts\n  -u, --rpcUrl=<value>               alternate RPC url\n  -v, --verbose                      log everything\n  --keypair=<value>                  (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>               [default: devnet] Aptos network to connect to\n                                     <options: devnet|testnet>\n  --profileName=<value>              [default: default] If --keypair is pointing to a yaml file, provide an optional\n                                     profile to load. If none provided, default will be used\n  --programId=<value>                [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77]\n                                     Switchboard programId on the selected Aptos network\n  --stateAddress=<value>             [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77]\n                                     Switchboard state address\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sbv2 aptos push crank\n")),(0,r.kt)("h2",{id:"sbv2-aptos-queue-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos queue create")),(0,r.kt)("p",null,"create a new oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos queue create --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet] [--programId <value>]\n    [--stateAddress <value>] [-u <value>] [--profileName <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--minStake <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled]\n    [--unpermissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [--lockLeaseFunding] [--new]\n\nFLAGS\n  -a, --authority=<value>  alternate account HexString that will be the authority for the queue\n  -h, --help               Show CLI help.\n  -r, --reward=<value>     oracle rewards for successfully responding to an update request\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --enableBufferRelayers   enable oracles to fulfill buffer relayer requests\n  --keypair=<value>        (required) Path to AptosAccount keypair or config.yaml file\n  --lockLeaseFunding       lock lease funding\n  --metadata=<value>       metadata of the queue for easier identification\n  --minStake=<value>       minimum stake required by an oracle to join the queue\n  --name=<value>           name of the queue for easier identification\n  --networkId=<option>     [default: devnet] Aptos network to connect to\n                           <options: devnet|testnet>\n  --new                    create account at new AptosAccount with authority set to --account\n  --oracleTimeout=<value>  [default: 180] number of oracles to add to the queue\n  --profileName=<value>    [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                           load. If none provided, default will be used\n  --programId=<value>      [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           programId on the selected Aptos network\n  --queueSize=<value>      [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled        permit slashing malicous oracles\n  --stateAddress=<value>   [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                           state address\n  --unpermissionedFeeds    permit unpermissioned feeds\n  --unpermissionedVrf      permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 aptos create queue\n")),(0,r.kt)("h2",{id:"sbv2-aptos-update-aggregator-aggregatorhexstring"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 aptos update aggregator [AGGREGATORHEXSTRING]")),(0,r.kt)("p",null,"request a new value on-chain for an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 aptos update aggregator [AGGREGATORHEXSTRING] --keypair <value> [-h] [-v] [-s] [--networkId devnet|testnet]\n    [--programId <value>] [--stateAddress <value>] [-u <value>] [--profileName <value>]\n\nARGUMENTS\n  AGGREGATORHEXSTRING  HexString address of the aggregator\n\nFLAGS\n  -h, --help              Show CLI help.\n  -s, --silent            suppress cli prompts\n  -u, --rpcUrl=<value>    alternate RPC url\n  -v, --verbose           log everything\n  --keypair=<value>       (required) Path to AptosAccount keypair or config.yaml file\n  --networkId=<option>    [default: devnet] Aptos network to connect to\n                          <options: devnet|testnet>\n  --profileName=<value>   [default: default] If --keypair is pointing to a yaml file, provide an optional profile to\n                          load. If none provided, default will be used\n  --programId=<value>     [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          programId on the selected Aptos network\n  --stateAddress=<value>  [default: 0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77] Switchboard\n                          state address\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sbv2 aptos update aggregator\n")))}l.isMDXComponent=!0},53798:(e,a,n)=>{n.d(a,{ZP:()=>l});var t=n(83117),r=(n(67294),n(3905));const o={toc:[{value:"<code>sbv2 near aggregator add job [AGGREGATORADDRESS]</code>",id:"sbv2-near-aggregator-add-job-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator create QUEUEADDRESS</code>",id:"sbv2-near-aggregator-create-queueaddress",level:2},{value:"<code>sbv2 near aggregator escrow [AGGREGATORADDRESS]</code>",id:"sbv2-near-aggregator-escrow-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator fetch</code>",id:"sbv2-near-aggregator-fetch",level:2},{value:"<code>sbv2 near aggregator fund [AGGREGATORADDRESS]</code>",id:"sbv2-near-aggregator-fund-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator job add [AGGREGATORADDRESS]</code>",id:"sbv2-near-aggregator-job-add-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator job remove [AGGREGATORADDRESS]</code>",id:"sbv2-near-aggregator-job-remove-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator permission create [AGGREGATORADDRESS]</code>",id:"sbv2-near-aggregator-permission-create-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator remove job [AGGREGATORADDRESS]</code>",id:"sbv2-near-aggregator-remove-job-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator set AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-set-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator update [AGGREGATORADDRESS]</code>",id:"sbv2-near-aggregator-update-aggregatoraddress",level:2},{value:"<code>sbv2 near crank create [QUEUEADDRESS]</code>",id:"sbv2-near-crank-create-queueaddress",level:2},{value:"<code>sbv2 near crank list [CRANKADDRESS]</code>",id:"sbv2-near-crank-list-crankaddress",level:2},{value:"<code>sbv2 near crank pop [CRANKADDRESS]</code>",id:"sbv2-near-crank-pop-crankaddress",level:2},{value:"<code>sbv2 near crank push [CRANKADDRESS]</code>",id:"sbv2-near-crank-push-crankaddress",level:2},{value:"<code>sbv2 near create aggregator QUEUEADDRESS</code>",id:"sbv2-near-create-aggregator-queueaddress",level:2},{value:"<code>sbv2 near create aggregator permission [AGGREGATORADDRESS]</code>",id:"sbv2-near-create-aggregator-permission-aggregatoraddress",level:2},{value:"<code>sbv2 near create crank [QUEUEADDRESS]</code>",id:"sbv2-near-create-crank-queueaddress",level:2},{value:"<code>sbv2 near create escrow</code>",id:"sbv2-near-create-escrow",level:2},{value:"<code>sbv2 near create job JOBDEFINITION</code>",id:"sbv2-near-create-job-jobdefinition",level:2},{value:"<code>sbv2 near create oracle [QUEUEADDRESS]</code>",id:"sbv2-near-create-oracle-queueaddress",level:2},{value:"<code>sbv2 near create oracle permission</code>",id:"sbv2-near-create-oracle-permission",level:2},{value:"<code>sbv2 near create queue</code>",id:"sbv2-near-create-queue",level:2},{value:"<code>sbv2 near escrow create</code>",id:"sbv2-near-escrow-create",level:2},{value:"<code>sbv2 near escrow print</code>",id:"sbv2-near-escrow-print",level:2},{value:"<code>sbv2 near fetch aggregators</code>",id:"sbv2-near-fetch-aggregators",level:2},{value:"<code>sbv2 near fund aggregator [AGGREGATORADDRESS]</code>",id:"sbv2-near-fund-aggregator-aggregatoraddress",level:2},{value:"<code>sbv2 near job create JOBDEFINITION</code>",id:"sbv2-near-job-create-jobdefinition",level:2},{value:"<code>sbv2 near list queue QUEUEADDRESS</code>",id:"sbv2-near-list-queue-queueaddress",level:2},{value:"<code>sbv2 near oracle create [QUEUEADDRESS]</code>",id:"sbv2-near-oracle-create-queueaddress",level:2},{value:"<code>sbv2 near oracle escrow [ORACLEADDRESS]</code>",id:"sbv2-near-oracle-escrow-oracleaddress",level:2},{value:"<code>sbv2 near oracle stake [ORACLEADDRESS]</code>",id:"sbv2-near-oracle-stake-oracleaddress",level:2},{value:"<code>sbv2 near oracle unstake [ORACLEADDRESS]</code>",id:"sbv2-near-oracle-unstake-oracleaddress",level:2},{value:"<code>sbv2 near oracle up [ORACLEADDRESS]</code>",id:"sbv2-near-oracle-up-oracleaddress",level:2},{value:"<code>sbv2 near permission create</code>",id:"sbv2-near-permission-create",level:2},{value:"<code>sbv2 near pop crank [CRANKADDRESS]</code>",id:"sbv2-near-pop-crank-crankaddress",level:2},{value:"<code>sbv2 near print ACCOUNTTYPE ADDRESS</code>",id:"sbv2-near-print-accounttype-address",level:2},{value:"<code>sbv2 near print escrow</code>",id:"sbv2-near-print-escrow",level:2},{value:"<code>sbv2 near push crank [CRANKADDRESS]</code>",id:"sbv2-near-push-crank-crankaddress",level:2},{value:"<code>sbv2 near queue aggregators QUEUEADDRESS</code>",id:"sbv2-near-queue-aggregators-queueaddress",level:2},{value:"<code>sbv2 near queue create</code>",id:"sbv2-near-queue-create",level:2},{value:"<code>sbv2 near queue feeds QUEUEADDRESS</code>",id:"sbv2-near-queue-feeds-queueaddress",level:2},{value:"<code>sbv2 near queue list QUEUEADDRESS</code>",id:"sbv2-near-queue-list-queueaddress",level:2},{value:"<code>sbv2 near set aggregator AGGREGATORADDRESS</code>",id:"sbv2-near-set-aggregator-aggregatoraddress",level:2},{value:"<code>sbv2 near update aggregator [AGGREGATORADDRESS]</code>",id:"sbv2-near-update-aggregator-aggregatoraddress",level:2}]};function l(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"interact with switchboard on Near"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-add-job-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator add job [AGGREGATORADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator create QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-escrow-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator escrow [AGGREGATORADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-fetch"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator fetch"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-fund-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator fund [AGGREGATORADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-job-add-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator job add [AGGREGATORADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-job-remove-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator job remove [AGGREGATORADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-permission-create-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator permission create [AGGREGATORADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-remove-job-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator remove job [AGGREGATORADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-set-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator set AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-update-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator update [AGGREGATORADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-crank-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near crank create [QUEUEADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-crank-list-crankaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near crank list [CRANKADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-crank-pop-crankaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near crank pop [CRANKADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-crank-push-crankaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near crank push [CRANKADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-aggregator-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create aggregator QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-aggregator-permission-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create aggregator permission [AGGREGATORADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-crank-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create crank [QUEUEADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-escrow"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create escrow"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-job-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create job JOBDEFINITION"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-oracle-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create oracle [QUEUEADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-oracle-permission"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create oracle permission"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-create-queue"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near create queue"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-escrow-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near escrow create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-escrow-print"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near escrow print"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-fetch-aggregators"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near fetch aggregators"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-fund-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near fund aggregator [AGGREGATORADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-job-create-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near job create JOBDEFINITION"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-list-queue-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near list queue QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle create [QUEUEADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-escrow-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle escrow [ORACLEADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-stake-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle stake [ORACLEADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-unstake-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle unstake [ORACLEADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-up-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle up [ORACLEADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-permission-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near permission create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-pop-crank-crankaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near pop crank [CRANKADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-print-accounttype-address"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near print ACCOUNTTYPE ADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-print-escrow"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near print escrow"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-push-crank-crankaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near push crank [CRANKADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-queue-aggregators-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near queue aggregators QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-queue-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near queue create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-queue-feeds-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near queue feeds QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-queue-list-queueaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near queue list QUEUEADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-set-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near set aggregator AGGREGATORADDRESS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-near-update-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 near update aggregator [AGGREGATORADDRESS]")))),(0,r.kt)("h2",{id:"sbv2-near-aggregator-add-job-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator add job [AGGREGATORADDRESS]")),(0,r.kt)("p",null,"add a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator add job [AGGREGATORADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [--name <value> | --jobKey <value>] [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight\n    <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --jobDefinition=<value>       filesystem path of job json definition file\n  --jobKey=<value>              public key of an existing job account to add to an aggregator\n  --jobWeight=<value>           [default: 1] job weight\n  --metadata=<value>            metadata of the job account\n  --name=<value>                name of the job account\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job add\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator create QUEUEADDRESS")),(0,r.kt)("p",null,"create a near aggregator for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator create [QUEUEADDRESS] --accountName <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize\n    <value>] [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [--rewardEscrow <value>]\n    [--historyLimit <value>] [--enable]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --enable                      if required and queue authority is provided, enable permissions\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --historyLimit=<value>        [default: 1000] number of samples to store in aggregator's history\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n  --rewardEscrow=<value>        where to send rewards. defaults to user's escrow account\n  --updateInterval=<value>      (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>   [default: 0] percentage change between a previous accepted result and the next round\n                                before an oracle reports a value on-chain. Used to conserve lease cost during low\n                                volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near aggregator for a given queue\n\nALIASES\n  $ sbv2 near create aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-escrow-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator escrow [AGGREGATORADDRESS]")),(0,r.kt)("p",null,"view an aggregators escrow state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator escrow [AGGREGATORADDRESS] [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nDESCRIPTION\n  view an aggregators escrow state\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-fetch"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator fetch")),(0,r.kt)("p",null,"fetch all aggregators for a given near account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator fetch --accountId <value> [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountId=<value>           (required) optional, authority to fetch aggregators for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given near account\n\nALIASES\n  $ sbv2 near fetch aggregators\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-fund-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator fund [AGGREGATORADDRESS]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator fund [AGGREGATORADDRESS] --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --amount=<value>          (required) amount to deposit into the aggregator's lease\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sbv2 near fund aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-job-add-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator job add [AGGREGATORADDRESS]")),(0,r.kt)("p",null,"add a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator job add [AGGREGATORADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [--name <value> | --jobKey <value>] [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight\n    <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --jobDefinition=<value>       filesystem path of job json definition file\n  --jobKey=<value>              public key of an existing job account to add to an aggregator\n  --jobWeight=<value>           [default: 1] job weight\n  --metadata=<value>            metadata of the job account\n  --name=<value>                name of the job account\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job add\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-job-remove-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator job remove [AGGREGATORADDRESS]")),(0,r.kt)("p",null,"remove a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator job remove [AGGREGATORADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [-j <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -j, --jobAddress=<value>...   public key of an existing job account to remove from an aggregator\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  remove a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job remove\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-permission-create-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator permission create [AGGREGATORADDRESS]")),(0,r.kt)("p",null,"create a permission account for a near aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator permission create [AGGREGATORADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account for a near aggregator\n\nALIASES\n  $ sbv2 near create aggregator permission\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-remove-job-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator remove job [AGGREGATORADDRESS]")),(0,r.kt)("p",null,"remove a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator remove job [AGGREGATORADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [-j <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -j, --jobAddress=<value>...   public key of an existing job account to remove from an aggregator\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  remove a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job remove\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-set-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator set AGGREGATORADDRESS")),(0,r.kt)("p",null,"set a near aggregator's config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator set [AGGREGATORADDRESS] --accountName <value> --updateInterval <value> [-h] [-v] [-s]\n    [--networkId testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>]\n    [--json] [-a <value>] [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>]\n    [--batchSize <value>] [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [-j <value>]\n    [--rewardEscrow <value>] [--historyLimit <value>] [--enable]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -j, --job=<value>...          filesystem path to job definition file\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --enable                      if required and queue authority is provided, enable permissions\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --historyLimit=<value>        [default: 1000] number of samples to store in aggregator's history\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n  --rewardEscrow=<value>        where to send rewards. defaults to user's escrow account\n  --updateInterval=<value>      (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>   [default: 0] percentage change between a previous accepted result and the next round\n                                before an oracle reports a value on-chain. Used to conserve lease cost during low\n                                volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set a near aggregator's config\n\nALIASES\n  $ sbv2 near set aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-aggregator-update-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator update [AGGREGATORADDRESS]")),(0,r.kt)("p",null,"request a new value on-chain for an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator update [AGGREGATORADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sbv2 near update aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-crank-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank create [QUEUEADDRESS]")),(0,r.kt)("p",null,"create a new crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank create [QUEUEADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--name\n    <value>] [--metadata <value>] [--maxRows <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --maxRows=<value>             [default: 100] maximum number of rows on the crank\n  --metadata=<value>            metadata of the crank for easier identification\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sbv2 near create crank\n")),(0,r.kt)("h2",{id:"sbv2-near-crank-list-crankaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank list [CRANKADDRESS]")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank list [CRANKADDRESS] [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 near pop crank\n")),(0,r.kt)("h2",{id:"sbv2-near-crank-pop-crankaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank pop [CRANKADDRESS]")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank pop [CRANKADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 near pop crank\n")),(0,r.kt)("h2",{id:"sbv2-near-crank-push-crankaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank push [CRANKADDRESS]")),(0,r.kt)("p",null,"push an aggregator onto the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank push [CRANKADDRESS] --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --aggregatorAddress=<value>  (required) address of the aggregator in Uint8 or Base58 encoding\n  -h, --help                       Show CLI help.\n  -s, --silent                     suppress cli prompts\n  -u, --rpcUrl=<value>             alternate RPC url\n  -v, --verbose                    log everything\n  --accountName=<value>            (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>     [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                   Defaults to ~/.near-credentials\n  --networkId=<option>             [default: testnet] Near network ID to connect to\n                                   <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>              [default: switchboard-v2.testnet] Switchboard programId on the selected Near\n                                   networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sbv2 near push crank\n")),(0,r.kt)("h2",{id:"sbv2-near-create-aggregator-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create aggregator QUEUEADDRESS")),(0,r.kt)("p",null,"create a near aggregator for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create aggregator [QUEUEADDRESS] --accountName <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize\n    <value>] [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [--rewardEscrow <value>]\n    [--historyLimit <value>] [--enable]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --enable                      if required and queue authority is provided, enable permissions\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --historyLimit=<value>        [default: 1000] number of samples to store in aggregator's history\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n  --rewardEscrow=<value>        where to send rewards. defaults to user's escrow account\n  --updateInterval=<value>      (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>   [default: 0] percentage change between a previous accepted result and the next round\n                                before an oracle reports a value on-chain. Used to conserve lease cost during low\n                                volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near aggregator for a given queue\n\nALIASES\n  $ sbv2 near create aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-create-aggregator-permission-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create aggregator permission [AGGREGATORADDRESS]")),(0,r.kt)("p",null,"create a permission account for a near aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create aggregator permission [AGGREGATORADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account for a near aggregator\n\nALIASES\n  $ sbv2 near create aggregator permission\n")),(0,r.kt)("h2",{id:"sbv2-near-create-crank-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create crank [QUEUEADDRESS]")),(0,r.kt)("p",null,"create a new crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create crank [QUEUEADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--name\n    <value>] [--metadata <value>] [--maxRows <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --maxRows=<value>             [default: 100] maximum number of rows on the crank\n  --metadata=<value>            metadata of the crank for easier identification\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sbv2 near create crank\n")),(0,r.kt)("h2",{id:"sbv2-near-create-escrow"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create escrow")),(0,r.kt)("p",null,"create an escrow token account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create escrow --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--mint <value>]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --mint=<value>                [default: wrap.test] token mint to create escrow account for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an escrow token account\n\nALIASES\n  $ sbv2 near create escrow\n")),(0,r.kt)("h2",{id:"sbv2-near-create-job-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create job JOBDEFINITION")),(0,r.kt)("p",null,"create a job on near"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create job [JOBDEFINITION] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [--name <value>] [--metadata <value>]\n\nARGUMENTS\n  JOBDEFINITION  filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the job account\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the job for easier identification\n  --name=<value>                name of the job for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a job on near\n\nALIASES\n  $ sbv2 near create job\n")),(0,r.kt)("h2",{id:"sbv2-near-create-oracle-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create oracle [QUEUEADDRESS]")),(0,r.kt)("p",null,"create a near oracle for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create oracle [QUEUEADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [--name <value>] [--metadata <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the oracle for easier identification\n  --name=<value>                name of the oracle for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near oracle for a given queue\n\nALIASES\n  $ sbv2 near create oracle\n")),(0,r.kt)("h2",{id:"sbv2-near-create-oracle-permission"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create oracle permission")),(0,r.kt)("p",null,"create a permission account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create oracle permission --accountName <value> --granter <value> --grantee <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [--enable]\n\nFLAGS\n  -a, --authority=<value>       alternate account that is the granters authority\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enable                      enable permissions\n  --grantee=<value>             (required) account that will be granted permissions, typically an Oracle or Aggregator\n  --granter=<value>             (required) account that will grant permissions, typically the OracleQueue\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account\n\nALIASES\n  $ sbv2 near create oracle permission\n")),(0,r.kt)("h2",{id:"sbv2-near-create-queue"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near create queue")),(0,r.kt)("p",null,"create a new oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create queue --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--minStake <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled]\n    [--unpermissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the queue\n  -h, --help                    Show CLI help.\n  -r, --reward=<value>          oracle rewards for successfully responding to an update request\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enableBufferRelayers        enable oracles to fulfill buffer relayer requests\n  --metadata=<value>            metadata of the queue for easier identification\n  --minStake=<value>            minimum stake required by an oracle to join the queue\n  --name=<value>                name of the queue for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --oracleTimeout=<value>       [default: 180] number of oracles to add to the queue\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n  --queueSize=<value>           [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled             permit slashing malicous oracles\n  --unpermissionedFeeds         permit unpermissioned feeds\n  --unpermissionedVrf           permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 near create queue\n")),(0,r.kt)("h2",{id:"sbv2-near-escrow-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near escrow create")),(0,r.kt)("p",null,"create an escrow token account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near escrow create --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--mint <value>]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --mint=<value>                [default: wrap.test] token mint to create escrow account for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an escrow token account\n\nALIASES\n  $ sbv2 near create escrow\n")),(0,r.kt)("h2",{id:"sbv2-near-escrow-print"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near escrow print")),(0,r.kt)("p",null,"print an escrow token account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near escrow print --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an escrow token account\n\nALIASES\n  $ sbv2 near print escrow\n")),(0,r.kt)("h2",{id:"sbv2-near-fetch-aggregators"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near fetch aggregators")),(0,r.kt)("p",null,"fetch all aggregators for a given near account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near fetch aggregators --accountId <value> [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountId=<value>           (required) optional, authority to fetch aggregators for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given near account\n\nALIASES\n  $ sbv2 near fetch aggregators\n")),(0,r.kt)("h2",{id:"sbv2-near-fund-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near fund aggregator [AGGREGATORADDRESS]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near fund aggregator [AGGREGATORADDRESS] --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --amount=<value>          (required) amount to deposit into the aggregator's lease\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sbv2 near fund aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-job-create-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near job create JOBDEFINITION")),(0,r.kt)("p",null,"create a job on near"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near job create [JOBDEFINITION] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [--name <value>] [--metadata <value>]\n\nARGUMENTS\n  JOBDEFINITION  filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the job account\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the job for easier identification\n  --name=<value>                name of the job for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a job on near\n\nALIASES\n  $ sbv2 near create job\n")),(0,r.kt)("h2",{id:"sbv2-near-list-queue-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near list queue QUEUEADDRESS")),(0,r.kt)("p",null,"list aggregators for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near list queue [QUEUEADDRESS] [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  list aggregators for a given queue\n\nALIASES\n  $ sbv2 near list queue\n")),(0,r.kt)("h2",{id:"sbv2-near-oracle-create-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle create [QUEUEADDRESS]")),(0,r.kt)("p",null,"create a near oracle for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle create [QUEUEADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [--name <value>] [--metadata <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the oracle for easier identification\n  --name=<value>                name of the oracle for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near oracle for a given queue\n\nALIASES\n  $ sbv2 near create oracle\n")),(0,r.kt)("h2",{id:"sbv2-near-oracle-escrow-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle escrow [ORACLEADDRESS]")),(0,r.kt)("p",null,"view an aggregators escrow state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle escrow [ORACLEADDRESS] [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  ORACLEADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  view an aggregators escrow state\n")),(0,r.kt)("h2",{id:"sbv2-near-oracle-stake-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle stake [ORACLEADDRESS]")),(0,r.kt)("p",null,"deposit funds to an oracle's staking wallet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle stake [ORACLEADDRESS] --accountName <value> --amount <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --amount=<value>              (required) amount of Near to deposit into oracle staking wallet\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  deposit funds to an oracle's staking wallet\n")),(0,r.kt)("h2",{id:"sbv2-near-oracle-unstake-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle unstake [ORACLEADDRESS]")),(0,r.kt)("p",null,"deposit funds to an oracle's staking wallet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle unstake [ORACLEADDRESS] --accountName <value> --amount <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --amount=<value>              (required) amount of Near to unstake from oracle staking wallet\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  deposit funds to an oracle's staking wallet\n")),(0,r.kt)("h2",{id:"sbv2-near-oracle-up-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle up [ORACLEADDRESS]")),(0,r.kt)("p",null,"start a near docker oracle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle up [ORACLEADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-d\n    <value>] [--nodeImage <value>] [--arm]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress docker logging\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --arm                         apple silicon needs to use a docker image for linux/arm64\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --nodeImage=<value>           [default: dev-v2-10-03-22a] public key of the oracle to start-up\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  start a near docker oracle\n")),(0,r.kt)("h2",{id:"sbv2-near-permission-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near permission create")),(0,r.kt)("p",null,"create a permission account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near permission create --accountName <value> --granter <value> --grantee <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a\n    <value>] [--enable]\n\nFLAGS\n  -a, --authority=<value>       alternate account that is the granters authority\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enable                      enable permissions\n  --grantee=<value>             (required) account that will be granted permissions, typically an Oracle or Aggregator\n  --granter=<value>             (required) account that will grant permissions, typically the OracleQueue\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account\n\nALIASES\n  $ sbv2 near create oracle permission\n")),(0,r.kt)("h2",{id:"sbv2-near-pop-crank-crankaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near pop crank [CRANKADDRESS]")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near pop crank [CRANKADDRESS] [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 near pop crank\n")),(0,r.kt)("h2",{id:"sbv2-near-print-accounttype-address"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near print ACCOUNTTYPE ADDRESS")),(0,r.kt)("p",null,"print a near switchboard account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near print [ACCOUNTTYPE] [ADDRESS] [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--all]\n\nARGUMENTS\n  ACCOUNTTYPE  (queue|aggregator|crank|oracle|permission|lease|job) account type to print\n  ADDRESS      address of the account to print in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --all                         print all account attributes including jobs, permissions, and leases\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a near switchboard account\n\nALIASES\n  $ sbv2 near print\n")),(0,r.kt)("h2",{id:"sbv2-near-print-escrow"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near print escrow")),(0,r.kt)("p",null,"print an escrow token account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near print escrow --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an escrow token account\n\nALIASES\n  $ sbv2 near print escrow\n")),(0,r.kt)("h2",{id:"sbv2-near-push-crank-crankaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near push crank [CRANKADDRESS]")),(0,r.kt)("p",null,"push an aggregator onto the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near push crank [CRANKADDRESS] --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --aggregatorAddress=<value>  (required) address of the aggregator in Uint8 or Base58 encoding\n  -h, --help                       Show CLI help.\n  -s, --silent                     suppress cli prompts\n  -u, --rpcUrl=<value>             alternate RPC url\n  -v, --verbose                    log everything\n  --accountName=<value>            (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>     [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                   Defaults to ~/.near-credentials\n  --networkId=<option>             [default: testnet] Near network ID to connect to\n                                   <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>              [default: switchboard-v2.testnet] Switchboard programId on the selected Near\n                                   networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sbv2 near push crank\n")),(0,r.kt)("h2",{id:"sbv2-near-queue-aggregators-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue aggregators QUEUEADDRESS")),(0,r.kt)("p",null,"fetch all aggregators for a given queue account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue aggregators [QUEUEADDRESS] [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given queue account\n\nALIASES\n  $ sbv2 near queue feeds\n")),(0,r.kt)("h2",{id:"sbv2-near-queue-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue create")),(0,r.kt)("p",null,"create a new oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue create --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--minStake <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled]\n    [--unpermissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the queue\n  -h, --help                    Show CLI help.\n  -r, --reward=<value>          oracle rewards for successfully responding to an update request\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enableBufferRelayers        enable oracles to fulfill buffer relayer requests\n  --metadata=<value>            metadata of the queue for easier identification\n  --minStake=<value>            minimum stake required by an oracle to join the queue\n  --name=<value>                name of the queue for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --oracleTimeout=<value>       [default: 180] number of oracles to add to the queue\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n  --queueSize=<value>           [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled             permit slashing malicous oracles\n  --unpermissionedFeeds         permit unpermissioned feeds\n  --unpermissionedVrf           permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 near create queue\n")),(0,r.kt)("h2",{id:"sbv2-near-queue-feeds-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue feeds QUEUEADDRESS")),(0,r.kt)("p",null,"fetch all aggregators for a given queue account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue feeds [QUEUEADDRESS] [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given queue account\n\nALIASES\n  $ sbv2 near queue feeds\n")),(0,r.kt)("h2",{id:"sbv2-near-queue-list-queueaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue list QUEUEADDRESS")),(0,r.kt)("p",null,"list aggregators for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue list [QUEUEADDRESS] [-h] [-v] [-s] [--networkId testnet|mainnet|betanet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  list aggregators for a given queue\n\nALIASES\n  $ sbv2 near list queue\n")),(0,r.kt)("h2",{id:"sbv2-near-set-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near set aggregator AGGREGATORADDRESS")),(0,r.kt)("p",null,"set a near aggregator's config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near set aggregator [AGGREGATORADDRESS] --accountName <value> --updateInterval <value> [-h] [-v] [-s]\n    [--networkId testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>]\n    [--json] [-a <value>] [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>]\n    [--batchSize <value>] [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [-j <value>]\n    [--rewardEscrow <value>] [--historyLimit <value>] [--enable]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -j, --job=<value>...          filesystem path to job definition file\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --enable                      if required and queue authority is provided, enable permissions\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --historyLimit=<value>        [default: 1000] number of samples to store in aggregator's history\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n  --rewardEscrow=<value>        where to send rewards. defaults to user's escrow account\n  --updateInterval=<value>      (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>   [default: 0] percentage change between a previous accepted result and the next round\n                                before an oracle reports a value on-chain. Used to conserve lease cost during low\n                                volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set a near aggregator's config\n\nALIASES\n  $ sbv2 near set aggregator\n")),(0,r.kt)("h2",{id:"sbv2-near-update-aggregator-aggregatoraddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 near update aggregator [AGGREGATORADDRESS]")),(0,r.kt)("p",null,"request a new value on-chain for an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near update aggregator [AGGREGATORADDRESS] --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|betanet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|betanet|localnet>\n  --programId=<value>           [default: switchboard-v2.testnet] Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sbv2 near update aggregator\n")))}l.isMDXComponent=!0},48955:(e,a,n)=>{n.d(a,{ZP:()=>l});var t=n(83117),r=(n(67294),n(3905));const o={toc:[{value:"<code>sbv2 solana aggregator add crank [CRANKKEY] [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-add-crank-crankkey-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator add history [AGGREGATORKEY] [SIZE]</code>",id:"sbv2-solana-aggregator-add-history-aggregatorkey-size",level:2},{value:"<code>sbv2 solana aggregator add job [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-add-job-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator create [QUEUEKEY]</code>",id:"sbv2-solana-aggregator-create-queuekey",level:2},{value:"<code>sbv2 solana aggregator create copy [AGGREGATORSOURCE]</code>",id:"sbv2-solana-aggregator-create-copy-aggregatorsource",level:2},{value:"<code>sbv2 solana aggregator create json [DEFINITIONFILE]</code>",id:"sbv2-solana-aggregator-create-json-definitionfile",level:2},{value:"<code>sbv2 solana aggregator history print [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-history-print-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator lease create [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-lease-create-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator lease extend [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-lease-extend-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator lease print [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-lease-print-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator lease withdraw [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-lease-withdraw-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator lock [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-lock-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator permission create [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-permission-create-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator permission print [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-permission-print-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator print [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-print-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator print history [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-print-history-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator print lease [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-print-lease-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator print permission [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-print-permission-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator remove job [AGGREGATORKEY] [JOBKEY]</code>",id:"sbv2-solana-aggregator-remove-job-aggregatorkey-jobkey",level:2},{value:"<code>sbv2 solana aggregator save history [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-save-history-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator set [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-set-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator set authority [AGGREGATORKEY] [NEWAUTHORITY]</code>",id:"sbv2-solana-aggregator-set-authority-aggregatorkey-newauthority",level:2},{value:"<code>sbv2 solana aggregator set batchSize [AGGREGATORKEY] BATCHSIZE</code>",id:"sbv2-solana-aggregator-set-batchsize-aggregatorkey-batchsize",level:2},{value:"<code>sbv2 solana aggregator set forceReport [AGGREGATORKEY] [FORCEREPORTPERIOD]</code>",id:"sbv2-solana-aggregator-set-forcereport-aggregatorkey-forcereportperiod",level:2},{value:"<code>sbv2 solana aggregator set forceReportPeriod [AGGREGATORKEY] [FORCEREPORTPERIOD]</code>",id:"sbv2-solana-aggregator-set-forcereportperiod-aggregatorkey-forcereportperiod",level:2},{value:"<code>sbv2 solana aggregator set history [AGGREGATORKEY] [SIZE]</code>",id:"sbv2-solana-aggregator-set-history-aggregatorkey-size",level:2},{value:"<code>sbv2 solana aggregator set minJobs [AGGREGATORKEY] [MINJOBRESULTS]</code>",id:"sbv2-solana-aggregator-set-minjobs-aggregatorkey-minjobresults",level:2},{value:"<code>sbv2 solana aggregator set minOracles [AGGREGATORKEY] [MINORACLERESULTS]</code>",id:"sbv2-solana-aggregator-set-minoracles-aggregatorkey-minoracleresults",level:2},{value:"<code>sbv2 solana aggregator set queue [AGGREGATORKEY] [QUEUEKEY]</code>",id:"sbv2-solana-aggregator-set-queue-aggregatorkey-queuekey",level:2},{value:"<code>sbv2 solana aggregator set updateInterval [AGGREGATORKEY] [UPDATEINTERVAL]</code>",id:"sbv2-solana-aggregator-set-updateinterval-aggregatorkey-updateinterval",level:2},{value:"<code>sbv2 solana aggregator set variance [AGGREGATORKEY] [VARIANCETHRESHOLD]</code>",id:"sbv2-solana-aggregator-set-variance-aggregatorkey-variancethreshold",level:2},{value:"<code>sbv2 solana aggregator set varianceThreshold [AGGREGATORKEY] [VARIANCETHRESHOLD]</code>",id:"sbv2-solana-aggregator-set-variancethreshold-aggregatorkey-variancethreshold",level:2},{value:"<code>sbv2 solana aggregator update [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-update-aggregatorkey",level:2},{value:"<code>sbv2 solana aggregator watch [AGGREGATORKEY]</code>",id:"sbv2-solana-aggregator-watch-aggregatorkey",level:2},{value:"<code>sbv2 solana anchor test</code>",id:"sbv2-solana-anchor-test",level:2},{value:"<code>sbv2 solana buffer create [QUEUEKEY]</code>",id:"sbv2-solana-buffer-create-queuekey",level:2},{value:"<code>sbv2 solana buffer print [BUFFERRELAYERKEY]</code>",id:"sbv2-solana-buffer-print-bufferrelayerkey",level:2},{value:"<code>sbv2 solana crank add aggregator [CRANKKEY] [AGGREGATORKEY]</code>",id:"sbv2-solana-crank-add-aggregator-crankkey-aggregatorkey",level:2},{value:"<code>sbv2 solana crank cmp [CRANKKEY1] [CRANKKEY2]</code>",id:"sbv2-solana-crank-cmp-crankkey1-crankkey2",level:2},{value:"<code>sbv2 solana crank create [QUEUEKEY]</code>",id:"sbv2-solana-crank-create-queuekey",level:2},{value:"<code>sbv2 solana crank list [CRANKKEY]</code>",id:"sbv2-solana-crank-list-crankkey",level:2},{value:"<code>sbv2 solana crank pop [CRANKKEY]</code>",id:"sbv2-solana-crank-pop-crankkey",level:2},{value:"<code>sbv2 solana crank print [CRANKKEY]</code>",id:"sbv2-solana-crank-print-crankkey",level:2},{value:"<code>sbv2 solana crank push [CRANKKEY] [AGGREGATORKEY]</code>",id:"sbv2-solana-crank-push-crankkey-aggregatorkey",level:2},{value:"<code>sbv2 solana crank turn [CRANKKEY]</code>",id:"sbv2-solana-crank-turn-crankkey",level:2},{value:"<code>sbv2 solana job create JOBDEFINITION</code>",id:"sbv2-solana-job-create-jobdefinition",level:2},{value:"<code>sbv2 solana job print [JOBKEY]</code>",id:"sbv2-solana-job-print-jobkey",level:2},{value:"<code>sbv2 solana json create aggregator [DEFINITIONFILE]</code>",id:"sbv2-solana-json-create-aggregator-definitionfile",level:2},{value:"<code>sbv2 solana lease create [AGGREGATORKEY]</code>",id:"sbv2-solana-lease-create-aggregatorkey",level:2},{value:"<code>sbv2 solana lease extend [AGGREGATORKEY]</code>",id:"sbv2-solana-lease-extend-aggregatorkey",level:2},{value:"<code>sbv2 solana lease withdraw [AGGREGATORKEY]</code>",id:"sbv2-solana-lease-withdraw-aggregatorkey",level:2},{value:"<code>sbv2 solana localnet env</code>",id:"sbv2-solana-localnet-env",level:2},{value:"<code>sbv2 solana oracle balance [ORACLEKEY]</code>",id:"sbv2-solana-oracle-balance-oraclekey",level:2},{value:"<code>sbv2 solana oracle create [QUEUEKEY]</code>",id:"sbv2-solana-oracle-create-queuekey",level:2},{value:"<code>sbv2 solana oracle deposit [ORACLEKEY]</code>",id:"sbv2-solana-oracle-deposit-oraclekey",level:2},{value:"<code>sbv2 solana oracle nonce [ORACLEKEY]</code>",id:"sbv2-solana-oracle-nonce-oraclekey",level:2},{value:"<code>sbv2 solana oracle permission create [ORACLEKEY]</code>",id:"sbv2-solana-oracle-permission-create-oraclekey",level:2},{value:"<code>sbv2 solana oracle permission print [ORACLEKEY]</code>",id:"sbv2-solana-oracle-permission-print-oraclekey",level:2},{value:"<code>sbv2 solana oracle print [ORACLEKEY]</code>",id:"sbv2-solana-oracle-print-oraclekey",level:2},{value:"<code>sbv2 solana oracle print permission [ORACLEKEY]</code>",id:"sbv2-solana-oracle-print-permission-oraclekey",level:2},{value:"<code>sbv2 solana oracle up [ORACLEADDRESS]</code>",id:"sbv2-solana-oracle-up-oracleaddress",level:2},{value:"<code>sbv2 solana oracle withdraw [ORACLEKEY]</code>",id:"sbv2-solana-oracle-withdraw-oraclekey",level:2},{value:"<code>sbv2 solana permission create [GRANTER] [GRANTEE]</code>",id:"sbv2-solana-permission-create-granter-grantee",level:2},{value:"<code>sbv2 solana permission print [PERMISSIONKEY]</code>",id:"sbv2-solana-permission-print-permissionkey",level:2},{value:"<code>sbv2 solana permission set [PERMISSIONKEY]</code>",id:"sbv2-solana-permission-set-permissionkey",level:2},{value:"<code>sbv2 solana print [PUBLICKEY]</code>",id:"sbv2-solana-print-publickey",level:2},{value:"<code>sbv2 solana print aggregator [AGGREGATORKEY]</code>",id:"sbv2-solana-print-aggregator-aggregatorkey",level:2},{value:"<code>sbv2 solana print aggregator history [AGGREGATORKEY]</code>",id:"sbv2-solana-print-aggregator-history-aggregatorkey",level:2},{value:"<code>sbv2 solana print aggregator lease [AGGREGATORKEY]</code>",id:"sbv2-solana-print-aggregator-lease-aggregatorkey",level:2},{value:"<code>sbv2 solana print aggregator permission [AGGREGATORKEY]</code>",id:"sbv2-solana-print-aggregator-permission-aggregatorkey",level:2},{value:"<code>sbv2 solana print buffer [BUFFERRELAYERKEY]</code>",id:"sbv2-solana-print-buffer-bufferrelayerkey",level:2},{value:"<code>sbv2 solana print crank [CRANKKEY]</code>",id:"sbv2-solana-print-crank-crankkey",level:2},{value:"<code>sbv2 solana print job [JOBKEY]</code>",id:"sbv2-solana-print-job-jobkey",level:2},{value:"<code>sbv2 solana print oracle [ORACLEKEY]</code>",id:"sbv2-solana-print-oracle-oraclekey",level:2},{value:"<code>sbv2 solana print oracle permission [ORACLEKEY]</code>",id:"sbv2-solana-print-oracle-permission-oraclekey",level:2},{value:"<code>sbv2 solana print permission [PERMISSIONKEY]</code>",id:"sbv2-solana-print-permission-permissionkey",level:2},{value:"<code>sbv2 solana print program</code>",id:"sbv2-solana-print-program",level:2},{value:"<code>sbv2 solana print queue [QUEUEKEY]</code>",id:"sbv2-solana-print-queue-queuekey",level:2},{value:"<code>sbv2 solana print vrf [VRFKEY]</code>",id:"sbv2-solana-print-vrf-vrfkey",level:2},{value:"<code>sbv2 solana program print</code>",id:"sbv2-solana-program-print",level:2},{value:"<code>sbv2 solana queue create</code>",id:"sbv2-solana-queue-create",level:2},{value:"<code>sbv2 solana queue print [QUEUEKEY]</code>",id:"sbv2-solana-queue-print-queuekey",level:2},{value:"<code>sbv2 solana queue set rewards [QUEUEKEY] [REWARDS]</code>",id:"sbv2-solana-queue-set-rewards-queuekey-rewards",level:2},{value:"<code>sbv2 solana queue set vrf [QUEUEKEY]</code>",id:"sbv2-solana-queue-set-vrf-queuekey",level:2},{value:"<code>sbv2 solana set aggregator [AGGREGATORKEY]</code>",id:"sbv2-solana-set-aggregator-aggregatorkey",level:2},{value:"<code>sbv2 solana vrf create [QUEUEKEY]</code>",id:"sbv2-solana-vrf-create-queuekey",level:2},{value:"<code>sbv2 solana vrf create example [QUEUEKEY]</code>",id:"sbv2-solana-vrf-create-example-queuekey",level:2},{value:"<code>sbv2 solana vrf print [VRFKEY]</code>",id:"sbv2-solana-vrf-print-vrfkey",level:2},{value:"<code>sbv2 solana vrf request [VRFKEY]</code>",id:"sbv2-solana-vrf-request-vrfkey",level:2},{value:"<code>sbv2 solana vrf verify [VRFKEY]</code>",id:"sbv2-solana-vrf-verify-vrfkey",level:2},{value:"<code>sbv2 solana vrf watch [VRFKEY]</code>",id:"sbv2-solana-vrf-watch-vrfkey",level:2},{value:"<code>sbv2 solana watch aggregator [AGGREGATORKEY]</code>",id:"sbv2-solana-watch-aggregator-aggregatorkey",level:2},{value:"<code>sbv2 solana watch vrf [VRFKEY]</code>",id:"sbv2-solana-watch-vrf-vrfkey",level:2}]};function l(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"interact with switchboard on Solana"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-add-crank-crankkey-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator add crank [CRANKKEY] [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-add-history-aggregatorkey-size"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator add history [AGGREGATORKEY] [SIZE]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-add-job-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator add job [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator create [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-create-copy-aggregatorsource"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator create copy [AGGREGATORSOURCE]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-create-json-definitionfile"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator create json [DEFINITIONFILE]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-history-print-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator history print [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-lease-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator lease create [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-lease-extend-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator lease extend [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-lease-print-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator lease print [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-lease-withdraw-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator lease withdraw [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-lock-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator lock [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-permission-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator permission create [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-permission-print-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator permission print [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-print-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator print [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-print-history-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator print history [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-print-lease-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator print lease [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-print-permission-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator print permission [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-remove-job-aggregatorkey-jobkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator remove job [AGGREGATORKEY] [JOBKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-save-history-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator save history [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-authority-aggregatorkey-newauthority"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set authority [AGGREGATORKEY] [NEWAUTHORITY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-batchsize-aggregatorkey-batchsize"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set batchSize [AGGREGATORKEY] BATCHSIZE"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-forcereport-aggregatorkey-forcereportperiod"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set forceReport [AGGREGATORKEY] [FORCEREPORTPERIOD]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-forcereportperiod-aggregatorkey-forcereportperiod"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set forceReportPeriod [AGGREGATORKEY] [FORCEREPORTPERIOD]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-history-aggregatorkey-size"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set history [AGGREGATORKEY] [SIZE]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-minjobs-aggregatorkey-minjobresults"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set minJobs [AGGREGATORKEY] [MINJOBRESULTS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-minoracles-aggregatorkey-minoracleresults"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set minOracles [AGGREGATORKEY] [MINORACLERESULTS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-queue-aggregatorkey-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set queue [AGGREGATORKEY] [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-updateinterval-aggregatorkey-updateinterval"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set updateInterval [AGGREGATORKEY] [UPDATEINTERVAL]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-variance-aggregatorkey-variancethreshold"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set variance [AGGREGATORKEY] [VARIANCETHRESHOLD]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-set-variancethreshold-aggregatorkey-variancethreshold"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator set varianceThreshold [AGGREGATORKEY] [VARIANCETHRESHOLD]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-update-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator update [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-aggregator-watch-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana aggregator watch [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-anchor-test"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana anchor test"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-buffer-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana buffer create [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-buffer-print-bufferrelayerkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana buffer print [BUFFERRELAYERKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-add-aggregator-crankkey-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank add aggregator [CRANKKEY] [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-cmp-crankkey1-crankkey2"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank cmp [CRANKKEY1] [CRANKKEY2]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank create [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-list-crankkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank list [CRANKKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-pop-crankkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank pop [CRANKKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-print-crankkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank print [CRANKKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-push-crankkey-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank push [CRANKKEY] [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-crank-turn-crankkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana crank turn [CRANKKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-job-create-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana job create JOBDEFINITION"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-job-print-jobkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana job print [JOBKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-json-create-aggregator-definitionfile"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana json create aggregator [DEFINITIONFILE]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease create [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-extend-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease extend [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-lease-withdraw-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana lease withdraw [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-localnet-env"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana localnet env"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-balance-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle balance [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle create [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-deposit-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle deposit [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-nonce-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle nonce [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-permission-create-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle permission create [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-permission-print-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle permission print [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-print-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle print [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-print-permission-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle print permission [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-up-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle up [ORACLEADDRESS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-oracle-withdraw-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana oracle withdraw [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-create-granter-grantee"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission create [GRANTER] [GRANTEE]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-print-permissionkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission print [PERMISSIONKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-permission-set-permissionkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana permission set [PERMISSIONKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-publickey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print [PUBLICKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-aggregator-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print aggregator [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-aggregator-history-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print aggregator history [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-aggregator-lease-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print aggregator lease [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-aggregator-permission-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print aggregator permission [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-buffer-bufferrelayerkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print buffer [BUFFERRELAYERKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-crank-crankkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print crank [CRANKKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-job-jobkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print job [JOBKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-oracle-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print oracle [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-oracle-permission-oraclekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print oracle permission [ORACLEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-permission-permissionkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print permission [PERMISSIONKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-program"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print program"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-queue-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print queue [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-print-vrf-vrfkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana print vrf [VRFKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-program-print"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana program print"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-queue-create"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana queue create"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-queue-print-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana queue print [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-queue-set-rewards-queuekey-rewards"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana queue set rewards [QUEUEKEY] [REWARDS]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-queue-set-vrf-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana queue set vrf [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-set-aggregator-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana set aggregator [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf create [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-create-example-queuekey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf create example [QUEUEKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-print-vrfkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf print [VRFKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-request-vrfkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf request [VRFKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-verify-vrfkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf verify [VRFKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-vrf-watch-vrfkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana vrf watch [VRFKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-watch-aggregator-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana watch aggregator [AGGREGATORKEY]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sbv2-solana-watch-vrf-vrfkey"},(0,r.kt)("inlineCode",{parentName:"a"},"sbv2 solana watch vrf [VRFKEY]")))),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-add-crank-crankkey-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator add crank [CRANKKEY] [AGGREGATORKEY]")),(0,r.kt)("p",null,"push an aggregator onto a crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator add crank [CRANKKEY] [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  CRANKKEY       public key of the crank\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  push an aggregator onto a crank\n\nALIASES\n  $ sbv2 solana aggregator add crank\n  $ sbv2 solana crank add aggregator\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-add-history-aggregatorkey-size"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator add history [AGGREGATORKEY] [SIZE]")),(0,r.kt)("p",null,"set an aggregator's history buffer account to record the last N accepted results"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator add history [AGGREGATORKEY] [SIZE] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to add to a crank\n  SIZE           size of history buffer\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's history buffer account to record the last N accepted results\n\nALIASES\n  $ sbv2 solana aggregator add history\n\nEXAMPLES\n  $ sbv2 aggregator:set:history GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 10000 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-add-job-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator add job [AGGREGATORKEY]")),(0,r.kt)("p",null,"add a job to an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator add job [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--jobDefinition <value> | --jobKey <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --jobDefinition=<value>  filesystem path of job json definition file\n  --jobKey=<value>         public key of an existing job account to add to an aggregator\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  add a job to an aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:add:job\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator create [QUEUEKEY]")),(0,r.kt)("p",null,"create an aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator create [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [-a <value>] [--crankKey <value>] [--enable] [--queueAuthority <value>]\n    [-n <value>] [--forceReportPeriod <value>] [--batchSize <value>] [--minJobs <value>] [--minOracles <value>]\n    [--updateInterval <value>] [--varianceThreshold <value>] [-j <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account to create aggregator for\n\nFLAGS\n  -a, --authority=<value>      alternate keypair that is the authority for the aggregator\n  -h, --help                   Show CLI help.\n  -j, --job=<value>...         filesystem path to job definition file\n  -k, --keypair=<value>        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n  -n, --name=<value>           name of the aggregator\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          number of oracles requested for each open round call\n  --commitment=<option>        [default: confirmed] transaction commitment level to use\n                               <options: confirmed|finalized|processed>\n  --crankKey=<value>           public key of the crank to join\n  --enable                     set permissions to PERMIT_ORACLE_QUEUE_USAGE\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --programId=<value>          alternative Switchboard program ID to interact with\n  --queueAuthority=<value>     alternative keypair to use for queue authority\n  --updateInterval=<value>     set an aggregator's minimum update delay\n  --varianceThreshold=<value>  percentage change between a previous accepted result and the next round before an oracle\n                               reports a value on-chain. Used to conserve lease cost during low volatility\n\nDESCRIPTION\n  create an aggregator account\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-create-copy-aggregatorsource"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator create copy [AGGREGATORSOURCE]")),(0,r.kt)("p",null,"copy an aggregator account to a new oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator create copy [AGGREGATORSOURCE] --queueKey <value> [-h] [-v] [-s] [--mainnetBeta] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>] [--minOracles <value>]\n    [--batchSize <value>] [--minJobs <value>] [--minUpdateDelay <value>] [--forceReportPeriod <value>]\n    [--varianceThreshold <value>] [--crankKey <value>] [--enable] [--queueAuthority <value>] [--copyJobs]\n\nARGUMENTS\n  AGGREGATORSOURCE  public key of the aggregator account to copy\n\nFLAGS\n  -a, --authority=<value>      alternate keypair that will be the aggregator authority\n  -h, --help                   Show CLI help.\n  -k, --keypair=<value>        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --batchSize=<value>          override source aggregator's oracleRequestBatchSize\n  --commitment=<option>        [default: confirmed] transaction commitment level to use\n                               <options: confirmed|finalized|processed>\n  --copyJobs                   create copy of job accounts instead of referincing existing job account\n  --crankKey=<value>           public key of the crank to push aggregator to\n  --enable                     set permissions to PERMIT_ORACLE_QUEUE_USAGE\n  --forceReportPeriod=<value>  override source aggregator's forceReportPeriod\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n  --minJobs=<value>            override source aggregator's minJobResults\n  --minOracles=<value>         override source aggregator's minOracleResults\n  --minUpdateDelay=<value>     override source aggregator's minUpdateDelaySeconds\n  --programId=<value>          alternative Switchboard program ID to interact with\n  --queueAuthority=<value>     alternative keypair to use for queue authority\n  --queueKey=<value>           (required) public key of the queue to create aggregator for\n  --varianceThreshold=<value>  override source aggregator's varianceThreshold\n\nDESCRIPTION\n  copy an aggregator account to a new oracle queue\n\nEXAMPLES\n  $ sbv2 aggregator:create:copy GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --queueKey 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json\n\n  $ sbv2 aggregator:create:copy GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --queueKey 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json --sourceCluster mainnet-beta\n\n  $ sbv2 aggregator:create:copy FcSmdsdWks75YdyCGegRqXdt5BiNGQKxZywyzb8ckD7D --queueKey 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json --sourceCluster mainnet-beta\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-create-json-definitionfile"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator create json [DEFINITIONFILE]")),(0,r.kt)("p",null,"create an aggregator from a json file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator create json [DEFINITIONFILE] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-q <value>] [-a <value>]\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of queue definition json file\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -q, --queueKey=<value>   public key of the oracle queue to create aggregator for\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create an aggregator from a json file\n\nALIASES\n  $ sbv2 solana json create aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:create:json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-history-print-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator history print [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the history buffer associated with an aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator history print [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the history buffer associated with an aggregator account\n\nALIASES\n  $ sbv2 solana aggregator history print\n  $ sbv2 solana aggregator print history\n\nEXAMPLES\n  $ sbv2 aggregator:print:history 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-lease-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator lease create [AGGREGATORKEY]")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator lease create [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--amount <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       token amount to load into the lease escrow. If decimals provided, amount will be normalized to\n                         raw tokenAmount\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator lease create\n\nEXAMPLES\n  $ sbv2 lease:create GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.5 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-lease-extend-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator lease extend [AGGREGATORKEY]")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator lease extend [AGGREGATORKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) token amount to load into the lease escrow. If decimals provided, amount will be\n                         normalized to raw tokenAmount\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator lease extend\n\nEXAMPLES\n  $ sbv2 aggregator:lease:extend GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-lease-print-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator lease print [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the lease account associated with a Switchboard aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator lease print [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the lease account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 solana aggregator lease print\n  $ sbv2 solana aggregator print lease\n\nEXAMPLES\n  $ sbv2 aggregator:lease:print 8SXvChNYFhRq4EZuZvnhjrB3jJRQCv4k3P4W6hesH3Ee\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-lease-withdraw-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator lease withdraw [AGGREGATORKEY]")),(0,r.kt)("p",null,"withdraw funds from an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator lease withdraw [AGGREGATORKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--withdrawAddress <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -a, --authority=<value>    keypair delegated as the authority for managing the oracle account\n  -h, --help                 Show CLI help.\n  -k, --keypair=<value>      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n  -s, --silent               suppress cli prompts\n  -u, --rpcUrl=<value>       alternate RPC url\n  -v, --verbose              log everything\n  --amount=<value>           (required) token amount to withdraw from lease account. If decimals provided, amount will\n                             be normalized to raw tokenAmount\n  --commitment=<option>      [default: confirmed] transaction commitment level to use\n                             <options: confirmed|finalized|processed>\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n  --programId=<value>        alternative Switchboard program ID to interact with\n  --withdrawAddress=<value>  tokenAccount to withdraw to. If not provided, payer associated token account will be used\n\nDESCRIPTION\n  withdraw funds from an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator lease withdraw\n\nEXAMPLES\n  $ sbv2 aggregator:lease:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-lock-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator lock [AGGREGATORKEY]")),(0,r.kt)("p",null,"lock an aggregator's configuration and prevent further changes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator lock [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  lock an aggregator's configuration and prevent further changes\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-permission-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator permission create [AGGREGATORKEY]")),(0,r.kt)("p",null,"create a permission account for an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator permission create [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a permission account for an aggregator\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-permission-print-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator permission print [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the permission account associated with a Switchboard aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator permission print [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 solana aggregator permission print\n  $ sbv2 solana aggregator print permission\n\nEXAMPLES\n  $ sbv2 aggregator:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-print-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator print [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator print [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [--json] [--jobs] [-o]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -h, --help               Show CLI help.\n  -o, --oraclePubkeysData  print the assigned oracles for the current round\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --jobs                   output job definitions\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print the deserialized Switchboard aggregator account\n\nALIASES\n  $ sbv2 solana aggregator print\n\nEXAMPLES\n  $ sbv2 aggregator:print GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-print-history-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator print history [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the history buffer associated with an aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator print history [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the history buffer associated with an aggregator account\n\nALIASES\n  $ sbv2 solana aggregator history print\n  $ sbv2 solana aggregator print history\n\nEXAMPLES\n  $ sbv2 aggregator:print:history 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-print-lease-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator print lease [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the lease account associated with a Switchboard aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator print lease [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the lease account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 solana aggregator lease print\n  $ sbv2 solana aggregator print lease\n\nEXAMPLES\n  $ sbv2 aggregator:lease:print 8SXvChNYFhRq4EZuZvnhjrB3jJRQCv4k3P4W6hesH3Ee\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-print-permission-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator print permission [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the permission account associated with a Switchboard aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator print permission [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 solana aggregator permission print\n  $ sbv2 solana aggregator print permission\n\nEXAMPLES\n  $ sbv2 aggregator:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-remove-job-aggregatorkey-jobkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator remove job [AGGREGATORKEY] [JOBKEY]")),(0,r.kt)("p",null,"remove a switchboard job account from an aggregator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator remove job [AGGREGATORKEY] [JOBKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  JOBKEY         public key of an existing job account to remove from an aggregator\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  remove a switchboard job account from an aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:remove:job\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-save-history-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator save history [AGGREGATORKEY]")),(0,r.kt)("p",null,"request a new aggregator result from a set of oracles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator save history [AGGREGATORKEY] -f <value> [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [--force] [--json] [--csv]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -f, --outputFile=<value>  (required) output file to save aggregator pubkeys to\n  -h, --help                Show CLI help.\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --csv                     output aggregator accounts in csv format\n  --force                   overwrite output file if exists\n  --json                    output aggregator accounts in json format\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new aggregator result from a set of oracles\n\nEXAMPLES\n  $ sbv2 aggregator:save:history --outputFile ../aggregator-history.json --csv\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set [AGGREGATORKEY]")),(0,r.kt)("p",null,"set an aggregator's config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>] [--forceReportPeriod <value>] [--minJobs\n    <value>] [--minOracles <value>] [--newQueue <value>] [--updateInterval <value>] [--varianceThreshold <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -a, --authority=<value>      alternate keypair that is the authority for the aggregator\n  -h, --help                   Show CLI help.\n  -k, --keypair=<value>        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --commitment=<option>        [default: confirmed] transaction commitment level to use\n                               <options: confirmed|finalized|processed>\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --newQueue=<value>           public key of the new oracle queue\n  --programId=<value>          alternative Switchboard program ID to interact with\n  --updateInterval=<value>     set an aggregator's minimum update delay\n  --varianceThreshold=<value>  percentage change between a previous accepted result and the next round before an oracle\n                               reports a value on-chain. Used to conserve lease cost during low volatility\n\nDESCRIPTION\n  set an aggregator's config\n\nALIASES\n  $ sbv2 solana set aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:set GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --updateInterval 300 --minOracles 3 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-authority-aggregatorkey-newauthority"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set authority [AGGREGATORKEY] [NEWAUTHORITY]")),(0,r.kt)("p",null,"set an aggregator's authority"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set authority [AGGREGATORKEY] [NEWAUTHORITY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  NEWAUTHORITY   keypair path of new authority\n\nFLAGS\n  -a, --currentAuthority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help                      Show CLI help.\n  -k, --keypair=<value>           keypair that will pay for onchain transactions. defaults to new account authority if\n                                  no alternate authority provided\n  -s, --silent                    suppress cli prompts\n  -u, --rpcUrl=<value>            alternate RPC url\n  -v, --verbose                   log everything\n  --commitment=<option>           [default: confirmed] transaction commitment level to use\n                                  <options: confirmed|finalized|processed>\n  --mainnetBeta                   WARNING: use mainnet-beta solana cluster\n  --programId=<value>             alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's authority\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-batchsize-aggregatorkey-batchsize"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set batchSize [AGGREGATORKEY] BATCHSIZE")),(0,r.kt)("p",null,"set an aggregator's batch size"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set batchSize [AGGREGATORKEY] [BATCHSIZE] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  BATCHSIZE      number of oracles requested for each open round call\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's batch size\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-forcereport-aggregatorkey-forcereportperiod"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set forceReport [AGGREGATORKEY] [FORCEREPORTPERIOD]")),(0,r.kt)("p",null,"set an aggregator's force report period"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set forceReport [AGGREGATORKEY] [FORCEREPORTPERIOD] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY      public key of the aggregator\n  FORCEREPORTPERIOD  Number of seconds for which, even if the variance threshold is not passed, accept new responses\n                     from oracles.\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's force report period\n\nALIASES\n  $ sbv2 solana aggregator set forceReport\n\nEXAMPLES\n  $ sbv2 aggregator:set:forceReportPeriod GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 300 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-forcereportperiod-aggregatorkey-forcereportperiod"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set forceReportPeriod [AGGREGATORKEY] [FORCEREPORTPERIOD]")),(0,r.kt)("p",null,"set an aggregator's force report period"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set forceReportPeriod [AGGREGATORKEY] [FORCEREPORTPERIOD] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY      public key of the aggregator\n  FORCEREPORTPERIOD  Number of seconds for which, even if the variance threshold is not passed, accept new responses\n                     from oracles.\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's force report period\n\nALIASES\n  $ sbv2 solana aggregator set forceReport\n\nEXAMPLES\n  $ sbv2 aggregator:set:forceReportPeriod GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 300 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-history-aggregatorkey-size"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set history [AGGREGATORKEY] [SIZE]")),(0,r.kt)("p",null,"set an aggregator's history buffer account to record the last N accepted results"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set history [AGGREGATORKEY] [SIZE] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to add to a crank\n  SIZE           size of history buffer\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's history buffer account to record the last N accepted results\n\nALIASES\n  $ sbv2 solana aggregator add history\n\nEXAMPLES\n  $ sbv2 aggregator:set:history GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 10000 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-minjobs-aggregatorkey-minjobresults"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set minJobs [AGGREGATORKEY] [MINJOBRESULTS]")),(0,r.kt)("p",null,"set an aggregator's minimum number of jobs before an oracle responds"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set minJobs [AGGREGATORKEY] [MINJOBRESULTS] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n  MINJOBRESULTS  number of jobs that must respond before an oracle responds\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's minimum number of jobs before an oracle responds\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-minoracles-aggregatorkey-minoracleresults"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set minOracles [AGGREGATORKEY] [MINORACLERESULTS]")),(0,r.kt)("p",null,"set an aggregator's minimum number of oracles that must respond before a result is accepted on-chain"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set minOracles [AGGREGATORKEY] [MINORACLERESULTS] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY     public key of the aggregator account\n  MINORACLERESULTS  number of oracles that must respond before a value is accepted on-chain\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's minimum number of oracles that must respond before a result is accepted on-chain\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-queue-aggregatorkey-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set queue [AGGREGATORKEY] [QUEUEKEY]")),(0,r.kt)("p",null,"set an aggregator's oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set queue [AGGREGATORKEY] [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator\n  QUEUEKEY       public key of the oracle queue\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's oracle queue\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-updateinterval-aggregatorkey-updateinterval"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set updateInterval [AGGREGATORKEY] [UPDATEINTERVAL]")),(0,r.kt)("p",null,"set an aggregator's minimum update delay"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set updateInterval [AGGREGATORKEY] [UPDATEINTERVAL] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY   public key of the aggregator account\n  UPDATEINTERVAL  set an aggregator's minimum update delay\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's minimum update delay\n\nEXAMPLES\n  $ sbv2 aggregator:set:updateInterval GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 60 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-variance-aggregatorkey-variancethreshold"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set variance [AGGREGATORKEY] [VARIANCETHRESHOLD]")),(0,r.kt)("p",null,"set an aggregator's variance threshold"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set variance [AGGREGATORKEY] [VARIANCETHRESHOLD] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY      public key of the aggregator\n  VARIANCETHRESHOLD  percentage change between a previous accepted result and the next round before an oracle reports a\n                     value on-chain. Used to conserve lease cost during low volatility\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's variance threshold\n\nALIASES\n  $ sbv2 solana aggregator set variance\n\nEXAMPLES\n  $ sbv2 aggregator:set:varianceThreshold GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 0.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-set-variancethreshold-aggregatorkey-variancethreshold"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator set varianceThreshold [AGGREGATORKEY] [VARIANCETHRESHOLD]")),(0,r.kt)("p",null,"set an aggregator's variance threshold"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator set varianceThreshold [AGGREGATORKEY] [VARIANCETHRESHOLD] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY      public key of the aggregator\n  VARIANCETHRESHOLD  percentage change between a previous accepted result and the next round before an oracle reports a\n                     value on-chain. Used to conserve lease cost during low volatility\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an aggregator's variance threshold\n\nALIASES\n  $ sbv2 solana aggregator set variance\n\nEXAMPLES\n  $ sbv2 aggregator:set:varianceThreshold GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR 0.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-update-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator update [AGGREGATORKEY]")),(0,r.kt)("p",null,"request a new aggregator result from a set of oracles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator update [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new aggregator result from a set of oracles\n\nEXAMPLES\n  $ sbv2 aggregator:update J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-aggregator-watch-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana aggregator watch [AGGREGATORKEY]")),(0,r.kt)("p",null,"watch an aggregator for a new value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana aggregator watch [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch an aggregator for a new value\n\nALIASES\n  $ sbv2 solana aggregator watch\n\nEXAMPLES\n  $ sbv2 watch:aggregator J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa\n")),(0,r.kt)("h2",{id:"sbv2-solana-anchor-test"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana anchor test")),(0,r.kt)("p",null,"run anchor test and a switchboard oracle in parallel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana anchor test [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [-d <value>] [--oracleKey <value>] [--nodeImage <value>] [--arm] [-t\n    <value>]\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -k, --keypair=<value>         keypair that will pay for onchain transactions. defaults to new account authority if no\n                                alternate authority provided\n  -s, --silent                  suppress docker logging\n  -t, --timeout=<value>         [default: 120] number of seconds before timing out\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --arm                         apple silicon needs to use a docker image for linux/arm64\n  --commitment=<option>         [default: confirmed] transaction commitment level to use\n                                <options: confirmed|finalized|processed>\n  --mainnetBeta                 WARNING: use mainnet-beta solana cluster\n  --nodeImage=<value>           [default: dev-v2-10-03-22a] public key of the oracle to start-up\n  --oracleKey=<value>           public key of the oracle to start-up\n  --programId=<value>           alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  run anchor test and a switchboard oracle in parallel\n")),(0,r.kt)("h2",{id:"sbv2-solana-buffer-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana buffer create [QUEUEKEY]")),(0,r.kt)("p",null,"create a buffer relayer account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana buffer create [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [-a <value>] [-n <value>] [--minUpdateDelaySeconds <value>]\n    [--jobDefinition <value> | --jobKey <value>]\n\nARGUMENTS\n  QUEUEKEY  oracle queue to create BufferRelayer account on\n\nFLAGS\n  -a, --authority=<value>          alternate keypair that will be the aggregator authority\n  -h, --help                       Show CLI help.\n  -k, --keypair=<value>            keypair that will pay for onchain transactions. defaults to new account authority if\n                                   no alternate authority provided\n  -n, --name=<value>               name of the buffer account\n  -s, --silent                     suppress cli prompts\n  -u, --rpcUrl=<value>             alternate RPC url\n  -v, --verbose                    log everything\n  --commitment=<option>            [default: confirmed] transaction commitment level to use\n                                   <options: confirmed|finalized|processed>\n  --jobDefinition=<value>          filesystem path to job definition\n  --jobKey=<value>                 public key of existing job account\n  --mainnetBeta                    WARNING: use mainnet-beta solana cluster\n  --minUpdateDelaySeconds=<value>  [default: 30] minimum number of seconds between update calls\n  --programId=<value>              alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a buffer relayer account\n")),(0,r.kt)("h2",{id:"sbv2-solana-buffer-print-bufferrelayerkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana buffer print [BUFFERRELAYERKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard buffer relayer account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana buffer print [BUFFERRELAYERKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [--job]\n\nARGUMENTS\n  BUFFERRELAYERKEY  public key of the buffer relayer account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --job                  output job definitions\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard buffer relayer account\n\nALIASES\n  $ sbv2 solana buffer print\n\nEXAMPLES\n  $ sbv2 buffer:print 23GvzENjwgqqaLejsAtAWgTkSzWjSMo2LUYTAETT8URp\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-add-aggregator-crankkey-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank add aggregator [CRANKKEY] [AGGREGATORKEY]")),(0,r.kt)("p",null,"push an aggregator onto a crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank add aggregator [CRANKKEY] [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  CRANKKEY       public key of the crank\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  push an aggregator onto a crank\n\nALIASES\n  $ sbv2 solana aggregator add crank\n  $ sbv2 solana crank add aggregator\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-cmp-crankkey1-crankkey2"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank cmp [CRANKKEY1] [CRANKKEY2]")),(0,r.kt)("p",null,"write the crank account definitions to a JSON file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank cmp [CRANKKEY1] [CRANKKEY2] -f <value> [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [--force]\n\nARGUMENTS\n  CRANKKEY1  public key of the crank\n  CRANKKEY2  public key of the crank\n\nFLAGS\n  -f, --outputFile=<value>  (required) output file to save aggregator pubkeys to\n  -h, --help                Show CLI help.\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --force                   overwrite output file if exists\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  write the crank account definitions to a JSON file\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank create [QUEUEKEY]")),(0,r.kt)("p",null,"add a crank to an existing oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank create [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [-n <value>] [-r <value>] [--queueAuthority <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create a crank on\n\nFLAGS\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -n, --name=<value>        name of the crank for easier identification\n  -r, --maxRows=<value>     [default: 100] maximum number of rows a crank can support\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n\nDESCRIPTION\n  add a crank to an existing oracle queue\n\nEXAMPLES\n  $ sbv2 queue:add:crank 5aYuxRdcB9GpWrEXVMBQp2R5uf94uoBiFdMEBwcmHuU4 -k ../authority-keypair.json -n crank-1\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-list-crankkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank list [CRANKKEY]")),(0,r.kt)("p",null,"list the pubkeys currently on the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank list [CRANKKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--force] [-f <value>]\n\nARGUMENTS\n  CRANKKEY  public key of the crank\n\nFLAGS\n  -f, --outputFile=<value>  output file to save aggregator pubkeys to\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --force                   overwrite output file if exists\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  list the pubkeys currently on the crank\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-pop-crankkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank pop [CRANKKEY]")),(0,r.kt)("p",null,"pop the crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank pop [CRANKKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  CRANKKEY  public key of the crank\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  pop the crank\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-print-crankkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank print [CRANKKEY]")),(0,r.kt)("p",null,"print deserialized switchboard crank account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank print [CRANKKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  CRANKKEY  public key of the crank account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  print deserialized switchboard crank account\n\nALIASES\n  $ sbv2 solana crank print\n\nEXAMPLES\n  $ sbv2 crank:print 85L2cFUvXaeGQ4HrzP8RJEVCL7WvRrXM2msvEmQ82AVr\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-push-crankkey-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank push [CRANKKEY] [AGGREGATORKEY]")),(0,r.kt)("p",null,"push an aggregator onto a crank"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank push [CRANKKEY] [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  CRANKKEY       public key of the crank\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  push an aggregator onto a crank\n\nALIASES\n  $ sbv2 solana aggregator add crank\n  $ sbv2 solana crank add aggregator\n")),(0,r.kt)("h2",{id:"sbv2-solana-crank-turn-crankkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana crank turn [CRANKKEY]")),(0,r.kt)("p",null,"turn the crank and get rewarded if aggregator updates available"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana crank turn [CRANKKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  CRANKKEY  public key of the crank to turn\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  turn the crank and get rewarded if aggregator updates available\n\nEXAMPLES\n  $ sbv2 crank:turn 85L2cFUvXaeGQ4HrzP8RJEVCL7WvRrXM2msvEmQ82AVr --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-job-create-jobdefinition"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana job create JOBDEFINITION")),(0,r.kt)("p",null,"create a job account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana job create [JOBDEFINITION] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>] [-n <value>]\n\nARGUMENTS\n  JOBDEFINITION  filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the account authority\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -n, --name=<value>       name of the buffer account\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a job account\n")),(0,r.kt)("h2",{id:"sbv2-solana-job-print-jobkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana job print [JOBKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard job account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana job print [JOBKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  JOBKEY  public key of the job account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard job account\n\nALIASES\n  $ sbv2 solana job print\n\nEXAMPLES\n  $ sbv2 job:print SzTvFZLz3hwjZFMwVWzuEnr1oUF6qyvXwXCvsqf7qeA\n")),(0,r.kt)("h2",{id:"sbv2-solana-json-create-aggregator-definitionfile"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana json create aggregator [DEFINITIONFILE]")),(0,r.kt)("p",null,"create an aggregator from a json file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana json create aggregator [DEFINITIONFILE] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-q <value>] [-a <value>]\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of queue definition json file\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the authority for the aggregator\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -q, --queueKey=<value>   public key of the oracle queue to create aggregator for\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create an aggregator from a json file\n\nALIASES\n  $ sbv2 solana json create aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:create:json examples/aggregator.json --keypair ../payer-keypair.json --queueKey GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --outputFile aggregator.schema.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-lease-create-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease create [AGGREGATORKEY]")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease create [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [--amount <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       token amount to load into the lease escrow. If decimals provided, amount will be normalized to\n                         raw tokenAmount\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator lease create\n\nEXAMPLES\n  $ sbv2 lease:create GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.5 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-lease-extend-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease extend [AGGREGATORKEY]")),(0,r.kt)("p",null,"fund and re-enable an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease extend [AGGREGATORKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) token amount to load into the lease escrow. If decimals provided, amount will be\n                         normalized to raw tokenAmount\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  fund and re-enable an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator lease extend\n\nEXAMPLES\n  $ sbv2 aggregator:lease:extend GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-lease-withdraw-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana lease withdraw [AGGREGATORKEY]")),(0,r.kt)("p",null,"withdraw funds from an aggregator lease"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana lease withdraw [AGGREGATORKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--withdrawAddress <value>] [-a <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator to extend a lease for\n\nFLAGS\n  -a, --authority=<value>    keypair delegated as the authority for managing the oracle account\n  -h, --help                 Show CLI help.\n  -k, --keypair=<value>      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n  -s, --silent               suppress cli prompts\n  -u, --rpcUrl=<value>       alternate RPC url\n  -v, --verbose              log everything\n  --amount=<value>           (required) token amount to withdraw from lease account. If decimals provided, amount will\n                             be normalized to raw tokenAmount\n  --commitment=<option>      [default: confirmed] transaction commitment level to use\n                             <options: confirmed|finalized|processed>\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n  --programId=<value>        alternative Switchboard program ID to interact with\n  --withdrawAddress=<value>  tokenAccount to withdraw to. If not provided, payer associated token account will be used\n\nDESCRIPTION\n  withdraw funds from an aggregator lease\n\nALIASES\n  $ sbv2 solana aggregator lease withdraw\n\nEXAMPLES\n  $ sbv2 aggregator:lease:withdraw GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --amount 1.1 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-localnet-env"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana localnet env")),(0,r.kt)("p",null,"create a localnet switchboard environment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana localnet env [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--force] [-o <value>]\n\nFLAGS\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -o, --outputDir=<value>  output directory for scripts\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --force                  overwrite output file if existing\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a localnet switchboard environment\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-balance-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle balance [ORACLEKEY]")),(0,r.kt)("p",null,"check an oracles token balance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle balance [ORACLEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle to check token balance\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  check an oracles token balance\n\nEXAMPLES\n  $ sbv2 oracle:balance 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle create [QUEUEKEY]")),(0,r.kt)("p",null,"create a new oracle account for a given queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle create [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [-n <value>] [-a <value>] [--enable] [--queueAuthority <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to join\n\nFLAGS\n  -a, --authority=<value>   keypair to delegate authority to for managing the oracle account\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -n, --name=<value>        name of the oracle for easier identification\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enable                  enable oracle heartbeat permissions\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n\nDESCRIPTION\n  create a new oracle account for a given queue\n\nEXAMPLES\n  $ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --keypair ../payer-and-authority-keypair.json\n\n  $ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --name=oracle-1  --keypair ../payer-and-authority-keypair.json\n\n  $ sbv2 oracle:create GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U --keypair ../payer-keypair.json --authority ../oracle-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-deposit-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle deposit [ORACLEKEY]")),(0,r.kt)("p",null,"deposit tokens into an oracle's token wallet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle deposit [ORACLEKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle to deposit funds into\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --amount=<value>       (required) token amount to load into the oracle escrow. If decimals provided, amount will be\n                         normalized to raw tokenAmount\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  deposit tokens into an oracle's token wallet\n\nEXAMPLES\n  $ sbv2 oracle:deposit 6kPsQoufdugtHLjM4fH7Z2fNv7jLt5pgvwKHt5JvRhQ6 2500 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-nonce-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle nonce [ORACLEKEY]")),(0,r.kt)("p",null,"view an oracles nonce accounts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle nonce [ORACLEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle to check token balance\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  view an oracles nonce accounts\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-permission-create-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle permission create [ORACLEKEY]")),(0,r.kt)("p",null,"create a permission account for an oracle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle permission create [ORACLEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a permission account for an oracle\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-permission-print-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle permission print [ORACLEKEY]")),(0,r.kt)("p",null,"Print the permission account associated with a Switchboard oracle account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle permission print [ORACLEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard oracle account\n\nALIASES\n  $ sbv2 solana oracle permission print\n  $ sbv2 solana oracle print permission\n\nEXAMPLES\n  $ sbv2 oracle:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-print-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle print [ORACLEKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard oracle account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle print [ORACLEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard oracle account\n\nALIASES\n  $ sbv2 solana oracle print\n\nEXAMPLES\n  $ sbv2 oracle:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-print-permission-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle print permission [ORACLEKEY]")),(0,r.kt)("p",null,"Print the permission account associated with a Switchboard oracle account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle print permission [ORACLEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard oracle account\n\nALIASES\n  $ sbv2 solana oracle permission print\n  $ sbv2 solana oracle print permission\n\nEXAMPLES\n  $ sbv2 oracle:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-up-oracleaddress"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle up [ORACLEADDRESS]")),(0,r.kt)("p",null,"start a solana docker oracle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle up [ORACLEADDRESS] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-d <value>] [--nodeImage <value>] [--arm]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -k, --keypair=<value>         keypair that will pay for onchain transactions. defaults to new account authority if no\n                                alternate authority provided\n  -s, --silent                  suppress docker logging\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --arm                         apple silicon needs to use a docker image for linux/arm64\n  --commitment=<option>         [default: confirmed] transaction commitment level to use\n                                <options: confirmed|finalized|processed>\n  --mainnetBeta                 WARNING: use mainnet-beta solana cluster\n  --nodeImage=<value>           [default: dev-v2-10-03-22a] public key of the oracle to start-up\n  --programId=<value>           alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  start a solana docker oracle\n")),(0,r.kt)("h2",{id:"sbv2-solana-oracle-withdraw-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana oracle withdraw [ORACLEKEY]")),(0,r.kt)("p",null,"withdraw tokens from an oracle's token wallet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana oracle withdraw [ORACLEKEY] --amount <value> [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [-f] [-w <value>] [-a <value>]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle to withdraw from\n\nFLAGS\n  -a, --authority=<value>        keypair delegated as the authority for managing the oracle account\n  -f, --force                    skip minStake balance check. your oracle may be removed from the queue\n  -h, --help                     Show CLI help.\n  -k, --keypair=<value>          keypair that will pay for onchain transactions. defaults to new account authority if no\n                                 alternate authority provided\n  -s, --silent                   suppress cli prompts\n  -u, --rpcUrl=<value>           alternate RPC url\n  -v, --verbose                  log everything\n  -w, --withdrawAccount=<value>  optional solana pubkey or keypair filesystem path to withdraw funds to. default\n                                 destination is oracle authority's token wallet\n  --amount=<value>               (required) token amount to withdraw from oracle escrow. If decimals provided, amount\n                                 will be normalized to raw tokenAmount\n  --commitment=<option>          [default: confirmed] transaction commitment level to use\n                                 <options: confirmed|finalized|processed>\n  --mainnetBeta                  WARNING: use mainnet-beta solana cluster\n  --programId=<value>            alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  withdraw tokens from an oracle's token wallet\n\nEXAMPLES\n  $ sbv2 oracle:withdraw 6kPsQoufdugtHLjM4fH7Z2fNv7jLt5pgvwKHt5JvRhQ6 2500 --keypair ../oracle-keypair.json\n\n  $ sbv2 oracle:withdraw 6kPsQoufdugtHLjM4fH7Z2fNv7jLt5pgvwKHt5JvRhQ6 2500 --keypair ../payer-keypair.json --authority ../oracle-keypair.json -w ByJs8E29jxvqf2KFLwfyiE2gUh5fivaS7aShcRMAsnzg\n")),(0,r.kt)("h2",{id:"sbv2-solana-permission-create-granter-grantee"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission create [GRANTER] [GRANTEE]")),(0,r.kt)("p",null,"create a permission account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission create [GRANTER] [GRANTEE] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  GRANTER  public key of the account granting permission\n  GRANTEE  public key of the account getting permissions\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a permission account\n")),(0,r.kt)("h2",{id:"sbv2-solana-permission-print-permissionkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission print [PERMISSIONKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard permission account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission print [PERMISSIONKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard permission account\n\nALIASES\n  $ sbv2 solana permission print\n\nEXAMPLES\n  $ sbv2 permission:print 94XXM72K2aKu2wcuJaawV8njuGaFZvhy8iKgPxoa1tJk\n")),(0,r.kt)("h2",{id:"sbv2-solana-permission-set-permissionkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana permission set [PERMISSIONKEY]")),(0,r.kt)("p",null,"permit a grantee to use a granters resources"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana permission set [PERMISSIONKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>] [--disable]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the granters authority\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --disable                disable permissions\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  permit a grantee to use a granters resources\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-publickey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print [PUBLICKEY]")),(0,r.kt)("p",null,"find a switchboard account by public key for a given cluster"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print [PUBLICKEY] [-h] [-v]\n\nARGUMENTS\n  PUBLICKEY  public key of a switchboard account to lookup\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose  log everything\n\nDESCRIPTION\n  find a switchboard account by public key for a given cluster\n\nEXAMPLES\n  $ sbv2 print GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-aggregator-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print aggregator [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print aggregator [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [--json] [--jobs] [-o]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -h, --help               Show CLI help.\n  -o, --oraclePubkeysData  print the assigned oracles for the current round\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --jobs                   output job definitions\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print the deserialized Switchboard aggregator account\n\nALIASES\n  $ sbv2 solana aggregator print\n\nEXAMPLES\n  $ sbv2 aggregator:print GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-aggregator-history-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print aggregator history [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the history buffer associated with an aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print aggregator history [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the history buffer associated with an aggregator account\n\nALIASES\n  $ sbv2 solana aggregator history print\n  $ sbv2 solana aggregator print history\n\nEXAMPLES\n  $ sbv2 aggregator:print:history 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-aggregator-lease-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print aggregator lease [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the lease account associated with a Switchboard aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print aggregator lease [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the lease account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 solana aggregator lease print\n  $ sbv2 solana aggregator print lease\n\nEXAMPLES\n  $ sbv2 aggregator:lease:print 8SXvChNYFhRq4EZuZvnhjrB3jJRQCv4k3P4W6hesH3Ee\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-aggregator-permission-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print aggregator permission [AGGREGATORKEY]")),(0,r.kt)("p",null,"Print the permission account associated with a Switchboard aggregator account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print aggregator permission [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard aggregator account\n\nALIASES\n  $ sbv2 solana aggregator permission print\n  $ sbv2 solana aggregator print permission\n\nEXAMPLES\n  $ sbv2 aggregator:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-buffer-bufferrelayerkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print buffer [BUFFERRELAYERKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard buffer relayer account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print buffer [BUFFERRELAYERKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [--job]\n\nARGUMENTS\n  BUFFERRELAYERKEY  public key of the buffer relayer account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --job                  output job definitions\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard buffer relayer account\n\nALIASES\n  $ sbv2 solana buffer print\n\nEXAMPLES\n  $ sbv2 buffer:print 23GvzENjwgqqaLejsAtAWgTkSzWjSMo2LUYTAETT8URp\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-crank-crankkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print crank [CRANKKEY]")),(0,r.kt)("p",null,"print deserialized switchboard crank account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print crank [CRANKKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  CRANKKEY  public key of the crank account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  print deserialized switchboard crank account\n\nALIASES\n  $ sbv2 solana crank print\n\nEXAMPLES\n  $ sbv2 crank:print 85L2cFUvXaeGQ4HrzP8RJEVCL7WvRrXM2msvEmQ82AVr\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-job-jobkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print job [JOBKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard job account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print job [JOBKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  JOBKEY  public key of the job account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard job account\n\nALIASES\n  $ sbv2 solana job print\n\nEXAMPLES\n  $ sbv2 job:print SzTvFZLz3hwjZFMwVWzuEnr1oUF6qyvXwXCvsqf7qeA\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-oracle-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print oracle [ORACLEKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard oracle account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print oracle [ORACLEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard oracle account\n\nALIASES\n  $ sbv2 solana oracle print\n\nEXAMPLES\n  $ sbv2 oracle:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-oracle-permission-oraclekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print oracle permission [ORACLEKEY]")),(0,r.kt)("p",null,"Print the permission account associated with a Switchboard oracle account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print oracle permission [ORACLEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  ORACLEKEY  public key of the oracle account to fetch permission account and deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the permission account associated with a Switchboard oracle account\n\nALIASES\n  $ sbv2 solana oracle permission print\n  $ sbv2 solana oracle print permission\n\nEXAMPLES\n  $ sbv2 oracle:permission:print 9CmLriMhykZ8xAoNTSHjHbk6SkuMhie1NCZn9P6LCuZ4\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-permission-permissionkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print permission [PERMISSIONKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard permission account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print permission [PERMISSIONKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  PERMISSIONKEY  public key of the permission account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard permission account\n\nALIASES\n  $ sbv2 solana permission print\n\nEXAMPLES\n  $ sbv2 permission:print 94XXM72K2aKu2wcuJaawV8njuGaFZvhy8iKgPxoa1tJk\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-program"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print program")),(0,r.kt)("p",null,"print the deserialized switchboard program state account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print program [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  print the deserialized switchboard program state account\n\nALIASES\n  $ sbv2 solana program print\n\nEXAMPLES\n  $ sbv2 program:print\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-queue-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print queue [QUEUEKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard oraclequeue account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print queue [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--oracles]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --oracles              output oracles that are heartbeating on the queue\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard oraclequeue account\n\nALIASES\n  $ sbv2 solana queue print\n\nEXAMPLES\n  $ sbv2 solana queue print GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U\n")),(0,r.kt)("h2",{id:"sbv2-solana-print-vrf-vrfkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana print vrf [VRFKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard VRF account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana print vrf [VRFKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print the deserialized Switchboard VRF account\n\nALIASES\n  $ sbv2 solana vrf print\n\nEXAMPLES\n  $ sbv2 solana vrf print [VRF_PUBKEY]\n")),(0,r.kt)("h2",{id:"sbv2-solana-program-print"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana program print")),(0,r.kt)("p",null,"print the deserialized switchboard program state account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana program print [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  print the deserialized switchboard program state account\n\nALIASES\n  $ sbv2 solana program print\n\nEXAMPLES\n  $ sbv2 program:print\n")),(0,r.kt)("h2",{id:"sbv2-solana-queue-create"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana queue create")),(0,r.kt)("p",null,"create a personal oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana queue create [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--force] [-a <value>] [-n <value>] [--minStake <value>] [-r <value>]\n    [-c <value>] [--oracleTimeout <value>] [-o <value>] [--queueSize <value>] [--unpermissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers] [-f <value>]\n\nFLAGS\n  -a, --authority=<value>   keypair to delegate authority to for creating permissions targeted at the queue\n  -c, --crankSize=<value>   [default: 100] size of the crank\n  -f, --outputFile=<value>  output queue schema to a json file\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -n, --name=<value>        [default: Custom Queue] name of the queue for easier identification\n  -o, --numOracles=<value>  number of oracles to add to the queue\n  -r, --reward=<value>      [default: 0] oracle rewards for successfully responding to an update request\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enableBufferRelayers    enable oracles to fulfill buffer relayer requests\n  --force                   overwrite output file if existing\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --minStake=<value>        [default: 0] minimum stake required by an oracle to join the queue\n  --oracleTimeout=<value>   [default: 180] number of oracles to add to the queue\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueSize=<value>       [default: 100] maximum number of oracles the queue can support\n  --unpermissionedFeeds     permit unpermissioned feeds\n  --unpermissionedVrf       permit unpermissioned VRF accounts\n\nDESCRIPTION\n  create a personal oracle queue\n")),(0,r.kt)("h2",{id:"sbv2-solana-queue-print-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana queue print [QUEUEKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard oraclequeue account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana queue print [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--oracles]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --oracles              output oracles that are heartbeating on the queue\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard oraclequeue account\n\nALIASES\n  $ sbv2 solana queue print\n\nEXAMPLES\n  $ sbv2 solana queue print GhYg3R1V6DmJbwuc57qZeoYG6gUuvCotUF1zU3WCj98U\n")),(0,r.kt)("h2",{id:"sbv2-solana-queue-set-rewards-queuekey-rewards"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana queue set rewards [QUEUEKEY] [REWARDS]")),(0,r.kt)("p",null,"set an oracle queue's rewards"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana queue set rewards [QUEUEKEY] [REWARDS] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue\n  REWARDS   token rewards for each assigned oracle per open round call\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for oracle queue\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set an oracle queue's rewards\n")),(0,r.kt)("h2",{id:"sbv2-solana-queue-set-vrf-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana queue set vrf [QUEUEKEY]")),(0,r.kt)("p",null,"set unpermissionedVrfEnabled"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana queue set vrf [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [-a <value>] [--disable]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create a crank on\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that is the authority for oracle queue\n  -h, --help               Show CLI help.\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --commitment=<option>    [default: confirmed] transaction commitment level to use\n                           <options: confirmed|finalized|processed>\n  --disable                disable unpermissionedVrfEnabled\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  set unpermissionedVrfEnabled\n")),(0,r.kt)("h2",{id:"sbv2-solana-set-aggregator-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana set aggregator [AGGREGATORKEY]")),(0,r.kt)("p",null,"set an aggregator's config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana set aggregator [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed] [-k <value>] [-a <value>] [--forceReportPeriod <value>] [--minJobs\n    <value>] [--minOracles <value>] [--newQueue <value>] [--updateInterval <value>] [--varianceThreshold <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -a, --authority=<value>      alternate keypair that is the authority for the aggregator\n  -h, --help                   Show CLI help.\n  -k, --keypair=<value>        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n  -s, --silent                 suppress cli prompts\n  -u, --rpcUrl=<value>         alternate RPC url\n  -v, --verbose                log everything\n  --commitment=<option>        [default: confirmed] transaction commitment level to use\n                               <options: confirmed|finalized|processed>\n  --forceReportPeriod=<value>  Number of seconds for which, even if the variance threshold is not passed, accept new\n                               responses from oracles.\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n  --minJobs=<value>            number of jobs that must respond before an oracle responds\n  --minOracles=<value>         number of oracles that must respond before a value is accepted on-chain\n  --newQueue=<value>           public key of the new oracle queue\n  --programId=<value>          alternative Switchboard program ID to interact with\n  --updateInterval=<value>     set an aggregator's minimum update delay\n  --varianceThreshold=<value>  percentage change between a previous accepted result and the next round before an oracle\n                               reports a value on-chain. Used to conserve lease cost during low volatility\n\nDESCRIPTION\n  set an aggregator's config\n\nALIASES\n  $ sbv2 solana set aggregator\n\nEXAMPLES\n  $ sbv2 aggregator:set GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR --updateInterval 300 --minOracles 3 --keypair ../payer-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-vrf-create-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf create [QUEUEKEY]")),(0,r.kt)("p",null,"create a Switchboard VRF Account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'USAGE\n  $ sbv2 solana vrf create [QUEUEKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--vrfKeypair <value>] [--enable] [--authority <value>]\n    [--queueAuthority <value>] [--callback <value> | --accountMeta <value> | --callbackPid <value> | --ixData <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create VRF account for\n\nFLAGS\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --accountMeta=<value>...  account metas for VRF callback\n  --authority=<value>       alternative keypair to use for VRF authority\n  --callback=<value>        filesystem path to callback json\n  --callbackPid=<value>     callback program ID\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enable                  enable vrf permissions\n  --ixData=<value>          serialized instruction data in bytes\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n  --vrfKeypair=<value>      filesystem path of existing keypair to use for VRF Account\n\nDESCRIPTION\n  create a Switchboard VRF Account\n\nEXAMPLES\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HpQoFL5kxPp2JCFvjsVTvBd7navx4THLefUU68SXAyd6","isSigner": false,"isWritable": true}" -a "{"pubkey": "8VdBtS8ufkXMCa6Yr9E4KVCfX2inVZVwU4KGg2CL1q7P","isSigner": false,"isWritable": false}"\n\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority oracle-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HYKi1grticLXPe5vqapUHhm976brwqRob8vqRnWMKWL5","isSigner": false,"isWritable": true}" -a "{"pubkey": "6vG9QLMgSvsfjvSpDxWfZ2MGPYGzEYoBxviLG7cr4go","isSigner": false,"isWritable": false}"\n\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callback callback-example.json\n')),(0,r.kt)("h2",{id:"sbv2-solana-vrf-create-example-queuekey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf create example [QUEUEKEY]")),(0,r.kt)("p",null,"create a VRF account for the client example program"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf create example [QUEUEKEY] --vrfPid <value> [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId\n    <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--vrfKeypair <value>] [--enable]\n    [--queueAuthority <value>] [--maxResult <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create VRF account for\n\nFLAGS\n  -h, --help                Show CLI help.\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --commitment=<option>     [default: confirmed] transaction commitment level to use\n                            <options: confirmed|finalized|processed>\n  --enable                  enable vrf permissions\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --maxResult=<value>       [default: 256000] the maximum VRF result\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n  --vrfKeypair=<value>      filesystem path of existing keypair to use for VRF Account\n  --vrfPid=<value>          (required) program ID for the VRF example program\n\nDESCRIPTION\n  create a VRF account for the client example program\n\nEXAMPLES\n  $ sbv2 solana vrf create example 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --vrfPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json\n")),(0,r.kt)("h2",{id:"sbv2-solana-vrf-print-vrfkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf print [VRFKEY]")),(0,r.kt)("p",null,"Print the deserialized Switchboard VRF account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf print [VRFKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [--json]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print the deserialized Switchboard VRF account\n\nALIASES\n  $ sbv2 solana vrf print\n\nEXAMPLES\n  $ sbv2 solana vrf print [VRF_PUBKEY]\n")),(0,r.kt)("h2",{id:"sbv2-solana-vrf-request-vrfkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf request [VRFKEY]")),(0,r.kt)("p",null,"request a new value for a VRF"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'USAGE\n  $ sbv2 solana vrf request [VRFKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--funderAuthority <value>] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account to request randomness for\n\nFLAGS\n  -h, --help                 Show CLI help.\n  -k, --keypair=<value>      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n  -s, --silent               suppress cli prompts\n  -u, --rpcUrl=<value>       alternate RPC url\n  -v, --verbose              log everything\n  --authority=<value>        alternative keypair that is the VRF authority\n  --commitment=<option>      [default: confirmed] transaction commitment level to use\n                             <options: confirmed|finalized|processed>\n  --funderAuthority=<value>  alternative keypair to pay for VRF request\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n  --programId=<value>        alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new value for a VRF\n\nEXAMPLES\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HpQoFL5kxPp2JCFvjsVTvBd7navx4THLefUU68SXAyd6","isSigner": false,"isWritable": true}" -a "{"pubkey": "8VdBtS8ufkXMCa6Yr9E4KVCfX2inVZVwU4KGg2CL1q7P","isSigner": false,"isWritable": false}"\n')),(0,r.kt)("h2",{id:"sbv2-solana-vrf-verify-vrfkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf verify [VRFKEY]")),(0,r.kt)("p",null,"if ready, verify a VRF proof"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf verify [VRFKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account to request randomness for\n\nFLAGS\n  -h, --help             Show CLI help.\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  if ready, verify a VRF proof\n")),(0,r.kt)("h2",{id:"sbv2-solana-vrf-watch-vrfkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana vrf watch [VRFKEY]")),(0,r.kt)("p",null,"watch a vrf for a new value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana vrf watch [VRFKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch a vrf for a new value\n\nALIASES\n  $ sbv2 solana vrf watch\n\nEXAMPLES\n  $ sbv2 vrf:aggregator J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa\n")),(0,r.kt)("h2",{id:"sbv2-solana-watch-aggregator-aggregatorkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana watch aggregator [AGGREGATORKEY]")),(0,r.kt)("p",null,"watch an aggregator for a new value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana watch aggregator [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>]\n    [--commitment confirmed|finalized|processed]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch an aggregator for a new value\n\nALIASES\n  $ sbv2 solana aggregator watch\n\nEXAMPLES\n  $ sbv2 watch:aggregator J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa\n")),(0,r.kt)("h2",{id:"sbv2-solana-watch-vrf-vrfkey"},(0,r.kt)("inlineCode",{parentName:"h2"},"sbv2 solana watch vrf [VRFKEY]")),(0,r.kt)("p",null,"watch a vrf for a new value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 solana watch vrf [VRFKEY] [-h] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to deserialize\n\nFLAGS\n  -h, --help             Show CLI help.\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --commitment=<option>  [default: confirmed] transaction commitment level to use\n                         <options: confirmed|finalized|processed>\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch a vrf for a new value\n\nALIASES\n  $ sbv2 solana vrf watch\n\nEXAMPLES\n  $ sbv2 vrf:aggregator J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa\n")))}l.isMDXComponent=!0},88681:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>A,contentTitle:()=>k,default:()=>R,frontMatter:()=>f,metadata:()=>E,toc:()=>S});var t=n(83117),r=(n(67294),n(3905)),o=n(65488),l=n(85162);const s={toc:[]};function i(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},s,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g @switchboard-xyz/cli^2\n"))),(0,r.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -g @switchboard-xyz/cli^2\n")))))}i.isMDXComponent=!0;const u={toc:[]};function c(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Testnet\nsbv2 config set aptos testnet rpc https://fullnode.testnet.aptoslabs.com/v1\nsbv2 config set aptos testnet default-account ".aptos/config.yaml"\n\n# Devnet\nsbv2 config set aptos devnet rpc https://fullnode.devnet.aptoslabs.com/v1\nsbv2 config set aptos devnet default-account ".aptos/config.yaml"\n')))}c.isMDXComponent=!0;var d=n(66153);const p={toc:[]};function v(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Testnet\nsbv2 config set near testnet rpc https://rpc.testnet.near.org\nsbv2 config set near testnet default-account my-named-account.testnet\n\n# Mainnet\nsbv2 config set near mainnet rpc https://rpc.mainnet.near.org\nsbv2 config set near mainnet default-account my-named-account.near\n")))}v.isMDXComponent=!0;var g=n(53798);const m={toc:[]};function h(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Devnet\nsbv2 config set solana devnet rpc https://devnet.genesysgo.net\nsbv2 config set solana devnet default-account "~/.config/solana/id.json"\n\n# Mainnet\nsbv2 config set solana mainnet-beta rpc https://ssc-dao.genesysgo.net\nsbv2 config set solana mainnet-beta default-account "~/.config/solana/id.json"\n')))}h.isMDXComponent=!0;var b=n(48955);const f={sidebar_position:1,slug:".",title:"Setup"},k=void 0,E={unversionedId:"dev/cli/overview",id:"dev/cli/overview",title:"Setup",description:"Install",source:"@site/docs/dev/cli/overview.mdx",sourceDirName:"dev/cli",slug:"/dev/cli/",permalink:"/dev/cli/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:".",title:"Setup"},sidebar:"dev",previous:{title:"Developer Resources",permalink:"/dev/"},next:{title:"Index",permalink:"/dev/cli/config/print/"}},A={},S=[{value:"Install",id:"install",level:2},{value:"Aptos",id:"aptos",level:2},{value:"Config",id:"config",level:3},{value:"Commands",id:"commands",level:3},{value:"Near",id:"near",level:2},{value:"Config",id:"config-1",level:3},{value:"Commands",id:"commands-1",level:3},{value:"Solana",id:"solana",level:2},{value:"Config",id:"config-2",level:3},{value:"Commands",id:"commands-2",level:3}],N={toc:S};function R(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},N,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)(i,{mdxType:"Install"}),(0,r.kt)("h2",{id:"aptos"},"Aptos"),(0,r.kt)("h3",{id:"config"},"Config"),(0,r.kt)(c,{mdxType:"AptosConfig"}),(0,r.kt)("h3",{id:"commands"},"Commands"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h2",null,"sbv2 aptos")),(0,r.kt)(d.ZP,{mdxType:"AptosCli"})),(0,r.kt)("h2",{id:"near"},"Near"),(0,r.kt)("h3",{id:"config-1"},"Config"),(0,r.kt)(v,{mdxType:"NearConfig"}),(0,r.kt)("h3",{id:"commands-1"},"Commands"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h2",null,"sbv2 near")),(0,r.kt)(g.ZP,{mdxType:"NearCli"})),(0,r.kt)("h2",{id:"solana"},"Solana"),(0,r.kt)("h3",{id:"config-2"},"Config"),(0,r.kt)(h,{mdxType:"SolanaConfig"}),(0,r.kt)("h3",{id:"commands-2"},"Commands"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h2",null,"sbv2 solana")),(0,r.kt)(b.ZP,{mdxType:"SolanaCli"})))}R.isMDXComponent=!0}}]);