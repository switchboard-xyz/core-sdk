"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5236],{54852:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(49231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=u(n),f=r,h=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return n?a.createElement(h,o(o({ref:t},s),{},{components:n})):a.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:r,o[1]=c;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},21185:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(95634),r=(n(49231),n(54852));const i={slug:"contract",title:"Contract Overview"},o=void 0,c={unversionedId:"evm/contract-overview",id:"evm/contract-overview",title:"Contract Overview",description:"The Switchboard EVM contract implements",source:"@site/docs/202-evm/10-contract-overview.mdx",sourceDirName:"202-evm",slug:"/evm/contract",permalink:"/evm/contract",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{slug:"contract",title:"Contract Overview"},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/evm/"},next:{title:"Developer Resources",permalink:"/evm/dev/"}},l={},u=[{value:"Diamond Facets",id:"diamond-facets",level:2},{value:"Admin",id:"admin",level:3},{value:"Attestation Queue",id:"attestation-queue",level:3},{value:"Function",id:"function",level:3},{value:"Function Call",id:"function-call",level:3}],s={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Switchboard EVM contract implements\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2535.md"},"EIP-2535 Diamond Proxy Pattern"),"\nto facilitate a modular contract design allowing each module to be updated and\nmaintained individually. This allows Switchboard's EVM contract to be used\nacross blockchains with different engineering constraints. Each module is a\nfacet that can be added to the contract to give it additional functionality."),(0,r.kt)("p",null,"The Switchboard EVM contract supports an on-chain attestation service where\nuser's can write their own custom functions then have it be executed by an\noff-chain oracle. When the function result is routed on-chain, the generated\nMRENCLAVE measurement is verified on-chain; if the value is allowed, the user's\ncustom contract call is executed, if the value is not allowed, the transaction\nwill revert."),(0,r.kt)("h2",{id:"diamond-facets"},"Diamond Facets"),(0,r.kt)("p",null,"The Switchboard EVM contract supports the following facets:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#admin"},"Admin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#attestation-queue"},"Attestation Queue")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#enclave"},"Enclave")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#function"},"Function")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#function-call"},"Function Call"))),(0,r.kt)("h3",{id:"admin"},"Admin"),(0,r.kt)("p",null,"Manages the admin of the\n",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-2771"},"EIP-2771: Meta Transactions")," interface\nto support third-parties paying for gas fees."),(0,r.kt)("h3",{id:"attestation-queue"},"Attestation Queue"),(0,r.kt)("p",null,"A Switchboard Attestation Queue represents a network of oracles responsible for\nvalidating quotes from TEEs. Every time a switchboard oracle wants to send some\ndata on chain, it generates a signature from your code proving the output came\nfrom the TEE and from a certain Switchboard Function."),(0,r.kt)("p",null,"This signature is sent to one of the Switchboard Attestation Oracles to check\nthis signature is valid. If so, the oracle will then sign off and send a\nresponse transaction on-chain perfermoning some signed action, like submitting a\ntransaction."),(0,r.kt)("p",null,"This pattern is utilized when using a Switchboard Function."),(0,r.kt)("p",null,"When a user's function is triggered to run, it will be launched on a node of the\nattached attestation queue."),(0,r.kt)("p",null,"Once completed, the output will be sent to a secured sub-enclave to verify the\nTEE quote in the enclave. Once verified, this quote verifier will add its\nsignature to the transaction signifying that the quote was properly verified and\nthe transaction output by the funciton will be executed."),(0,r.kt)("h3",{id:"function"},"Function"),(0,r.kt)("p",null,"A Switchboard function is an on-chain representation of a verifiable container\nto run."),(0,r.kt)("p",null,'A user can specify a docker container to run and a "measurement" of the\ncorresponding code that is expected to run. On each function run, this\nmeasurement is verified before any function output is sent to the callback.'),(0,r.kt)("h3",{id:"function-call"},"Function Call"),(0,r.kt)("p",null,"A Switchboard function can also be called with parameters! Say you create a\nfunction to collect weather data for a certain location. You wouldn't want to\nmake a function explicitly for each coordinate you query. In the function call\nflow, your function output is checked against the measurement loaded on chain\nand the parameters the oracle processed are checked against the call on chain so\nboth the input and output of the function is verified."),(0,r.kt)("p",null,"Using a function call you can minimize code you need to write in your function\nwhile keeping execution and verification simple and flexible."))}p.isMDXComponent=!0}}]);