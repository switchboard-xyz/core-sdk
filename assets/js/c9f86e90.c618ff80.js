"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5128],{54852:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(49231);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=o,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(h,i(i({ref:n},u),{},{components:t})):r.createElement(h,i({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},97663:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(95907),o=(t(49231),t(54852));const a={sidebar_position:5,title:"Randomness",description:"Learn how to use Switchboard's Verifiable Random Functions",keywords:["Switchboard","Solana","VRF","randomness","verifiable","proof"]},i=void 0,s={unversionedId:"arch/randomness",id:"arch/randomness",title:"Randomness",description:"Learn how to use Switchboard's Verifiable Random Functions",source:"@site/docs/arch/randomness.mdx",sourceDirName:"arch",slug:"/arch/randomness",permalink:"/arch/randomness",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Randomness",description:"Learn how to use Switchboard's Verifiable Random Functions",keywords:["Switchboard","Solana","VRF","randomness","verifiable","proof"]},sidebar:"gettingStartedSidebar",previous:{title:"Data Feeds",permalink:"/arch/feeds"},next:{title:"What is Switchboard V3?",permalink:"/v3"}},c={},l=[],u={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"While true-randomness on some computers can be made possible via atmospheric\nnoise and special hardware modules, such solutions on blockchains are not\npossible since they are virtual machines without physical hardware. Thus,\npseudorandom-functions are needed to close this gap. ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"You should be skeptical\nof teams claiming they offer true randomness."))),(0,o.kt)("p",null,"Random numbers are crucial for many DeFi applications whether its fair NFT\nlaunches, gambling, gaming, or assigning user roles in a DAO. Without an element\nof randomness, each of the above could be exploited and the final outcome\npredicted."),(0,o.kt)("p",null,"A Verifiable Random Function (VRF) is a public-key pseudorandom function that\nprovides proofs that its outputs were calculated correctly. This means we can\nuse a cryptographic keypair to generate a random number with a proof, which can\nthen be validated by anyone to ensure the value was calculated correctly without\nthe possibility of leaking the producer\u2019s secret key. You can read more about\nVRF from the Algorand team, whose founder was one of the authors on the original\nVRF paper -\n",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/algorand/algorand-releases-first-open-source-code-of-verifiable-random-function-93c2960abd61"},"Algorand Releases First Open Source Code of Verifiable Random Functions"),"."),(0,o.kt)("p",null,"Switchboard's VRF implementation uses the oracle authority secret key to publish\nthe VRF proof on-chain. The on-chain proof verification is very computationally\nexpensive and requires 276 instructions on-chain to fully verify. Once the proof\nis submitted on-chain anyone can turn the VRF crank to produce the pseduorandom\nresult, although for simplicity and speed the Switchboard oracle that submitted\nthe proof also submits the verification instructions."),(0,o.kt)("p",null,"The final proof verification instruction invokes the VRF Account's specified\ncallback, which allows developers to integrate pseduorandomness into their\napplications and be confident they are consuming the latest pseduorandom result."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Switchboard VRF is currently only supported on Solana")))}d.isMDXComponent=!0}}]);