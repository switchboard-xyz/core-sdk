"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9169],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(a),g=r,m=p["".concat(l,".").concat(g)]||p[g]||u[g]||o;return a?n.createElement(m,s(s({ref:t},d),{},{components:a})):n.createElement(m,s({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(67294),r=a(86010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>g});var n=a(83117),r=a(67294),o=a(86010),s=a(72389),i=a(67392),l=a(7094),c=a(12466);const d="tabList__CuJ",u="tabItem_LNqP";function p(e){var t,a;const{lazy:s,block:p,defaultValue:g,values:m,groupId:b,className:v}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=m?m:f.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),y=(0,i.l)(h,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===g?g:null!=(t=null!=g?g:null==(a=f.find((e=>e.props.default)))?void 0:a.props.value)?t:f[0].props.value;if(null!==k&&!h.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:x}=(0,l.U)(),[T,E]=(0,r.useState)(k),_=[],{blockElementScrollPositionUntilNextRender:A}=(0,c.o5)();if(null!=b){const e=w[b];null!=e&&e!==T&&h.some((t=>t.value===e))&&E(e)}const D=e=>{const t=e.currentTarget,a=_.indexOf(t),n=h[a].value;n!==T&&(A(t),E(n),null!=b&&x(b,String(n)))},S=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=_.indexOf(e.currentTarget)+1;a=null!=(n=_[t])?n:_[0];break}case"ArrowLeft":{var r;const t=_.indexOf(e.currentTarget)-1;a=null!=(r=_[t])?r:_[_.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},v)},h.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>_.push(e),onKeyDown:S,onFocus:D,onClick:D},s,{className:(0,o.Z)("tabs__item",u,null==s?void 0:s.className,{"tabs__item--active":T===t})}),null!=a?a:t)}))),s?(0,r.cloneElement)(f.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function g(e){const t=(0,s.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},35417:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(86886),r=a(67294),o=a(44267),s=a(15861),i=a(21519),l=a(80102),c=a(83117),d=a(86010),u=a(94780),p=a(33616),g=a(90948),m=a(34867);function b(e){return(0,m.Z)("MuiCardHeader",e)}const v=(0,a(1588).Z)("MuiCardHeader",["root","avatar","action","content","title","subheader"]);var f=a(85893);const h=["action","avatar","className","component","disableTypography","subheader","subheaderTypographyProps","title","titleTypographyProps"],y=(0,g.ZP)("div",{name:"MuiCardHeader",slot:"Root",overridesResolver:(e,t)=>(0,c.Z)({[`& .${v.title}`]:t.title,[`& .${v.subheader}`]:t.subheader},t.root)})({display:"flex",alignItems:"center",padding:16}),k=(0,g.ZP)("div",{name:"MuiCardHeader",slot:"Avatar",overridesResolver:(e,t)=>t.avatar})({display:"flex",flex:"0 0 auto",marginRight:16}),w=(0,g.ZP)("div",{name:"MuiCardHeader",slot:"Action",overridesResolver:(e,t)=>t.action})({flex:"0 0 auto",alignSelf:"flex-start",marginTop:-4,marginRight:-8,marginBottom:-4}),x=(0,g.ZP)("div",{name:"MuiCardHeader",slot:"Content",overridesResolver:(e,t)=>t.content})({flex:"1 1 auto"}),T=r.forwardRef((function(e,t){const a=(0,p.Z)({props:e,name:"MuiCardHeader"}),{action:n,avatar:r,className:o,component:i="div",disableTypography:g=!1,subheader:m,subheaderTypographyProps:v,title:T,titleTypographyProps:E}=a,_=(0,l.Z)(a,h),A=(0,c.Z)({},a,{component:i,disableTypography:g}),D=(e=>{const{classes:t}=e;return(0,u.Z)({root:["root"],avatar:["avatar"],action:["action"],content:["content"],title:["title"],subheader:["subheader"]},b,t)})(A);let S=T;null==S||S.type===s.Z||g||(S=(0,f.jsx)(s.Z,(0,c.Z)({variant:r?"body2":"h5",className:D.title,component:"span",display:"block"},E,{children:S})));let C=m;return null==C||C.type===s.Z||g||(C=(0,f.jsx)(s.Z,(0,c.Z)({variant:r?"body2":"body1",className:D.subheader,color:"text.secondary",component:"span",display:"block"},v,{children:C}))),(0,f.jsxs)(y,(0,c.Z)({className:(0,d.Z)(D.root,o),as:i,ref:t,ownerState:A},_,{children:[r&&(0,f.jsx)(k,{className:D.avatar,ownerState:A,children:r}),(0,f.jsxs)(x,{className:D.content,ownerState:A,children:[S,C]}),n&&(0,f.jsx)(w,{className:D.action,ownerState:A,children:n})]}))}));var E=a(44073),_=a(39960),A=a(13264),D=a(92949);const S=(0,A.Z)(E.Z)((e=>{let{theme:t,dark:a}=e;return{display:"flex",flexDirection:"row",justifyItems:"baseline",background:a?"rgba(42, 56, 68, 1)":"rgba(255, 255, 255, 0.6)",border:(a?.15:.1)+"rem solid var(--ifm-navbar-link-color)",borderRadius:"13.2px",boxShadow:"0 6px 7px 5px rgba(107 107 107, 0.03)",boxSizing:"border-box",width:"100%",height:"100%",verticalAlign:"middle",textDecoration:"none",[t.breakpoints.down(300)]:{paddingLeft:""},transition:"transform 0.15s ease-in-out","&&&:hover":{background:a?"rgba(42, 56, 68, 1)":"white",transform:"scale3d(1.05, 1.05, 1)"}}})),C=(0,A.Z)(T)((e=>{let{theme:t}=e;return{display:"flex",maxHeight:"96px"}}));function Z(e){let{title:t,image:a,imageDark:n,description:l,to:c}=e;const{colorMode:d}=(0,D.I)();return r.createElement(_.Z,{href:c,style:{textDecoration:"none"}},r.createElement(S,{dark:"dark"===d?1:0},r.createElement(o.Z,{sx:{height:"100%",width:"100%"}},r.createElement(C,{avatar:r.createElement("div",{style:{height:48,width:48,display:"flex",alignItems:"center",justifyContent:"center"}},"dark"===d&&n?n:a),title:t,titleTypographyProps:{fontSize:"1.25rem",color:"var(--ifm-navbar-link-color)",fontWeight:"var(--ifm-font-weight-bold)"}}),l?r.createElement(r.Fragment,null,r.createElement(i.Z,{sx:{marginBottom:"1rem"}}),r.createElement(s.Z,{variant:"body2",color:"textSecondary",component:"p",sx:{color:"var(--ifm-navbar-link-color)",fontSize:"1.1rem"}},l)):r.createElement(r.Fragment,null))))}function N(e){let{items:t,cols:a}=e;return r.createElement(n.ZP,{container:!0,spacing:3},t.map((e=>r.createElement(n.ZP,{item:!0,xs:12,md:6,lg:12/(null!=a?a:2)},r.createElement(Z,{title:e.title,image:e.image,imageDark:e.imageDark,to:e.to,description:e.description})))))}},29195:(e,t,a)=>{a.d(t,{ZP:()=>l});var n=a(83117),r=(a(67294),a(3905)),o=a(35417),s=a(44996);const i={toc:[]};function l(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{items:[{to:"/aptos/program/testnet",title:"Testnet",description:"View the Testnet deployment accounts",image:(0,r.kt)("img",{src:(0,s.Z)("/img/icons/aptos/light.svg")}),imageDark:(0,r.kt)("img",{src:(0,s.Z)("/img/icons/aptos/dark.svg")})},{to:"/aptos/program/devnet",title:"Devnet",description:"View the Devnet deployment accounts",image:(0,r.kt)("img",{src:(0,s.Z)("/img/icons/aptos/light.svg")}),imageDark:(0,r.kt)("img",{src:(0,s.Z)("/img/icons/aptos/dark.svg")})}],mdxType:"RoundedCardGroup"}))}l.isMDXComponent=!0},18600:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>u,default:()=>v,frontMatter:()=>d,metadata:()=>p,toc:()=>m});var n=a(83117),r=(a(67294),a(3905)),o=a(65488),s=a(85162),i=a(35417),l=a(44996),c=a(29195);const d={sidebar_position:10,slug:".",title:"@switchboard-xyz/aptos.js"},u=void 0,p={unversionedId:"aptos/dev/javascript/client",id:"aptos/dev/javascript/client",title:"@switchboard-xyz/aptos.js",description:"GitHub&nbsp;",source:"@site/docs/aptos/dev/javascript/client.mdx",sourceDirName:"aptos/dev/javascript",slug:"/aptos/dev/javascript/",permalink:"/aptos/dev/javascript/",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,slug:".",title:"@switchboard-xyz/aptos.js"},sidebar:"aptos",previous:{title:"Sbv2 CLI",permalink:"/aptos/dev/cli"},next:{title:"sbv2-aptos",permalink:"/aptos/dev/rust/"}},g={},m=[{value:"Quick Links",id:"quick-links",level:2},{value:"Live Deployment:",id:"live-deployment",level:2},{value:"Install",id:"install",level:2},{value:"Creating Feeds",id:"creating-feeds",level:2},{value:"Listening to Updates",id:"listening-to-updates",level:3},{value:"Reading Feeds",id:"reading-feeds",level:3},{value:"Move.toml",id:"movetoml",level:3},{value:"Reading Feeds",id:"reading-feeds-1",level:3}],b={toc:m};function v(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/sbv2-aptos"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/--181717?logo=github&logoColor=ffffff",alt:"GitHub"})),"\xa0","\n",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/switchboardxyz"},(0,r.kt)("img",{parentName:"a",src:"https://badgen.net/twitter/follow/switchboardxyz",alt:"twitter"})),"\xa0","\xa0","\n",(0,r.kt)("a",{parentName:"p",href:"https://badge.fury.io/js/@switchboard-xyz%2Faptos.js"},(0,r.kt)("img",{parentName:"a",src:"https://badge.fury.io/js/@switchboard-xyz%2Faptos.js.svg",alt:"npm version"}))),(0,r.kt)("p",null,"A library of utility functions to interact with Switchboard Modules on Aptos"),(0,r.kt)("h2",{id:"quick-links"},"Quick Links"),(0,r.kt)(i.Z,{cols:2,items:[{to:"https://github.com/switchboard-xyz/sbv2-aptos",title:"Github",description:"View the Github repo",image:(0,r.kt)("img",{src:(0,l.Z)("/img/icons/github/light.svg")}),imageDark:(0,r.kt)("img",{src:(0,l.Z)("/img/icons/github/dark.svg")})},{to:"https://docs.switchboard.xyz/api/@switchboard-xyz/aptos.js/",title:"Typedocs",description:"View the Typedocs",image:(0,r.kt)("img",{src:(0,l.Z)("/img/icons/typedoc/logo.svg")}),imageDark:(0,r.kt)("img",{src:(0,l.Z)("/img/icons/typedoc/logo.svg")})}],mdxType:"RoundedCardGroup"}),(0,r.kt)("h2",{id:"live-deployment"},"Live Deployment:"),(0,r.kt)("p",null,"We're currently deployed on Aptos Testnet and Aptos Devnet."),(0,r.kt)(c.ZP,{mdxType:"AptosNetworks"}),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @switchboard-xyz/aptos.js\n"))),(0,r.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @switchboard-xyz/aptos.js\n")))),(0,r.kt)("h2",{id:"creating-feeds"},"Creating Feeds"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Buffer } from "buffer";\nimport { AptosClient, AptosAccount, FaucetClient, HexString } from "aptos";\nimport {\n  AptosEvent,\n  EventCallback,\n  OracleJob,\n  createFeed,\n} from "@switchboard-xyz/aptos.js";\nimport Big from "big.js";\n\nconst NODE_URL = "https://fullnode.testnet.aptoslabs.com/v1";\nconst FAUCET_URL = "https://faucet.testnet.aptoslabs.com";\n\nconst SWITCHBOARD_TESTNET_ADDRESS =\n  "0xb27f7bbf7caf2368b08032d005e8beab151a885054cdca55c4cc644f0a308d2b";\n\nconst SWITCHBOARD_QUEUE_ADDRESS =\n  "0xb27f7bbf7caf2368b08032d005e8beab151a885054cdca55c4cc644f0a308d2b";\n\nconst SWITCHBOARD_CRANK_ADDRESS =\n  "0xb27f7bbf7caf2368b08032d005e8beab151a885054cdca55c4cc644f0a308d2b";\n\nconst client = new AptosClient(NODE_URL);\nconst faucetClient = new FaucetClient(NODE_URL, FAUCET_URL);\n\n// create new user\nlet user = new AptosAccount();\n\nawait faucetClient.fundAccount(user.address(), 50000);\nconsole.log(`User account ${user.address().hex()} created + funded.`);\n\n// Make Job data for btc price\nconst serializedJob = Buffer.from(\n  OracleJob.encodeDelimited(\n    OracleJob.create({\n      tasks: [\n        {\n          httpTask: {\n            url: "https://www.binance.us/api/v3/ticker/price?symbol=BTCUSD",\n          },\n        },\n        {\n          jsonParseTask: {\n            path: "$.price",\n          },\n        },\n      ],\n    })\n  ).finish()\n);\n\nconst [aggregator, createFeedTx] = await createFeed(\n  client,\n  user,\n  {\n    authority: user.address(),\n    queueAddress: SWITCHBOARD_QUEUE_ADDRESS, // account with OracleQueue resource\n    crankAddress: SWITCHBOARD_CRANK_ADDRESS, // account with Crank resource\n    batchSize: 1, // number of oracles to respond to each round\n    minJobResults: 1, // minimum # of jobs that need to return a result\n    minOracleResults: 1, // minumum # of oracles that need to respond for a result\n    minUpdateDelaySeconds: 5, // minimum delay between rounds\n    coinType: "0x1::aptos_coin::AptosCoin", // CoinType of the queue (now only AptosCoin)\n    initialLoadAmount: 1000, // load of the lease\n    jobs: [\n      {\n        name: "BTC/USD",\n        metadata: "binance",\n        authority: user.address().hex(),\n        data: serializedJob.toString("base64"), // jobs need to be base64 encoded strings\n        weight: 1,\n      },\n    ],\n  },\n  SWITCHBOARD_TESTNET_ADDRESS\n);\n\nconsole.log(\n  `Created Aggregator and Lease resources at account address ${aggregator.address}. Tx hash ${createFeedTx}`\n);\n\n// Manually trigger an update\nawait aggregator.openRound(user);\n')),(0,r.kt)("h3",{id:"listening-to-updates"},"Listening to Updates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Listen to Aggregator Updates Off-Chain\n */\n\n// create event listener\nconst onAggregatorUpdate = (\n  client: AptosClient,\n  cb: EventCallback,\n  pollIntervalMs: number = 1000\n) => {\n  const event = new AptosEvent(\n    client,\n    HexString.ensure(SWITCHBOARD_TESTNET_ADDRESS),\n    `${SWITCHBOARD_TESTNET_ADDRESS}::switchboard::State`,\n    "aggregator_update_events",\n    pollIntervalMs\n  );\n  event.onTrigger(cb);\n  return event;\n};\n\n// initialize event listener\nconst updatePoller = onAggregatorUpdate(client, async (e) => {\n  if (aggregator.address == e.data.aggregator_address) {\n    console.log(`NEW RESULT:`, e.data);\n  }\n});\n')),(0,r.kt)("h3",{id:"reading-feeds"},"Reading Feeds"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { AggregatorAccount } from "@switchboard-xyz/aptos.js";\n\nconst aggregatorAccount: AggregatorAccount = new AggregatorAccount(\n  client,\n  aggregator_address,\n  SWITCHBOARD_TESTNET_ADDRESS\n);\n\nconsole.log(await aggregatorAccount.loadData());\n')),(0,r.kt)("h1",{id:"aptos"},"Aptos"),(0,r.kt)("h3",{id:"movetoml"},"Move.toml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[addresses]\nswitchboard = "0xb27f7bbf7caf2368b08032d005e8beab151a885054cdca55c4cc644f0a308d2b"\n\n[dependencies]\nMoveStdlib = { git = "https://github.com/aptos-labs/aptos-core.git", subdir = "aptos-move/framework/move-stdlib/", rev = "testnet" }\nAptosFramework = { git = "https://github.com/aptos-labs/aptos-core.git", subdir = "aptos-move/framework/aptos-framework/", rev = "testnet" }\nAptosStdlib = { git = "https://github.com/aptos-labs/aptos-core.git", subdir = "aptos-move/framework/aptos-stdlib/", rev = "testnet" }\nSwitchboard = { git = "https://github.com/switchboard-xyz/aptos-sdk.git", subdir = "switchboard-move/switchboard/", rev = "main" }\n')),(0,r.kt)("h3",{id:"reading-feeds-1"},"Reading Feeds"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use switchboard::aggregator;\nuse switchboard::math::{Self, SwitchboardDecimal};\n\n// store latest value\nstruct AggregatorInfo has copy, drop, store, key {\n    aggregator_addr: address,\n    latest_result: u128,\n    latest_result_scaling_factor: u8,\n    latest_result_neg: bool,\n}\n\n// get latest value\npublic fun save_latest_value(aggregator_addr: address) {\n    // get latest value\n    let latest_value = aggregator::latest_value(aggregator_addr);\n    let (value, scaling_factor, neg) = math::unpack(latest_value);\n    move_to(account, AggregatorInfo {\n        aggregator_addr: aggregator_addr,\n        latest_result: value,\n        latest_result_scaling_factor: scaling_factor,\n        latest_result_neg: neg,\n    });\n}\n\n// some testing that uses aggregator test utility functions\n#[test(account = @0x1)]\npublic entry fun test_aggregator(account: &signer) {\n\n    // creates test aggregator with data\n    aggregator::new_test(account, 100, 0, false);\n\n    // print out value\n    std::debug::print(&aggregator::latest_value(signer::address_of(account)));\n}\n")))}v.isMDXComponent=!0}}]);