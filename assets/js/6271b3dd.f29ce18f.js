"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6945],{3905:(e,a,t)=>{t.d(a,{Zo:()=>s,kt:()=>f});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var u=r.createContext({}),v=function(e){var a=r.useContext(u),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},s=function(e){var a=v(e.components);return r.createElement(u.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},c=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=v(t),f=n,y=c["".concat(u,".").concat(f)]||c[f]||p[f]||i;return t?r.createElement(y,l(l({ref:a},s),{},{components:t})):r.createElement(y,l({ref:a},s))}));function f(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=c;var o={};for(var u in a)hasOwnProperty.call(a,u)&&(o[u]=a[u]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var v=2;v<i;v++)l[v]=t[v];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1677:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>u,default:()=>f,frontMatter:()=>o,metadata:()=>v,toc:()=>p});var r=t(7462),n=(t(7294),t(3905));const i={toc:[{value:"<code>sbv2 vrf create [QUEUEKEY]</code>",id:"sbv2-vrf-create-queuekey",level:2},{value:"<code>sbv2 vrf create example [QUEUEKEY]</code>",id:"sbv2-vrf-create-example-queuekey",level:2},{value:"<code>sbv2 vrf print [VRFKEY]</code>",id:"sbv2-vrf-print-vrfkey",level:2},{value:"<code>sbv2 vrf request [VRFKEY]</code>",id:"sbv2-vrf-request-vrfkey",level:2},{value:"<code>sbv2 vrf verify [VRFKEY]</code>",id:"sbv2-vrf-verify-vrfkey",level:2},{value:"<code>sbv2 vrf watch [VRFKEY]</code>",id:"sbv2-vrf-watch-vrfkey",level:2}]};function l(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},i,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"create a Switchboard VRF Account"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-vrf-create-queuekey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 vrf create [QUEUEKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-vrf-create-example-queuekey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 vrf create example [QUEUEKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-vrf-print-vrfkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 vrf print [VRFKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-vrf-request-vrfkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 vrf request [VRFKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-vrf-verify-vrfkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 vrf verify [VRFKEY]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#sbv2-vrf-watch-vrfkey"},(0,n.kt)("inlineCode",{parentName:"a"},"sbv2 vrf watch [VRFKEY]")))),(0,n.kt)("h2",{id:"sbv2-vrf-create-queuekey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf create [QUEUEKEY]")),(0,n.kt)("p",null,"create a Switchboard VRF Account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'USAGE\n  $ sbv2 vrf create [QUEUEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--vrfKeypair <value>] [--enable] [--authority <value>] [--queueAuthority <value>] [--callback <value> |\n    --accountMeta <value> | --callbackPid <value> | --ixData <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create VRF account for\n\nFLAGS\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --accountMeta=<value>...  account metas for VRF callback\n  --authority=<value>       alternative keypair to use for VRF authority\n  --callback=<value>        filesystem path to callback json\n  --callbackPid=<value>     callback program ID\n  --enable                  enable vrf permissions\n  --ixData=<value>          serialized instruction data in bytes\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n  --vrfKeypair=<value>      filesystem path of existing keypair to use for VRF Account\n\nDESCRIPTION\n  create a Switchboard VRF Account\n\nEXAMPLES\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HpQoFL5kxPp2JCFvjsVTvBd7navx4THLefUU68SXAyd6","isSigner": false,"isWritable": true}" -a "{"pubkey": "8VdBtS8ufkXMCa6Yr9E4KVCfX2inVZVwU4KGg2CL1q7P","isSigner": false,"isWritable": false}"\n\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority oracle-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HYKi1grticLXPe5vqapUHhm976brwqRob8vqRnWMKWL5","isSigner": false,"isWritable": true}" -a "{"pubkey": "6vG9QLMgSvsfjvSpDxWfZ2MGPYGzEYoBxviLG7cr4go","isSigner": false,"isWritable": false}"\n\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callback callback-example.json\n')),(0,n.kt)("h2",{id:"sbv2-vrf-create-example-queuekey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf create example [QUEUEKEY]")),(0,n.kt)("p",null,"create a VRF account for the client example program"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 vrf create example [QUEUEKEY] --vrfPid <value> [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>] [--vrfKeypair <value>] [--enable] [--queueAuthority <value>] [--maxResult <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create VRF account for\n\nFLAGS\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --enable                  enable vrf permissions\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --maxResult=<value>       [default: 256000] the maximum VRF result\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n  --vrfKeypair=<value>      filesystem path of existing keypair to use for VRF Account\n  --vrfPid=<value>          (required) program ID for the VRF example program\n\nDESCRIPTION\n  create a VRF account for the client example program\n\nEXAMPLES\n  $ sbv2 vrf:create:example 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --vrfPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json\n")),(0,n.kt)("h2",{id:"sbv2-vrf-print-vrfkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf print [VRFKEY]")),(0,n.kt)("p",null,"Print the deserialized Switchboard VRF account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 vrf print [VRFKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>] [--json]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Print the deserialized Switchboard VRF account\n\nALIASES\n  $ sbv2 vrf print\n\nEXAMPLES\n  $ sbv2 vrf:print\n")),(0,n.kt)("h2",{id:"sbv2-vrf-request-vrfkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf request [VRFKEY]")),(0,n.kt)("p",null,"request a new value for a VRF"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'USAGE\n  $ sbv2 vrf request [VRFKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--funderAuthority <value>] [--authority <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account to request randomness for\n\nFLAGS\n  -k, --keypair=<value>      keypair that will pay for onchain transactions. defaults to new account authority if no\n                             alternate authority provided\n  -s, --silent               suppress cli prompts\n  -u, --rpcUrl=<value>       alternate RPC url\n  -v, --verbose              log everything\n  --authority=<value>        alternative keypair that is the VRF authority\n  --funderAuthority=<value>  alternative keypair to pay for VRF request\n  --mainnetBeta              WARNING: use mainnet-beta solana cluster\n  --programId=<value>        alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  request a new value for a VRF\n\nEXAMPLES\n  $ sbv2 vrf:create 9WZ59yz95bd3XwJxDPVE2PjvVWmSy9WM1NgGD2Hqsohw --keypair ../payer-keypair.json -v --enable --queueAuthority queue-authority-keypair.json --callbackPid 6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE --ixData "[145,72,9,94,61,97,126,106]" -a "{"pubkey": "HpQoFL5kxPp2JCFvjsVTvBd7navx4THLefUU68SXAyd6","isSigner": false,"isWritable": true}" -a "{"pubkey": "8VdBtS8ufkXMCa6Yr9E4KVCfX2inVZVwU4KGg2CL1q7P","isSigner": false,"isWritable": false}"\n')),(0,n.kt)("h2",{id:"sbv2-vrf-verify-vrfkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf verify [VRFKEY]")),(0,n.kt)("p",null,"if ready, verify a VRF proof"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 vrf verify [VRFKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  VRFKEY  public key of the VRF account to request randomness for\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  if ready, verify a VRF proof\n")),(0,n.kt)("h2",{id:"sbv2-vrf-watch-vrfkey"},(0,n.kt)("inlineCode",{parentName:"h2"},"sbv2 vrf watch [VRFKEY]")),(0,n.kt)("p",null,"watch a vrf for a new value"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 vrf watch [VRFKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  VRFKEY  public key of the vrf account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  watch a vrf for a new value\n\nALIASES\n  $ sbv2 vrf watch\n\nEXAMPLES\n  $ sbv2 vrf:aggregator J7j9xX8JP2B2ErvUzuqGAKBGeggsxPyFXj5MqZcYDxfa\n")))}l.isMDXComponent=!0;const o={sidebar_position:80,title:"sbv2 vrf"},u=void 0,v={unversionedId:"cli/vrf",id:"cli/vrf",title:"sbv2 vrf",description:"",source:"@site/api/cli/vrf.mdx",sourceDirName:"cli",slug:"/cli/vrf",permalink:"/api/cli/vrf",tags:[],version:"current",sidebarPosition:80,frontMatter:{sidebar_position:80,title:"sbv2 vrf"},sidebar:"tutorialSidebar",previous:{title:"sbv2 queue",permalink:"/api/cli/queue"},next:{title:"sbv2 buffer",permalink:"/api/cli/buffer"}},s={},p=[],c={toc:p};function f(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)(l,{mdxType:"Sbv2Vrf"}))}f.isMDXComponent=!0}}]);