"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[183],{54852:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(49231);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),p=a,f=d["".concat(c,".").concat(p)]||d[p]||h[p]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},69731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>u,default:()=>y,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var r=n(95634),a=n(49231),o=n(54852);const i=JSON.parse('{"aggregator":"An aggregator, or data feed, dictates: how data is brought on-chain from it\'s assigned source, how often updates can be requested, and from which set of oracles updates can be requested from.","curator":"A curator is someone who scours the internet and builds on-chain job definitions from which publishers can use to build data feeds from.","crank":"A crank is a priority queue of aggregators and their next available update time. The crank is the scheduling mechanism that allows feeds to be updated at a regular interval and reward the update requester for jump starting the system.","enclave":"A protected memory region within an application that is created and managed by Intel SGX. Enclaves provide a secure execution environment for sensitive code and data, ensuring their confidentiality and integrity.","history buffer":"A history buffer is an optional feature that can be added to an aggregator and stores the last N accepted results along with a timestamp.","Intel SGX (Software Guard Extensions)":"A set of security-related instruction codes built into Intel processors that provide a hardware-based method to create secure enclaves within the application\'s memory to protect sensitive data and code from unauthorized access or modification.  ","job":"A job, or OracleJob, stores a list of Switchboard tasks which instructs the oracle on how to bring data on-chain.","lease":"A lease is a pre-funded escrow used to reward oracles for successfully updating a data feed.","MRENCLAVE":"A unique identifier in Intel SGX technology that represents the identity and integrity of a specific enclave. It is a 256-bit hash value that is derived from the enclave\'s code and initial data during the enclave\'s creation process. The main purpose of `MRENCLAVE` is to enable remote attestation and ensure that the enclave running on a remote system is indeed the intended and genuine enclave.","oracle":"An oracle, or node, sits between the internet and a blockchain and facilitates the flow of information. An oracle reads in a feeds job definitions, calculates the result, and submits its response on-chain.","oracle consensus":"Oracle consensus determines how oracles come to agreement on the accepted on-chain result. Switchboard oracles use the median oracle response as the accepted result. A feed authority can control how many oracles are requested and how many must respond to influence its security.","oracle queue":"An oracle queue is a round-robin queue of oracles actively heart beating on-chain. When an update is requested from a queue, the next N oracles are assigned to the update request and cycled to the back of the queue.","publisher":"A publisher is someone who builds and creates a data feed on-chain. Typically this is a program or dApp that requires the data.","Quoting Enclave (QE)":"A special enclave provided by Intel that is responsible for generating quotes for remote attestation. The quoting enclave signs the enclave report with the Intel Enhanced Privacy ID (EPID) private key, which is only accessible to the QE.   ","Remote Attestation":"A process that allows a remote party to verify the identity, integrity, and authenticity of an enclave running on another system. Remote attestation involves generating a cryptographic report that includes MRENCLAVE and MRSIGNER values, which are then verified by the remote party.","task":"An instruction an oracle executes. A task can fetch, parse, or transform data.","trusted execution environment (TEE)":"A secure environment isolated from the rest of the system, where sensitive code can be executed and sensitive data can be processed with additional protection against unauthorized access or modification. Intel SGX is an example of a TEE.","variance threshold":"A feed authority may specify a variance threshold to prevent redundant update requests and only allow oracle responses if the variance percentage between the last accepted result and the current value exceeds some threshold. Useful for conserving a lease\'s funds and extends the life of a feed.","verifiable random function":"Verifiable Random Function (VRF) is a prove-able cryptographic function that uses a private key to generate a pseudo-random value which can be verified by anyone with just the public key without leaking the VRF producer\'s secret key."}');const s=function(){const e=[];for(const t in i)if(Object.prototype.hasOwnProperty.call(i,t)){const n=i[t];e.push(a.createElement("tr",{key:t},a.createElement("td",null,c(t)),a.createElement("td",null,n)))}return a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Term"),a.createElement("th",null,"Definition"))),a.createElement("tbody",null,e))};function c(e){const t=e.split(/\s+/);for(let n=0;n<t.length;n++){const e=t[n];if(e===e.toUpperCase())continue;const r=e.charAt(0).toUpperCase()+e.slice(1);t[n]=r}return t.join(" ")}const l={slug:"/terms",title:"\ud83d\udcda Terminology",hide_table_of_contents:!0,pagination_prev:null,pagination_next:null},u=void 0,d={unversionedId:"terminology",id:"terminology",title:"\ud83d\udcda Terminology",description:"",source:"@site/docs/999-terminology.mdx",sourceDirName:".",slug:"/terms",permalink:"/terms",draft:!1,tags:[],version:"current",sidebarPosition:999,frontMatter:{slug:"/terms",title:"\ud83d\udcda Terminology",hide_table_of_contents:!0,pagination_prev:null,pagination_next:null},sidebar:"sidebar"},h={},p=[],f={toc:p},m="wrapper";function y(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(s,{mdxType:"TermsTable"}))}y.isMDXComponent=!0}}]);