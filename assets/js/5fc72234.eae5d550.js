"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7844],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,m=d["".concat(l,".").concat(u)]||d[u]||y[u]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7543:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(3117),a=(n(7294),n(3905));const o={sidebar_position:10,slug:".",title:"switchboardpy",className:"sidebar__python"},i=void 0,c={unversionedId:"solana/dev/python/client",id:"solana/dev/python/client",title:"switchboardpy",description:"SwitchboardPy is the Python client for",source:"@site/docs/solana/dev/python/client.mdx",sourceDirName:"solana/dev/python",slug:"/solana/dev/python/",permalink:"/sbv2-core/solana/dev/python/",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,slug:".",title:"switchboardpy",className:"sidebar__python"},sidebar:"solana",previous:{title:"@switchboard-xyz/sbv2-lite",permalink:"/sbv2-core/solana/dev/javascript/sbv2-lite"},next:{title:"switchboard-v2",permalink:"/sbv2-core/solana/dev/rust/"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Anchorpy Client Gen",id:"anchorpy-client-gen",level:2}],s={toc:p};function y(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"SwitchboardPy is the Python client for\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.switchboard.xyz/introduction"},"Switchboard"),". It provides wrappers\nto help you to interact with the Switchboard V2 program on-chain."),(0,a.kt)("p",null,"Internally it uses ",(0,a.kt)("a",{parentName:"p",href:"https://kevinheavey.github.io/anchorpy/"},"AnchorPy"),", an\nAnchor API implementation in Python."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://pypi.python.org/pypi/switchboardpy"},(0,a.kt)("img",{parentName:"a",src:"https://badgen.net/pypi/v/switchboardpy",alt:"pypi"})),"\xa0","\xa0","\n",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/switchboardxyz"},(0,a.kt)("img",{parentName:"a",src:"https://badgen.net/twitter/follow/switchboardxyz",alt:"twitter"})),"\xa0","\xa0"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"pip install switchboardpy\n")),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import asyncio\nfrom solana.keypair import Keypair\nfrom solana.publickey import PublicKey\nfrom solana.rpc.async_api import AsyncClient\nfrom anchorpy import Program, Provider, Wallet\n\nfrom switchboardpy import AggregatorAccount, AccountParams\n\n# Devnet Program ID.\nSBV2_DEVNET_PID = PublicKey(\n    \'2TfB33aLaneQb5TNVwyDz3jSZXS6jdW2ARw1Dgf84XCG\'\n)\n\nasync def main():\n    client = AsyncClient("https://api.devnet.solana.com/")\n    provider = Provider(client, Wallet(Keypair()))\n    program = await Program.at(\n        SBV2_DEVNET_PID, provider\n    )\n    agg = AggregatorAccount(AccountParams(program=program, public_key=PublicKey("88FX4tBstuwBPNhQU4EEBoPX35neSu4Le9zDSwtPRRQz")))\n\n    # getting aggregator data\n    data = await agg.load_data()\n\n    # getting most recent value (decimal.Decimal)\n    val = await agg.get_latest_value()\n\n    print(\'LATEST VALUE:\')\n    print(val)\n\n    await program.close()\n\nasyncio.run(main())\n\n"""\nOUTPUT\nLATEST VALUE:\n180.12115\n"""\n\n')),(0,a.kt)("h2",{id:"anchorpy-client-gen"},"Anchorpy Client Gen"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"anchorpy client-gen ./switchboard_v2.mainnet.parsed.json ./switchboardpy --program-id SW1TCH7qEPTdLsDHRgPuMQjbQxKdH2aBStViMFnt64f\n")))}y.isMDXComponent=!0}}]);