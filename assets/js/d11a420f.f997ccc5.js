"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[79],{54852:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>f});var a=t(49231);function l(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){l(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,a,l=function(n,e){if(null==n)return{};var t,a,l={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(l[t]=n[t]);return l}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(l[t]=n[t])}return l}var o=a.createContext({}),s=function(n){var e=a.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},d=function(n){var e=s(n.components);return a.createElement(o.Provider,{value:e},n.children)},u="mdxType",b={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(n,e){var t=n.components,l=n.mdxType,r=n.originalType,o=n.parentName,d=c(n,["components","mdxType","originalType","parentName"]),u=s(t),p=l,f=u["".concat(o,".").concat(p)]||u[p]||b[p]||r;return t?a.createElement(f,i(i({ref:e},d),{},{components:t})):a.createElement(f,i({ref:e},d))}));function f(n,e){var t=arguments,l=e&&e.mdxType;if("string"==typeof n||l){var r=t.length,i=new Array(r);i[0]=p;var c={};for(var o in e)hasOwnProperty.call(e,o)&&(c[o]=e[o]);c.originalType=n,c[u]="string"==typeof n?n:l,i[1]=c;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},87079:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>b,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var a=t(95634),l=(t(49231),t(54852));const r={title:"FunctionsClient.sol",keywords:["Switchboard","oracle network","evm"]},i=void 0,c={unversionedId:"evm/dev/functions-client-sol",id:"evm/dev/functions-client-sol",title:"FunctionsClient.sol",description:"FunctionsClient.sol is a Solidity interface you can implement to receive the",source:"@site/docs/202-evm/70-dev/11-functions-client-sol.mdx",sourceDirName:"202-evm/70-dev",slug:"/evm/dev/functions-client-sol",permalink:"/evm/dev/functions-client-sol",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"FunctionsClient.sol",keywords:["Switchboard","oracle network","evm"]},sidebar:"sidebar",previous:{title:"Aggregator.sol",permalink:"/evm/dev/aggregator-sol"},next:{title:"\u27a1\ufe0f Your First Contract",permalink:"/evm/guides/first-contract"}},o={},s=[{value:"Hardhat Setup",id:"hardhat-setup",level:2},{value:"Source Code",id:"source-code",level:2}],d={toc:s},u="wrapper";function b(n){let{components:e,...t}=n;return(0,l.kt)(u,(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"FunctionsClient.sol is a Solidity interface you can implement to receive the\nresult of a Switchboard Function."),(0,l.kt)("h2",{id:"hardhat-setup"},"Hardhat Setup"),(0,l.kt)("p",null,"Add ",(0,l.kt)("inlineCode",{parentName:"p"},"@switchboard-xyz/evm.js")," to your Hardhat project"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -D @switchboard-xyz/evm.js\n")),(0,l.kt)("p",null,"Then import it into your Solidity contract with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},'import {FunctionsClient} from "@switchboard-xyz/evm.js/contracts";\n')),(0,l.kt)("h2",{id:"source-code"},"Source Code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},'//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport {ISwitchboard} from "./ISwitchboard.sol";\n\n// FunctionsClient is a base contract for interacting with Switchboard Functions\n// It provides a simple interface for calling functions and receiving callbacks\nabstract contract FunctionsClient {\n    error InvalidMsgDataLength(address expected, address sender);\n    error InvalidSender(address expected, address sender);\n\n    enum CallbackType {\n        UNCALLED,\n        CALLBACK_STRING,\n        CALLBACK_UINT256,\n        CALLBACK_INT256,\n        CALLBACK_BYTES\n    }\n\n    //=========================================================================\n    // Function Client Configuration\n    //=========================================================================\n\n    // Switchboard address & FunctionId that will call into this Contract\n    address public switchboard;\n    address public functionId;\n\n    // Received Latest Value from Switchboard Function\n    uint256 public latestCallbackTimestamp;\n    CallbackType public latestCallbackType;\n    address public latestCallbackCallId;\n\n    //=========================================================================\n    // Responses - unused vals and fns can be safely deleted to save gas\n    //=========================================================================\n\n    // If callback value is a uint256\n    uint256 public latestValueUint256;\n\n    // If callback value is an int256\n    int256 public latestValueInt256;\n\n    // If callback value is a bytes\n    bytes public latestValueBytes;\n\n    // If callback value is a string\n    string public latestValueString;\n\n    constructor(address _switchboard) {\n        switchboard = _switchboard;\n    }\n\n    //=========================================================================\n    // User Function - called upon receiving a callback from switchboard\n    //=========================================================================\n\n    function onCallback() internal virtual;\n\n    function initializeRequest(\n        string[] memory params // arbitrary user-defined parameters handled function-side\n    ) internal returns (address callId) {\n        callId = ISwitchboard(switchboard).callFunction{value: msg.value}(\n            functionId,\n            abi.encode(params)\n        );\n    }\n\n    //=========================================================================\n    // Callbacks - unused callbacks can be safely removed to save gas\n    //=========================================================================\n\n    function callbackUint256(uint256 value) public onlyCallback {\n        latestValueUint256 = value;\n        latestCallbackType = CallbackType.CALLBACK_UINT256;\n    }\n\n    function callbackInt256(int256 value) public onlyCallback {\n        latestValueInt256 = value;\n        latestCallbackType = CallbackType.CALLBACK_INT256;\n    }\n\n    function callbackBytes(bytes memory value) public onlyCallback {\n        latestValueBytes = value;\n        latestCallbackType = CallbackType.CALLBACK_BYTES;\n    }\n\n    function callbackString(string memory value) public onlyCallback {\n        latestValueString = value;\n        latestCallbackType = CallbackType.CALLBACK_STRING;\n    }\n\n    //=========================================================================\n    // Callbacks with callId - can also be removed if unneeded\n    //=========================================================================\n    function callbackUint256WithId(uint256 value, address callId) external {\n        latestCallbackCallId = callId;\n        callbackUint256(value);\n    }\n\n    function callbackInt256WithId(int256 value, address callId) external {\n        latestCallbackCallId = callId;\n        callbackInt256(value);\n    }\n\n    function callbackBytesWithId(bytes memory value, address callId) external {\n        latestCallbackCallId = callId;\n        callbackBytes(value);\n    }\n\n    function callbackStringWithId(\n        string memory value,\n        address callId\n    ) external {\n        latestCallbackCallId = callId;\n        callbackString(value);\n    }\n\n    //=========================================================================\n    // Internal functions / modifiers\n    //=========================================================================\n\n    // get encoded functionId from msg.data and check that switchboard sent the message\n    function getFunctionId() internal view returns (address payable signer) {\n        signer = payable(msg.sender);\n        if (msg.data.length < 20) {\n            // log signer if called with wrong account\n            revert InvalidMsgDataLength(switchboard, signer);\n        } else if (msg.data.length >= 20 && signer == switchboard) {\n            assembly {\n                signer := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        }\n    }\n\n    // check if the functionId is valid and trigger onCallback\n    modifier onlyCallback() {\n        address encodedFunctionId = getFunctionId();\n\n        // set functionId to the sender if it\'s empty and the sender is the switchboard\n        if (functionId == address(0) && msg.sender == switchboard) {\n            functionId = encodedFunctionId;\n        }\n\n        // make sure the encoded caller is our function id\n        if (encodedFunctionId != functionId) {\n            revert InvalidSender(functionId, encodedFunctionId);\n        }\n\n        _;\n\n        latestCallbackTimestamp = block.timestamp;\n        onCallback();\n    }\n}\n')))}b.isMDXComponent=!0}}]);