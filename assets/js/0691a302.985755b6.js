"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[84529],{3905:(t,e,r)=>{r.d(e,{Zo:()=>p,kt:()=>s});var a=r(67294);function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,a,n=function(t,e){if(null==t)return{};var r,a,n={},l=Object.keys(t);for(a=0;a<l.length;a++)r=l[a],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)r=l[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}var g=a.createContext({}),u=function(t){var e=a.useContext(g),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},p=function(t){var e=u(t.components);return a.createElement(g.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var r=t.components,n=t.mdxType,l=t.originalType,g=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),m=u(r),s=n,c=m["".concat(g,".").concat(s)]||m[s]||d[s]||l;return r?a.createElement(c,o(o({ref:e},p),{},{components:r})):a.createElement(c,o({ref:e},p))}));function s(t,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=r.length,o=new Array(l);o[0]=m;var i={};for(var g in e)hasOwnProperty.call(e,g)&&(i[g]=e[g]);i.originalType=t,i.mdxType="string"==typeof t?t:n,o[1]=i;for(var u=2;u<l;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},77589:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>m,default:()=>f,frontMatter:()=>d,metadata:()=>s,toc:()=>k});var a=r(83117),n=(r(67294),r(3905));const l={toc:[]};function o(t){let{components:e,...r}=t;return(0,n.kt)("wrapper",(0,a.Z)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Resource storing the top level fields for a Switchboard aggregator"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Field"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"signerCap"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/aptos/idl/types/SignerCapability"},"SignerCapability")),(0,n.kt)("td",{parentName:"tr",align:null},"The signer capability corresponding to the account that the resource is on.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"authority"),(0,n.kt)("td",{parentName:"tr",align:null},"HexString"),(0,n.kt)("td",{parentName:"tr",align:null},"The account delegated as the authority for making account changes or withdrawing funds from a lease.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"name"),(0,n.kt)("td",{parentName:"tr",align:null},"u8[]"),(0,n.kt)("td",{parentName:"tr",align:null},"Name of the aggregator to store on-chain.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"metadata"),(0,n.kt)("td",{parentName:"tr",align:null},"u8[]"),(0,n.kt)("td",{parentName:"tr",align:null},"Metadata of the aggregator to store on-chain.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"createdAt"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Unix timestamp when the aggregator was created.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"isLocked"),(0,n.kt)("td",{parentName:"tr",align:null},"bool"),(0,n.kt)("td",{parentName:"tr",align:null},"Flag for whether an aggregators configuration is locked for editing.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"_","ebuf"),(0,n.kt)("td",{parentName:"tr",align:null},"u8[]"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"features"),(0,n.kt)("td",{parentName:"tr",align:null},"bool[]"),(0,n.kt)("td",{parentName:"tr",align:null})))))}o.isMDXComponent=!0;const i={toc:[]};function g(t){let{components:e,...r}=t;return(0,n.kt)("wrapper",(0,a.Z)({},i,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Resource storing the configuration for a Switchboard aggregator"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Field"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"queueAddr"),(0,n.kt)("td",{parentName:"tr",align:null},"HexString"),(0,n.kt)("td",{parentName:"tr",align:null},"Address of the queue the aggregator belongs to.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"batchSize"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of oracles assigned to an update request.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"minOracleResults"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Minimum number of oracle responses required before a round is validated.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"minUpdateDelaySeconds"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Minimum number of seconds required between aggregator rounds.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"historyLimit"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"The maximum number of historical samples that will be stored with the aggregator before being overwritten in a round-robin fashion.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"varianceThreshold"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/aptos/idl/types/SwitchboardDecimal"},"SwitchboardDecimal")),(0,n.kt)("td",{parentName:"tr",align:null},"Change percentage required between a previous round and the current round. If variance percentage is not met, reject new oracle responses.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"forceReportPeriod"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"minJobResults"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Minimum number of job results before an oracle accepts a result.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"expiration"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Timestamp when the feed is no longer needed.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"crankAddr"),(0,n.kt)("td",{parentName:"tr",align:null},"HexString"),(0,n.kt)("td",{parentName:"tr",align:null},"Optional, address of the crank the aggregator is currently using. Event based feeds do not need a crank.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"crankDisabled"),(0,n.kt)("td",{parentName:"tr",align:null},"bool"),(0,n.kt)("td",{parentName:"tr",align:null},"Flag dictating whether pushing to a crank is disabled.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"crankRowCount"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"The current index of the aggregator on the crank.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"nextAllowedUpdateTime"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Unix timestamp when the next update request will be available.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"consecutiveFailureCount"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Counter for the number of consecutive failures before a feed is removed from a queue. If set to 0, failed feeds will remain on the queue.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"startAfter"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Unix timestamp when open round calls will be considered valid.")))))}g.isMDXComponent=!0;const u={toc:[]};function p(t){let{components:e,...r}=t;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Resource storing the historic samples for a Switchboard aggregator."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Field"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"history"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/aptos/idl/types/AggregatorHistoryRow"},"AggregatorHistoryRow"),"[]"),(0,n.kt)("td",{parentName:"tr",align:null},"Array of historical samples for confirmed values.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"historyWriteIdx"),(0,n.kt)("td",{parentName:"tr",align:null},"u64"),(0,n.kt)("td",{parentName:"tr",align:null},"Tracks the current array index to write new samples on-chain.")))))}p.isMDXComponent=!0;const d={},m=void 0,s={unversionedId:"aptos/idl/resources/Aggregator",id:"aptos/idl/resources/Aggregator",title:"Aggregator",description:"An aggregator is split into the following resources:",source:"@site/docs/aptos/idl/resources/Aggregator.mdx",sourceDirName:"aptos/idl/resources",slug:"/aptos/idl/resources/Aggregator",permalink:"/aptos/idl/resources/Aggregator",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"aptos",previous:{title:"Table of Contents",permalink:"/aptos/idl/"},next:{title:"Crank",permalink:"/aptos/idl/resources/Crank"}},c={},k=[{value:"Aggregator",id:"aggregator",level:2},{value:"AggregatorConfig",id:"aggregatorconfig",level:2},{value:"LatestConfirmedRound",id:"latestconfirmedround",level:2},{value:"CurrentRound",id:"currentround",level:2},{value:"AggregatorHistory",id:"aggregatorhistory",level:2}],N={toc:k};function f(t){let{components:e,...r}=t;return(0,n.kt)("wrapper",(0,a.Z)({},N,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"An aggregator is split into the following resources:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#Aggregator"},"Aggregator")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#AggregatorConfig"},"AggregatorConfig")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#LatestConfirmedRound"},"LatestConfirmedRound")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#CurrentRound"},"CurrentRound")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#AggregatorHistory"},"AggregatorHistory"))),(0,n.kt)("h2",{id:"aggregator"},"Aggregator"),(0,n.kt)(o,{mdxType:"Aggregator"}),(0,n.kt)("h2",{id:"aggregatorconfig"},"AggregatorConfig"),(0,n.kt)(g,{mdxType:"AggregatorConfig"}),(0,n.kt)("h2",{id:"latestconfirmedround"},"LatestConfirmedRound"),(0,n.kt)("p",null,"Resource storing the latest confirmed round for a Switchboard aggregator."),(0,n.kt)("p",null,"See ",(0,n.kt)("a",{parentName:"p",href:"/aptos/idl/types/AggregatorRound"},"AggregatorRound"),"."),(0,n.kt)("h2",{id:"currentround"},"CurrentRound"),(0,n.kt)("p",null,"Resource storing the current unconfirmed round for a Switchboard aggregator."),(0,n.kt)("p",null,"See ",(0,n.kt)("a",{parentName:"p",href:"/aptos/idl/types/AggregatorRound"},"AggregatorRound"),"."),(0,n.kt)("h2",{id:"aggregatorhistory"},"AggregatorHistory"),(0,n.kt)(p,{mdxType:"AggregatorHistory"}))}f.isMDXComponent=!0}}]);