"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9172],{54852:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>g});var r=n(49231);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var u=r.createContext({}),i=function(e){var a=r.useContext(u),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},d=function(e){var a=i(e.components);return r.createElement(u.Provider,{value:a},e.children)},c="mdxType",v={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=i(n),p=t,g=c["".concat(u,".").concat(p)]||c[p]||v[p]||o;return n?r.createElement(g,l(l({ref:a},d),{},{components:n})):r.createElement(g,l({ref:a},d))}));function g(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,l=new Array(o);l[0]=p;var s={};for(var u in a)hasOwnProperty.call(a,u)&&(s[u]=a[u]);s.originalType=e,s[c]="string"==typeof e?e:t,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},79482:(e,a,n)=>{n.d(a,{Z:()=>l});var r=n(49231),t=n(19841);const o={tabItem:"tabItem_wqKz"};function l(e){let{children:a,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,t.Z)(o.tabItem,l),hidden:n},a)}},80814:(e,a,n)=>{n.d(a,{Z:()=>A});var r=n(48041),t=n(49231),o=n(19841),l=n(26469),s=n(19409),u=n(29821),i=n(17070),d=n(52086);function c(e){return function(e){return t.Children.map(e,(e=>{if((0,t.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:n,attributes:r,default:t}}=e;return{value:a,label:n,attributes:r,default:t}}))}function v(e){const{values:a,children:n}=e;return(0,t.useMemo)((()=>{const e=a??c(n);return function(e){const a=(0,i.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function p(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function g(e){let{queryString:a=!1,groupId:n}=e;const r=(0,s.k6)(),o=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,u._X)(o),(0,t.useCallback)((e=>{if(!o)return;const a=new URLSearchParams(r.location.search);a.set(o,e),r.replace({...r.location,search:a.toString()})}),[o,r])]}function m(e){const{defaultValue:a,queryString:n=!1,groupId:r}=e,o=v(e),[l,s]=(0,t.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!p({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:o}))),[u,i]=g({queryString:n,groupId:r}),[c,m]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,o]=(0,d.Nk)(n);return[r,(0,t.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),h=(()=>{const e=u??c;return p({value:e,tabValues:o})?e:null})();(0,t.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:l,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),i(e),m(e)}),[i,m,o]),tabValues:o}}var h=n(40683);const b={tabList:"tabList_ITex",tabItem:"tabItem_Bpt4"};function S(e){let{className:a,block:n,selectedValue:s,selectValue:u,tabValues:i}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),v=e=>{const a=e.currentTarget,n=d.indexOf(a),r=i[n].value;r!==s&&(c(a),u(r))},p=e=>{let a=null;switch(e.key){case"Enter":v(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;a=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;a=d[n]??d[d.length-1];break}}a?.focus()};return t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},a)},i.map((e=>{let{value:a,label:n,attributes:l}=e;return t.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===a?0:-1,"aria-selected":s===a,key:a,ref:e=>d.push(e),onKeyDown:p,onClick:v},l,{className:(0,o.Z)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":s===a})}),n??a)})))}function k(e){let{lazy:a,children:n,selectedValue:r}=e;if(n=Array.isArray(n)?n:[n],a){const e=n.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return t.createElement("div",{className:"margin-top--md"},n.map(((e,a)=>(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function f(e){const a=m(e);return t.createElement("div",{className:(0,o.Z)("tabs-container",b.tabList)},t.createElement(S,(0,r.Z)({},e,a)),t.createElement(k,(0,r.Z)({},e,a)))}function A(e){const a=(0,h.Z)();return t.createElement(f,(0,r.Z)({key:String(a)},e))}},44480:(e,a,n)=>{n.d(a,{ZP:()=>s});var r=n(48041),t=(n(49231),n(54852));const o={toc:[{value:"<code>sbv2 near aggregator add history AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-add-history-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator add job AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-add-job-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator create QUEUEADDRESS</code>",id:"sbv2-near-aggregator-create-queueaddress",level:2},{value:"<code>sbv2 near aggregator escrow AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-escrow-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator fetch</code>",id:"sbv2-near-aggregator-fetch",level:2},{value:"<code>sbv2 near aggregator fund AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-fund-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator history add AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-history-add-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator job add AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-job-add-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator job remove AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-job-remove-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator permission create AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-permission-create-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator remove job AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-remove-job-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator set AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-set-aggregatoraddress",level:2},{value:"<code>sbv2 near aggregator update AGGREGATORADDRESS</code>",id:"sbv2-near-aggregator-update-aggregatoraddress",level:2},{value:"<code>sbv2 near crank create QUEUEADDRESS</code>",id:"sbv2-near-crank-create-queueaddress",level:2},{value:"<code>sbv2 near crank list CRANKADDRESS</code>",id:"sbv2-near-crank-list-crankaddress",level:2},{value:"<code>sbv2 near crank pop CRANKADDRESS</code>",id:"sbv2-near-crank-pop-crankaddress",level:2},{value:"<code>sbv2 near crank push CRANKADDRESS</code>",id:"sbv2-near-crank-push-crankaddress",level:2},{value:"<code>sbv2 near create aggregator QUEUEADDRESS</code>",id:"sbv2-near-create-aggregator-queueaddress",level:2},{value:"<code>sbv2 near create aggregator permission AGGREGATORADDRESS</code>",id:"sbv2-near-create-aggregator-permission-aggregatoraddress",level:2},{value:"<code>sbv2 near create crank QUEUEADDRESS</code>",id:"sbv2-near-create-crank-queueaddress",level:2},{value:"<code>sbv2 near create escrow</code>",id:"sbv2-near-create-escrow",level:2},{value:"<code>sbv2 near create job JOBDEFINITION</code>",id:"sbv2-near-create-job-jobdefinition",level:2},{value:"<code>sbv2 near create oracle QUEUEADDRESS</code>",id:"sbv2-near-create-oracle-queueaddress",level:2},{value:"<code>sbv2 near create oracle permission</code>",id:"sbv2-near-create-oracle-permission",level:2},{value:"<code>sbv2 near create queue</code>",id:"sbv2-near-create-queue",level:2},{value:"<code>sbv2 near escrow create</code>",id:"sbv2-near-escrow-create",level:2},{value:"<code>sbv2 near escrow print</code>",id:"sbv2-near-escrow-print",level:2},{value:"<code>sbv2 near fetch aggregators</code>",id:"sbv2-near-fetch-aggregators",level:2},{value:"<code>sbv2 near fund aggregator AGGREGATORADDRESS</code>",id:"sbv2-near-fund-aggregator-aggregatoraddress",level:2},{value:"<code>sbv2 near job create JOBDEFINITION</code>",id:"sbv2-near-job-create-jobdefinition",level:2},{value:"<code>sbv2 near list queue QUEUEADDRESS</code>",id:"sbv2-near-list-queue-queueaddress",level:2},{value:"<code>sbv2 near oracle create QUEUEADDRESS</code>",id:"sbv2-near-oracle-create-queueaddress",level:2},{value:"<code>sbv2 near oracle escrow ORACLEADDRESS</code>",id:"sbv2-near-oracle-escrow-oracleaddress",level:2},{value:"<code>sbv2 near oracle stake ORACLEADDRESS</code>",id:"sbv2-near-oracle-stake-oracleaddress",level:2},{value:"<code>sbv2 near oracle unstake ORACLEADDRESS</code>",id:"sbv2-near-oracle-unstake-oracleaddress",level:2},{value:"<code>sbv2 near oracle up ORACLEADDRESS</code>",id:"sbv2-near-oracle-up-oracleaddress",level:2},{value:"<code>sbv2 near permission create</code>",id:"sbv2-near-permission-create",level:2},{value:"<code>sbv2 near pop crank CRANKADDRESS</code>",id:"sbv2-near-pop-crank-crankaddress",level:2},{value:"<code>sbv2 near print ACCOUNTTYPE ADDRESS</code>",id:"sbv2-near-print-accounttype-address",level:2},{value:"<code>sbv2 near print escrow</code>",id:"sbv2-near-print-escrow",level:2},{value:"<code>sbv2 near push crank CRANKADDRESS</code>",id:"sbv2-near-push-crank-crankaddress",level:2},{value:"<code>sbv2 near queue aggregators QUEUEADDRESS</code>",id:"sbv2-near-queue-aggregators-queueaddress",level:2},{value:"<code>sbv2 near queue create</code>",id:"sbv2-near-queue-create",level:2},{value:"<code>sbv2 near queue feeds QUEUEADDRESS</code>",id:"sbv2-near-queue-feeds-queueaddress",level:2},{value:"<code>sbv2 near queue list QUEUEADDRESS</code>",id:"sbv2-near-queue-list-queueaddress",level:2},{value:"<code>sbv2 near queue set QUEUEADDRESS</code>",id:"sbv2-near-queue-set-queueaddress",level:2},{value:"<code>sbv2 near set aggregator AGGREGATORADDRESS</code>",id:"sbv2-near-set-aggregator-aggregatoraddress",level:2},{value:"<code>sbv2 near update aggregator AGGREGATORADDRESS</code>",id:"sbv2-near-update-aggregator-aggregatoraddress",level:2}]},l="wrapper";function s(e){let{components:a,...n}=e;return(0,t.kt)(l,(0,r.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"interact with switchboard on Near"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-add-history-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator add history AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-add-job-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator add job AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-create-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator create QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-escrow-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator escrow AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-fetch"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator fetch"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-fund-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator fund AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-history-add-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator history add AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-job-add-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator job add AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-job-remove-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator job remove AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-permission-create-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator permission create AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-remove-job-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator remove job AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-set-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator set AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-aggregator-update-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near aggregator update AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-crank-create-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near crank create QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-crank-list-crankaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near crank list CRANKADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-crank-pop-crankaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near crank pop CRANKADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-crank-push-crankaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near crank push CRANKADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-create-aggregator-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near create aggregator QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-create-aggregator-permission-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near create aggregator permission AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-create-crank-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near create crank QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-create-escrow"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near create escrow"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-create-job-jobdefinition"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near create job JOBDEFINITION"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-create-oracle-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near create oracle QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-create-oracle-permission"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near create oracle permission"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-create-queue"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near create queue"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-escrow-create"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near escrow create"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-escrow-print"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near escrow print"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-fetch-aggregators"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near fetch aggregators"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-fund-aggregator-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near fund aggregator AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-job-create-jobdefinition"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near job create JOBDEFINITION"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-list-queue-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near list queue QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-create-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle create QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-escrow-oracleaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle escrow ORACLEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-stake-oracleaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle stake ORACLEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-unstake-oracleaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle unstake ORACLEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-oracle-up-oracleaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near oracle up ORACLEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-permission-create"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near permission create"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-pop-crank-crankaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near pop crank CRANKADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-print-accounttype-address"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near print ACCOUNTTYPE ADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-print-escrow"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near print escrow"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-push-crank-crankaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near push crank CRANKADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-queue-aggregators-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near queue aggregators QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-queue-create"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near queue create"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-queue-feeds-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near queue feeds QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-queue-list-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near queue list QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-queue-set-queueaddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near queue set QUEUEADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-set-aggregator-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near set aggregator AGGREGATORADDRESS"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-near-update-aggregator-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 near update aggregator AGGREGATORADDRESS")))),(0,t.kt)("h2",{id:"sbv2-near-aggregator-add-history-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator add history AGGREGATORADDRESS")),(0,t.kt)("p",null,"add rows to a history vector"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator add history AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--numRows\n    <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --numRows=<value>             [default: 1000] number of rows to add to the aggregator\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add rows to a history vector\n\nALIASES\n  $ sbv2 near aggregator history add\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-add-job-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator add job AGGREGATORADDRESS")),(0,t.kt)("p",null,"add a job to an aggregator"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator add job AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--name <value> | --jobKey <value>] [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --jobDefinition=<value>       filesystem path of job json definition file\n  --jobKey=<value>              public key of an existing job account to add to an aggregator\n  --jobWeight=<value>           [default: 1] job weight\n  --metadata=<value>            metadata of the job account\n  --name=<value>                name of the job account\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job add\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-create-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator create QUEUEADDRESS")),(0,t.kt)("p",null,"create a near aggregator for a given queue"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator create QUEUEADDRESS --accountName <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize <value>]\n    [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [--rewardEscrow <value>] [--enable]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --enable                      if required and queue authority is provided, enable permissions\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --rewardEscrow=<value>        where to send rewards. defaults to user's escrow account\n  --updateInterval=<value>      (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>   [default: 0] percentage change between a previous accepted result and the next round\n                                before an oracle reports a value on-chain. Used to conserve lease cost during low\n                                volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near aggregator for a given queue\n\nALIASES\n  $ sbv2 near create aggregator\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-escrow-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator escrow AGGREGATORADDRESS")),(0,t.kt)("p",null,"view an aggregators escrow state"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator escrow AGGREGATORADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nDESCRIPTION\n  view an aggregators escrow state\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-fetch"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator fetch")),(0,t.kt)("p",null,"fetch all aggregators for a given near account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator fetch --accountId <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountId=<value>           (required) optional, authority to fetch aggregators for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given near account\n\nALIASES\n  $ sbv2 near fetch aggregators\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-fund-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator fund AGGREGATORADDRESS")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator fund AGGREGATORADDRESS --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --amount=<value>          (required) amount to deposit into the aggregator's lease\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sbv2 near fund aggregator\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-history-add-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator history add AGGREGATORADDRESS")),(0,t.kt)("p",null,"add rows to a history vector"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator history add AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--numRows\n    <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --numRows=<value>             [default: 1000] number of rows to add to the aggregator\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add rows to a history vector\n\nALIASES\n  $ sbv2 near aggregator history add\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-job-add-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator job add AGGREGATORADDRESS")),(0,t.kt)("p",null,"add a job to an aggregator"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator job add AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--name <value> | --jobKey <value>] [--metadata <value> | ] [--jobDefinition <value> | ] [--jobWeight <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --jobDefinition=<value>       filesystem path of job json definition file\n  --jobKey=<value>              public key of an existing job account to add to an aggregator\n  --jobWeight=<value>           [default: 1] job weight\n  --metadata=<value>            metadata of the job account\n  --name=<value>                name of the job account\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  add a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job add\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-job-remove-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator job remove AGGREGATORADDRESS")),(0,t.kt)("p",null,"remove a job to an aggregator"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator job remove AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [-j <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -j, --jobAddress=<value>...   public key of an existing job account to remove from an aggregator\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  remove a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job remove\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-permission-create-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator permission create AGGREGATORADDRESS")),(0,t.kt)("p",null,"create a permission account for a near aggregator"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator permission create AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account for a near aggregator\n\nALIASES\n  $ sbv2 near create aggregator permission\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-remove-job-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator remove job AGGREGATORADDRESS")),(0,t.kt)("p",null,"remove a job to an aggregator"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator remove job AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [-j <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate keypair that is the authority for the aggregator\n  -h, --help                    Show CLI help.\n  -j, --jobAddress=<value>...   public key of an existing job account to remove from an aggregator\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  remove a job to an aggregator\n\nALIASES\n  $ sbv2 near aggregator job remove\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-set-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator set AGGREGATORADDRESS")),(0,t.kt)("p",null,"set a near aggregator's config"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator set AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--queueAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod\n    <value>] [--batchSize <value>] [--minJobs <value>] [--minOracles <value>] [--updateInterval <value>]\n    [--varianceThreshold <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --queueAddress=<value>        optional, address of the new queue to add the aggregator to\n  --updateInterval=<value>      set an aggregator's minimum update delay\n  --varianceThreshold=<value>   percentage change between a previous accepted result and the next round before an oracle\n                                reports a value on-chain. Used to conserve lease cost during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set a near aggregator's config\n\nALIASES\n  $ sbv2 near set aggregator\n")),(0,t.kt)("h2",{id:"sbv2-near-aggregator-update-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near aggregator update AGGREGATORADDRESS")),(0,t.kt)("p",null,"request a new value on-chain for an aggregator"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near aggregator update AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sbv2 near update aggregator\n")),(0,t.kt)("h2",{id:"sbv2-near-crank-create-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank create QUEUEADDRESS")),(0,t.kt)("p",null,"create a new crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank create QUEUEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--name <value>] [--metadata <value>]\n    [--maxRows <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --maxRows=<value>             [default: 100] maximum number of rows on the crank\n  --metadata=<value>            metadata of the crank for easier identification\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sbv2 near create crank\n")),(0,t.kt)("h2",{id:"sbv2-near-crank-list-crankaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank list CRANKADDRESS")),(0,t.kt)("p",null,"pop the crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank list CRANKADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 near pop crank\n")),(0,t.kt)("h2",{id:"sbv2-near-crank-pop-crankaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank pop CRANKADDRESS")),(0,t.kt)("p",null,"pop the crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank pop CRANKADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 near pop crank\n")),(0,t.kt)("h2",{id:"sbv2-near-crank-push-crankaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near crank push CRANKADDRESS")),(0,t.kt)("p",null,"push an aggregator onto the crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near crank push CRANKADDRESS --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --aggregatorAddress=<value>  (required) address of the aggregator in Uint8 or Base58 encoding\n  -h, --help                       Show CLI help.\n  -s, --silent                     suppress cli prompts\n  -u, --rpcUrl=<value>             alternate RPC url\n  -v, --verbose                    log everything\n  --accountName=<value>            (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>     [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                   Defaults to ~/.near-credentials\n  --networkId=<option>             [default: testnet] Near network ID to connect to\n                                   <options: testnet|mainnet|localnet>\n  --programId=<value>              Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sbv2 near push crank\n")),(0,t.kt)("h2",{id:"sbv2-near-create-aggregator-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near create aggregator QUEUEADDRESS")),(0,t.kt)("p",null,"create a near aggregator for a given queue"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create aggregator QUEUEADDRESS --accountName <value> --updateInterval <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod <value>] [--batchSize <value>]\n    [--minJobs <value>] [--minOracles <value>] [--varianceThreshold <value>] [--rewardEscrow <value>] [--enable]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --enable                      if required and queue authority is provided, enable permissions\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --rewardEscrow=<value>        where to send rewards. defaults to user's escrow account\n  --updateInterval=<value>      (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>   [default: 0] percentage change between a previous accepted result and the next round\n                                before an oracle reports a value on-chain. Used to conserve lease cost during low\n                                volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near aggregator for a given queue\n\nALIASES\n  $ sbv2 near create aggregator\n")),(0,t.kt)("h2",{id:"sbv2-near-create-aggregator-permission-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near create aggregator permission AGGREGATORADDRESS")),(0,t.kt)("p",null,"create a permission account for a near aggregator"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create aggregator permission AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account for a near aggregator\n\nALIASES\n  $ sbv2 near create aggregator permission\n")),(0,t.kt)("h2",{id:"sbv2-near-create-crank-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near create crank QUEUEADDRESS")),(0,t.kt)("p",null,"create a new crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create crank QUEUEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--name <value>] [--metadata <value>]\n    [--maxRows <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --maxRows=<value>             [default: 100] maximum number of rows on the crank\n  --metadata=<value>            metadata of the crank for easier identification\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new crank\n\nALIASES\n  $ sbv2 near create crank\n")),(0,t.kt)("h2",{id:"sbv2-near-create-escrow"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near create escrow")),(0,t.kt)("p",null,"create an escrow token account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create escrow --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--mint <value>]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --mint=<value>                [default: wrap.test] token mint to create escrow account for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an escrow token account\n\nALIASES\n  $ sbv2 near create escrow\n")),(0,t.kt)("h2",{id:"sbv2-near-create-job-jobdefinition"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near create job JOBDEFINITION")),(0,t.kt)("p",null,"create a job on near"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create job JOBDEFINITION --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>]\n\nARGUMENTS\n  JOBDEFINITION  filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the job account\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the job for easier identification\n  --name=<value>                name of the job for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a job on near\n\nALIASES\n  $ sbv2 near create job\n")),(0,t.kt)("h2",{id:"sbv2-near-create-oracle-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near create oracle QUEUEADDRESS")),(0,t.kt)("p",null,"create a near oracle for a given queue"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create oracle QUEUEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the oracle for easier identification\n  --name=<value>                name of the oracle for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near oracle for a given queue\n\nALIASES\n  $ sbv2 near create oracle\n")),(0,t.kt)("h2",{id:"sbv2-near-create-oracle-permission"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near create oracle permission")),(0,t.kt)("p",null,"create a permission account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create oracle permission --accountName <value> --granter <value> --grantee <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--enable]\n\nFLAGS\n  -a, --authority=<value>       alternate account that is the granters authority\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enable                      enable permissions\n  --grantee=<value>             (required) account that will be granted permissions, typically an Oracle or Aggregator\n  --granter=<value>             (required) account that will grant permissions, typically the OracleQueue\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account\n\nALIASES\n  $ sbv2 near create oracle permission\n")),(0,t.kt)("h2",{id:"sbv2-near-create-queue"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near create queue")),(0,t.kt)("p",null,"create a new oracle queue"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near create queue --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata <value>]\n    [--minStake <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled]\n    [--unpermissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the queue\n  -h, --help                    Show CLI help.\n  -r, --reward=<value>          [default: 0] oracle rewards for successfully responding to an update request\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enableBufferRelayers        enable oracles to fulfill buffer relayer requests\n  --metadata=<value>            metadata of the queue for easier identification\n  --minStake=<value>            [default: 0] minimum stake required by an oracle to join the queue\n  --name=<value>                name of the queue for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --oracleTimeout=<value>       [default: 180] number of oracles to add to the queue\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --queueSize=<value>           [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled             permit slashing malicous oracles\n  --unpermissionedFeeds         permit unpermissioned feeds\n  --unpermissionedVrf           permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 near create queue\n")),(0,t.kt)("h2",{id:"sbv2-near-escrow-create"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near escrow create")),(0,t.kt)("p",null,"create an escrow token account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near escrow create --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--mint <value>]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --mint=<value>                [default: wrap.test] token mint to create escrow account for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an escrow token account\n\nALIASES\n  $ sbv2 near create escrow\n")),(0,t.kt)("h2",{id:"sbv2-near-escrow-print"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near escrow print")),(0,t.kt)("p",null,"print an escrow token account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near escrow print --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an escrow token account\n\nALIASES\n  $ sbv2 near print escrow\n")),(0,t.kt)("h2",{id:"sbv2-near-fetch-aggregators"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near fetch aggregators")),(0,t.kt)("p",null,"fetch all aggregators for a given near account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near fetch aggregators --accountId <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountId=<value>           (required) optional, authority to fetch aggregators for\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given near account\n\nALIASES\n  $ sbv2 near fetch aggregators\n")),(0,t.kt)("h2",{id:"sbv2-near-fund-aggregator-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near fund aggregator AGGREGATORADDRESS")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near fund aggregator AGGREGATORADDRESS --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --amount=<value>          (required) amount to deposit into the aggregator's lease\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nALIASES\n  $ sbv2 near fund aggregator\n")),(0,t.kt)("h2",{id:"sbv2-near-job-create-jobdefinition"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near job create JOBDEFINITION")),(0,t.kt)("p",null,"create a job on near"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near job create JOBDEFINITION --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>]\n\nARGUMENTS\n  JOBDEFINITION  filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the job account\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the job for easier identification\n  --name=<value>                name of the job for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a job on near\n\nALIASES\n  $ sbv2 near create job\n")),(0,t.kt)("h2",{id:"sbv2-near-list-queue-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near list queue QUEUEADDRESS")),(0,t.kt)("p",null,"list aggregators for a given queue"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near list queue QUEUEADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  list aggregators for a given queue\n\nALIASES\n  $ sbv2 near list queue\n")),(0,t.kt)("h2",{id:"sbv2-near-oracle-create-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle create QUEUEADDRESS")),(0,t.kt)("p",null,"create a near oracle for a given queue"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle create QUEUEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --metadata=<value>            metadata of the oracle for easier identification\n  --name=<value>                name of the oracle for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a near oracle for a given queue\n\nALIASES\n  $ sbv2 near create oracle\n")),(0,t.kt)("h2",{id:"sbv2-near-oracle-escrow-oracleaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle escrow ORACLEADDRESS")),(0,t.kt)("p",null,"view an aggregators escrow state"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle escrow ORACLEADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>]\n    [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  view an aggregators escrow state\n")),(0,t.kt)("h2",{id:"sbv2-near-oracle-stake-oracleaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle stake ORACLEADDRESS")),(0,t.kt)("p",null,"deposit funds to an oracle's staking wallet"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle stake ORACLEADDRESS --accountName <value> --amount <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --amount=<value>              (required) amount of Near to deposit into oracle staking wallet\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  deposit funds to an oracle's staking wallet\n")),(0,t.kt)("h2",{id:"sbv2-near-oracle-unstake-oracleaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle unstake ORACLEADDRESS")),(0,t.kt)("p",null,"deposit funds to an oracle's staking wallet"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle unstake ORACLEADDRESS --accountName <value> --amount <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --amount=<value>              (required) amount of Near to unstake from oracle staking wallet\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  deposit funds to an oracle's staking wallet\n")),(0,t.kt)("h2",{id:"sbv2-near-oracle-up-oracleaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near oracle up ORACLEADDRESS")),(0,t.kt)("p",null,"start a near docker oracle"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near oracle up ORACLEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-d <value>] [--releaseChannel\n    testnet|mainnet | --nodeImage <value>]\n\nARGUMENTS\n  ORACLEADDRESS  address of the oracle in Uint8 or Base58 encoding\n\nFLAGS\n  -d, --switchboardDir=<value>  directory with switchboard.env to load a switchboard environment\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress docker logging\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --nodeImage=<value>           [default: dev-v2-RC_04_11_23_17_12] public key of the oracle to start-up\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --releaseChannel=<option>     [default: testnet] the oracle release channel\n                                <options: testnet|mainnet>\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  start a near docker oracle\n")),(0,t.kt)("h2",{id:"sbv2-near-permission-create"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near permission create")),(0,t.kt)("p",null,"create a permission account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near permission create --accountName <value> --granter <value> --grantee <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--enable]\n\nFLAGS\n  -a, --authority=<value>       alternate account that is the granters authority\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enable                      enable permissions\n  --grantee=<value>             (required) account that will be granted permissions, typically an Oracle or Aggregator\n  --granter=<value>             (required) account that will grant permissions, typically the OracleQueue\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a permission account\n\nALIASES\n  $ sbv2 near create oracle permission\n")),(0,t.kt)("h2",{id:"sbv2-near-pop-crank-crankaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near pop crank CRANKADDRESS")),(0,t.kt)("p",null,"pop the crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near pop crank CRANKADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nDESCRIPTION\n  pop the crank\n\nALIASES\n  $ sbv2 near pop crank\n")),(0,t.kt)("h2",{id:"sbv2-near-print-accounttype-address"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near print ACCOUNTTYPE ADDRESS")),(0,t.kt)("p",null,"print a near switchboard account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near print ACCOUNTTYPE ADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [--all]\n\nARGUMENTS\n  ACCOUNTTYPE  (queue|aggregator|crank|oracle|permission|lease|job) account type to print\n  ADDRESS      address of the account to print in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --all                         print all account attributes including jobs, permissions, and leases\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print a near switchboard account\n\nALIASES\n  $ sbv2 near print\n")),(0,t.kt)("h2",{id:"sbv2-near-print-escrow"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near print escrow")),(0,t.kt)("p",null,"print an escrow token account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near print escrow --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  print an escrow token account\n\nALIASES\n  $ sbv2 near print escrow\n")),(0,t.kt)("h2",{id:"sbv2-near-push-crank-crankaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near push crank CRANKADDRESS")),(0,t.kt)("p",null,"push an aggregator onto the crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near push crank CRANKADDRESS --accountName <value> -a <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  CRANKADDRESS  address of the crank in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --aggregatorAddress=<value>  (required) address of the aggregator in Uint8 or Base58 encoding\n  -h, --help                       Show CLI help.\n  -s, --silent                     suppress cli prompts\n  -u, --rpcUrl=<value>             alternate RPC url\n  -v, --verbose                    log everything\n  --accountName=<value>            (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>     [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                   Defaults to ~/.near-credentials\n  --networkId=<option>             [default: testnet] Near network ID to connect to\n                                   <options: testnet|mainnet|localnet>\n  --programId=<value>              Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  push an aggregator onto the crank\n\nALIASES\n  $ sbv2 near push crank\n")),(0,t.kt)("h2",{id:"sbv2-near-queue-aggregators-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue aggregators QUEUEADDRESS")),(0,t.kt)("p",null,"fetch all aggregators for a given queue account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue aggregators QUEUEADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given queue account\n\nALIASES\n  $ sbv2 near queue feeds\n")),(0,t.kt)("h2",{id:"sbv2-near-queue-create"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue create")),(0,t.kt)("p",null,"create a new oracle queue"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue create --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId\n    <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata <value>]\n    [--minStake <value>] [-r <value>] [--oracleTimeout <value>] [--queueSize <value>] [--slashingEnabled]\n    [--unpermissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers]\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the queue\n  -h, --help                    Show CLI help.\n  -r, --reward=<value>          [default: 0] oracle rewards for successfully responding to an update request\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enableBufferRelayers        enable oracles to fulfill buffer relayer requests\n  --metadata=<value>            metadata of the queue for easier identification\n  --minStake=<value>            [default: 0] minimum stake required by an oracle to join the queue\n  --name=<value>                name of the queue for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --oracleTimeout=<value>       [default: 180] number of oracles to add to the queue\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --queueSize=<value>           [default: 100] maximum number of oracles the queue can support\n  --slashingEnabled             permit slashing malicous oracles\n  --unpermissionedFeeds         permit unpermissioned feeds\n  --unpermissionedVrf           permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 near create queue\n")),(0,t.kt)("h2",{id:"sbv2-near-queue-feeds-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue feeds QUEUEADDRESS")),(0,t.kt)("p",null,"fetch all aggregators for a given queue account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue feeds QUEUEADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  fetch all aggregators for a given queue account\n\nALIASES\n  $ sbv2 near queue feeds\n")),(0,t.kt)("h2",{id:"sbv2-near-queue-list-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue list QUEUEADDRESS")),(0,t.kt)("p",null,"list aggregators for a given queue"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue list QUEUEADDRESS [-h] [-v] [-s] [--networkId testnet|mainnet|localnet] [--programId <value>] [-u\n    <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  list aggregators for a given queue\n\nALIASES\n  $ sbv2 near list queue\n")),(0,t.kt)("h2",{id:"sbv2-near-queue-set-queueaddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near queue set QUEUEADDRESS")),(0,t.kt)("p",null,"create a new oracle queue"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near queue set QUEUEADDRESS --accountName <value> [-h] [-v] [-s] [--networkId testnet|mainnet|localnet]\n    [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>] [--name <value>] [--metadata\n    <value>] [--minStake <value>] [-r <value>] [--oracleTimeout <value>] [--slashingEnabled] [--unpermissionedFeeds]\n    [--unpermissionedVrf] [--enableBufferRelayers]\n\nARGUMENTS\n  QUEUEADDRESS  address of the queue in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the queue\n  -h, --help                    Show CLI help.\n  -r, --reward=<value>          oracle rewards for successfully responding to an update request\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --enableBufferRelayers        enable oracles to fulfill buffer relayer requests\n  --metadata=<value>            metadata of the queue for easier identification\n  --minStake=<value>            minimum stake required by an oracle to join the queue\n  --name=<value>                name of the queue for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --oracleTimeout=<value>       number of oracles to add to the queue\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --slashingEnabled             permit slashing malicous oracles\n  --unpermissionedFeeds         permit unpermissioned feeds\n  --unpermissionedVrf           permit unpermissioned VRF accounts\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create a new oracle queue\n\nALIASES\n  $ sbv2 near create queue\n")),(0,t.kt)("h2",{id:"sbv2-near-set-aggregator-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near set aggregator AGGREGATORADDRESS")),(0,t.kt)("p",null,"set a near aggregator's config"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near set aggregator AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json] [-a <value>]\n    [--crankAddress <value>] [--queueAddress <value>] [--name <value>] [--metadata <value>] [--forceReportPeriod\n    <value>] [--batchSize <value>] [--minJobs <value>] [--minOracles <value>] [--updateInterval <value>]\n    [--varianceThreshold <value>]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -a, --authority=<value>       alternate named account that will be the authority for the oracle\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --batchSize=<value>           number of oracles requested for each open round call\n  --crankAddress=<value>        optional, address of the crank to add the aggregator to\n  --forceReportPeriod=<value>   Number of seconds for which, even if the variance threshold is not passed, accept new\n                                responses from oracles.\n  --metadata=<value>            metadata of the crank for easier identification\n  --minJobs=<value>             number of jobs that must respond before an oracle responds\n  --minOracles=<value>          number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                name of the crank for easier identification\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n  --queueAddress=<value>        optional, address of the new queue to add the aggregator to\n  --updateInterval=<value>      set an aggregator's minimum update delay\n  --varianceThreshold=<value>   percentage change between a previous accepted result and the next round before an oracle\n                                reports a value on-chain. Used to conserve lease cost during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set a near aggregator's config\n\nALIASES\n  $ sbv2 near set aggregator\n")),(0,t.kt)("h2",{id:"sbv2-near-update-aggregator-aggregatoraddress"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 near update aggregator AGGREGATORADDRESS")),(0,t.kt)("p",null,"request a new value on-chain for an aggregator"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 near update aggregator AGGREGATORADDRESS --accountName <value> [-h] [-v] [-s] [--networkId\n    testnet|mainnet|localnet] [--programId <value>] [-u <value>] [--nearCredentialsDir <value>] [--json]\n\nARGUMENTS\n  AGGREGATORADDRESS  address of the aggregator in Uint8 or Base58 encoding\n\nFLAGS\n  -h, --help                    Show CLI help.\n  -s, --silent                  suppress cli prompts\n  -u, --rpcUrl=<value>          alternate RPC url\n  -v, --verbose                 log everything\n  --accountName=<value>         (required) Named account to load from your nearCredentialsDir\n  --nearCredentialsDir=<value>  [default: /home/runner/.near-credentials] Alternative directory for near credentials.\n                                Defaults to ~/.near-credentials\n  --networkId=<option>          [default: testnet] Near network ID to connect to\n                                <options: testnet|mainnet|localnet>\n  --programId=<value>           Switchboard programId on the selected Near networkId\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  request a new value on-chain for an aggregator\n\nALIASES\n  $ sbv2 near update aggregator\n")))}s.isMDXComponent=!0},51913:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>u,metadata:()=>d,toc:()=>v});var r=n(48041),t=(n(49231),n(54852)),o=n(80814),l=n(79482),s=n(44480);const u={sidebar_position:8,title:"Sbv2 CLI"},i=void 0,d={unversionedId:"near/dev/cli",id:"near/dev/cli",title:"Sbv2 CLI",description:"<a",source:"@site/docs/near/dev/cli.mdx",sourceDirName:"near/dev",slug:"/near/dev/cli",permalink:"/near/dev/cli",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Sbv2 CLI"},sidebar:"near",previous:{title:"Developer Resources",permalink:"/near/dev/"},next:{title:"sbv2-near",permalink:"/near/dev/rust"}},c={},v=[{value:"Install",id:"install",level:2},{value:"Config",id:"config",level:2},{value:"Commands",id:"commands",level:2}],p={toc:v},g="wrapper";function m(e){let{components:a,...n}=e;return(0,t.kt)(g,(0,r.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("a",{style:{padding:"0 5px"},href:"https://www.npmjs.com/package/@switchboard-xyz/cli"},(0,t.kt)("img",{alt:"NPM Badge",src:"https://img.shields.io/github/package-json/v/switchboard-xyz/sbv2-core?color=red&filename=cli%2Fpackage.json&label=%40switchboard-xyz%2Fcli&logo=npm"})),(0,t.kt)("h2",{id:"install"},"Install"),(0,t.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,t.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g @switchboard-xyz/cli\n"))),(0,t.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -g @switchboard-xyz/cli\n")))),(0,t.kt)("h2",{id:"config"},"Config"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"# Testnet\nsbv2 config set near testnet rpc https://rpc.testnet.near.org\nsbv2 config set near testnet default-account my-named-account.testnet\n\n# Mainnet\nsbv2 config set near mainnet rpc https://rpc.mainnet.near.org\nsbv2 config set near mainnet default-account my-named-account.near\n")),(0,t.kt)("h2",{id:"commands"},"Commands"),(0,t.kt)(s.ZP,{mdxType:"NearCli"}))}m.isMDXComponent=!0}}]);