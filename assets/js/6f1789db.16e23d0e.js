"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7010],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>m});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),p=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(l.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return t?n.createElement(h,o(o({ref:a},c),{},{components:t})):n.createElement(h,o({ref:a},c))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=u;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4008:(e,a,t)=>{t.d(a,{Z:()=>i});var n=t(7357),r=t(2949),s=t(4996),o=t(7294);const i=e=>{const{colorMode:a}=(0,r.I)();let t="inherit";e.lightBg&&"dark"!==a&&(t=e.lightBg),e.darkBg&&"dark"===a&&(t=e.darkBg);let i={};return e.sx&&(i={backgroundColor:t,m:"auto",display:"flex",...i,...e.sx}),o.createElement(n.Z,{component:"img",sx:i,src:(0,s.Z)(e.img)})}},5238:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=t(3117),r=(t(7294),t(3905));t(4008),t(9960);const s={sidebar_position:1,title:"What are Data Feeds?",slug:"."},o="Introduction",i={unversionedId:"feeds/about/about",id:"feeds/about/about",title:"What are Data Feeds?",description:"- Data feeds are permissionless",source:"@site/docs/feeds/about/about.mdx",sourceDirName:"feeds/about",slug:"/feeds/about/",permalink:"/sbv2-core/feeds/about/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"What are Data Feeds?",slug:"."},sidebar:"dataFeeds",next:{title:"Switchboard Tasks",permalink:"/sbv2-core/feeds/tasks"}},l={},p=[{value:"Job Definitions",id:"job-definitions",level:2},{value:"Job Weights",id:"job-weights",level:3},{value:"Lease Contract",id:"lease-contract",level:3},{value:"Requesting Updates",id:"requesting-updates",level:2},{value:"Periodic Updates",id:"periodic-updates",level:3},{value:"Variance Threshold",id:"variance-threshold",level:3},{value:"History Buffer",id:"history-buffer",level:2},{value:"Update Lifecycle",id:"update-lifecycle",level:2},{value:"Update Request",id:"update-request",level:3},{value:"Oracle Execution",id:"oracle-execution",level:3},{value:"Oracle Consensus",id:"oracle-consensus",level:3},{value:"Data Feed Composability",id:"data-feed-composability",level:2}],c={toc:p};function d(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Data feeds are permissionless"),(0,r.kt)("li",{parentName:"ul"},"Data feeds (aggregators) allow the user to customize the number of sources,\nnumber of responses, and consensus threshold"),(0,r.kt)("li",{parentName:"ul"},"Collection of jobs, where to learn more about tasks"),(0,r.kt)("li",{parentName:"ul"},"Data feed history"),(0,r.kt)("li",{parentName:"ul"},"Activity diagram showing the full lifecycle of getting assigned to updates and\npublishing on-chain")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"An aggregator or data feed is what on-chain developers use when building smart\ncontracts. A data feed is a collection of jobs that get aggregated to produce a\nsingle, deterministic result. Typically the first task in a job will fetch\nexternal data with subsequent tasks responsible for parsing the response and\ntransforming the value into a single data type, like an integer or decimal."),(0,r.kt)("p",null,"When an oracle is assigned to process a data feed update, the oracle executes\nthe defined jobs, computes the weighted median of the job responses, and\npublishes the result on-chain. If sufficient oracles respond, the on-chain\nprogram computes the final result as the median of the assigned oracle\nresponses."),(0,r.kt)("h2",{id:"job-definitions"},"Job Definitions"),(0,r.kt)("p",null,"An Aggregator Account stores a collection of Job Account public keys along with\nthe hashes of the job definitions. This is to prevent malicious RPC nodes from\nproviding incorrect task definitions to oracles before fulfillment."),(0,r.kt)("p",null,"A Job Account is a collection of ",(0,r.kt)("a",{parentName:"p",href:"/tasks"},"Switchboard Tasks")," that get executed\nby an oracle sequentially. Each Job Account typically corresponds to a single\ndata source. A data feed requires at least one job account and at most 16 job\naccounts. Switchboard Job Accounts can be used to source data from:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HTTP endpoints, public or private",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mrow",{parentName:"msup"}),(0,r.kt)("mrow",{parentName:"msup"},(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"^{[1]}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.888em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span"}),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.888em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mopen mtight"},"["),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"),(0,r.kt)("span",{parentName:"span",className:"mclose mtight"},"]")))))))))))))),(0,r.kt)("li",{parentName:"ul"},"Websockets"),(0,r.kt)("li",{parentName:"ul"},"On-Chain data from Solana, Ethereum, etc",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Anchor programs"),(0,r.kt)("li",{parentName:"ul"},"JupiterSwap"),(0,r.kt)("li",{parentName:"ul"},"Uniswap"),(0,r.kt)("li",{parentName:"ul"},"SushiSwap"),(0,r.kt)("li",{parentName:"ul"},"Saber"),(0,r.kt)("li",{parentName:"ul"},"... and more")))),(0,r.kt)("p",null,(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mrow",{parentName:"msup"}),(0,r.kt)("mrow",{parentName:"msup"},(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"^{[1]}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.888em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span"}),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.888em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mopen mtight"},"["),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"),(0,r.kt)("span",{parentName:"span",className:"mclose mtight"},"]")))))))))))))," Endpoints requiring an API key require a\n",(0,r.kt)("a",{parentName:"p",href:"/tasks/examples/private-apis/"},"Private APIs")," to prevent leaking the API key\non-chain"),(0,r.kt)("h3",{id:"job-weights"},"Job Weights"),(0,r.kt)("p",null,"A data feed can assign job weights to a job account which will be used when the\noracle calculates the median across the job responses. This is useful to weight\ndata sources by some metric such as liquidity or a reliability score."),(0,r.kt)("p",null,"It is ",(0,r.kt)("strong",{parentName:"p"},"strongly")," recommended to utilize job weights as ",(0,r.kt)("em",{parentName:"p"},"not all data sources\nare created equally"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Currently the only way to set a job weight is to remove and re-add the job\naccount to a feed.")),(0,r.kt)("h3",{id:"lease-contract"},"Lease Contract"),(0,r.kt)("p",null,"The LeaseContract is a pre-funded escrow account to reward oracles for\nfulfilling update request. The LeaseContract has a pre-specified\n",(0,r.kt)("inlineCode",{parentName:"p"},"lease.withdrawAuthority")," which is the only wallet allowed to withdraw funds\nfrom the lease escrow. Any user is able to contribute to a LeaseContract and\nkeep the feed updating."),(0,r.kt)("p",null,"When a new openRound is successfully requested for a data feed, the user who\nrequested it is transferred ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.reward")," tokens from the feeds LeaseContract.\nThis is to incentivize users and crank turners to keep feeds updating based on a\nfeeds config."),(0,r.kt)("p",null,"When a data feed result is accepted on-chain by a batch of oracles, the oracle\nrewards, as specified by ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.reward"),", are automatically deducted from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"lease.escrow")," and transferred to an ",(0,r.kt)("inlineCode",{parentName:"p"},"oracle.tokenAccount"),"."),(0,r.kt)("h2",{id:"requesting-updates"},"Requesting Updates"),(0,r.kt)("p",null,"A feed is updated when someone calls ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregatorOpenRound")," on-chain. If\nopenRound is called before ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.minUpdateDelaySeconds")," have elapsed, the\nopenRound call will fail and the user will forfeit their transaction fees. If\nsuccessful, the user is rewarded for keeping the feed updating."),(0,r.kt)("h3",{id:"periodic-updates"},"Periodic Updates"),(0,r.kt)("p",null,"Any data feed permitted to request updates on a queue is also permitted to join\na queue's existing Crank, ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.crankPubkey"),". A Crank is the scheduling\nmechanism behind feeds that allow them to be periodically updated. The Crank is\na buffer account that stores a collection of aggregator public keys, ordered by\ntheir next available update, with some level of jitter added to prevent a\npredictable oracle allocation cycle"),(0,r.kt)("p",null,"When a feeds Lease Contract is low on funds, it is automatically removed from\nthe crank and must be manually repushed upon refunding the LeaseContract."),(0,r.kt)("p",null,"A feed can set ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.disableCrank")," to prevent being pushed onto a Crank\nand draining it's lease."),(0,r.kt)("h3",{id:"variance-threshold"},"Variance Threshold"),(0,r.kt)("p",null,"A feed can set an ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.varianceThreshold")," to instruct an oracle to skip\nreporting a value on-chain if the percentage change between the current result\nand the ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.previousConfirmedRoundResult")," is not exceeded. This is a\ncost saving tool to conserve lease cost during low volatility."),(0,r.kt)("p",null,"A feeds ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.forceReportPeriod")," is the compliment and instructs an oracle\nto always report a result if ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.forceReportPeriod")," seconds have elapsed\nsince the last successful confirmed round. This can be thought of as the maximum\nallowable staleness for a feed."),(0,r.kt)("p",null,"The two settings above can greatly increase the lifespan of a feed's lease but\nalso makes it difficult to estimate the remaining time on a lease."),(0,r.kt)("p",null,"Check out\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/switchboard-v2/tree/main/packages/lease-observer"},"@switchboard-xyz/lease-observer"),"\nto get PagerDuty alerts when a lease crosses a low balance threshold."),(0,r.kt)("h2",{id:"history-buffer"},"History Buffer"),(0,r.kt)("p",null,"A history buffer account stores a set number of accepted results for an\naggregator, and given Solana\u2019s maximum account size of 10MB, the maximum number\nof samples a single history buffer can support is ~350,000 samples. An\naggregator can only have a single history buffer associated with it."),(0,r.kt)("p",null,"A history buffer has a static account size when it is initialized, equal to:\n",(0,r.kt)("inlineCode",{parentName:"p"},"12 Bytes + (28 Bytes \xd7 Num Samples)"),". Each time an aggregator value is updated\non-chain, the associated history buffer is shifted to the right, and the last\nvalue is dropped."),(0,r.kt)("p",null,"This feature allows Switchboard tasks to parse a history buffer and perform a\nset of calculations, such as the TwapTask. This allows feeds to reference other\nfeeds and perform complex calculations based on historical samples."),(0,r.kt)("h2",{id:"update-lifecycle"},"Update Lifecycle"),(0,r.kt)("p",null,"Let's walk through what the feed update lifecycle looks like."),(0,r.kt)("h3",{id:"update-request"},"Update Request"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Any user calls ",(0,r.kt)("a",{parentName:"li",href:"/idl/instructions/aggregatorOpenRound"},"aggregatorOpenRound"),",\neither manually or via a crank turn"),(0,r.kt)("li",{parentName:"ul"},"sbv2 program checks if ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.minUpdateDelaySeconds")," have passed since\nthe last openRound call"),(0,r.kt)("li",{parentName:"ul"},"sbv2 program checks if a LeaseContract has enough funds to reward the oracles\nfor the next round"),(0,r.kt)("li",{parentName:"ul"},"sbv2 program assigns the next ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.oracleRequestBatchSize")," oracles to\nthe update request and emits an\n",(0,r.kt)("a",{parentName:"li",href:"/idl/events/AggregatorOpenRoundEvent"},"AggregatorOpenRoundEvent"))),(0,r.kt)("h3",{id:"oracle-execution"},"Oracle Execution"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Oracle watches the chain for an\n",(0,r.kt)("a",{parentName:"li",href:"/idl/events/AggregatorOpenRoundEvent"},"AggregatorOpenRoundEvent")," with the\noracle's public key assigned to the update"),(0,r.kt)("li",{parentName:"ul"},"Oracle fetches the feed and job account definitions from its RPC Provider"),(0,r.kt)("li",{parentName:"ul"},"Oracle verifies the job account definitions match the feeds\n",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.jobHashes")),(0,r.kt)("li",{parentName:"ul"},"Oracle executes the job definitions in parallel"),(0,r.kt)("li",{parentName:"ul"},"When an oracle receives ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.minJobResults"),", it calculates the weighted\nmedian based on the feeds ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.jobWeights"),". Note, this is not enforced\non-chain and is purely up to the oracle to respect"),(0,r.kt)("li",{parentName:"ul"},"If a feed has configured a ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.varianceThreshold")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.forceReportPeriod")," has not elapsed, the oracle calculates the\npercentage change between its calculated result and the previous confirmed\nround. If it does not exceed the feeds ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.varianceThreshold"),", the\noracle drops the update request and waits for new update request"),(0,r.kt)("li",{parentName:"ul"},"If a feeds configuration dictate a new on-chain result, the oracle submits an\n",(0,r.kt)("a",{parentName:"li",href:"https://docs.switchboard.xyz/idl/instructions/aggregatorSaveResult"},"aggregatorSaveResult"),"\ntransaction")),(0,r.kt)("h3",{id:"oracle-consensus"},"Oracle Consensus"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"sbv2 program waits for ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.minOracleResults")," to be submitted by the\nassigned oracles"),(0,r.kt)("li",{parentName:"ul"},"When sufficient oracle responses, the sbv2 program computes the accepted value\nfrom the median of the oracle responses"),(0,r.kt)("li",{parentName:"ul"},"If a feed has a history buffer account, the accepted result is pushed onto the\nbuffer"),(0,r.kt)("li",{parentName:"ul"},"Oracles that responded within ",(0,r.kt)("inlineCode",{parentName:"li"},"queue.varianceToleranceMultiplier")," are rewarded\n",(0,r.kt)("inlineCode",{parentName:"li"},"queue.reward")," from the feed's LeaseContract"),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"queue.slashingEnabled"),", oracles that responded outside the\n",(0,r.kt)("inlineCode",{parentName:"li"},"queue.varianceToleranceMultiplier")," are slashed ",(0,r.kt)("inlineCode",{parentName:"li"},"queue.reward")," tokens from\nit's ",(0,r.kt)("inlineCode",{parentName:"li"},"oracle.tokenAccount")," and transferred to the feed's ",(0,r.kt)("inlineCode",{parentName:"li"},"lease.escrow")),(0,r.kt)("li",{parentName:"ul"},"If additional oracle responses are submitted after a value has been accepted,\nthe median is recalculated based on the new response set, oracle rewards are\nredistributed, and the history buffer value is updated")),(0,r.kt)("h2",{id:"data-feed-composability"},"Data Feed Composability"),(0,r.kt)("p",null,"Data feeds may reference other data feeds and build upon each other. It is\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"strongly"))," recommended that you own any feed that you reference in case of\ndownstream impacts out of your control. While anyone can extend another feeds\nlease, a lease owner can always withdraw any lease funds and prevent future\nupdates."),(0,r.kt)("p",null,"As an example, you could construct the following feed definition:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a Switchboard feed that sources SOL/USD prices from a variety of\nexchanges, each weighted by their 7d volume, along with a history buffer"),(0,r.kt)("li",{parentName:"ul"},"Create a Switchboard feed that uses an OracleTask to fetch the Pyth SOL/USD\nprice every 10 seconds, along with a history buffer"),(0,r.kt)("li",{parentName:"ul"},"Create a Switchboard feed that uses an OracleTask to fetch the Chainlink\nSOL/USD price every 10 seconds, along with a history buffer"),(0,r.kt)("li",{parentName:"ul"},"Finally, create a Switchboard feed that calculates the 1min TWAP of each\nsource above and returns the median of the results")),(0,r.kt)("p",null,"This is just a small window into how Switchboard feeds can build on each other\nand let the downstream consumer configure their feeds to meet their own use\ncases."))}d.isMDXComponent=!0}}]);