"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7668],{26777:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(49231),r=a(19841);const o={tabItem:"tabItem_okbR"};function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:a},t)}},79510:(e,t,a)=>{a.d(t,{Z:()=>p});var n=a(95907),r=a(49231),o=a(19841),s=a(74274),i=a(52692),l=a(8253);const c={tabList:"tabList_f3tl",tabItem:"tabItem_Z8Bx"};function u(e){let{className:t,block:a,selectedValue:i,selectValue:l,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:h}=(0,s.o5)(),p=e=>{const t=e.currentTarget,a=d.indexOf(t),n=u[a].value;n!==i&&(h(t),l(n))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},s,{className:(0,o.Z)("tabs__item",c.tabItem,s?.className,{"tabs__item--active":i===t})}),a??t)})))}function d(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function h(e){const t=(0,i.Y)(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",c.tabList)},r.createElement(u,(0,n.Z)({},e,t)),r.createElement(d,(0,n.Z)({},e,t)))}function p(e){const t=(0,l.Z)();return r.createElement(h,(0,n.Z)({key:String(t)},e))}},52692:(e,t,a)=>{a.d(t,{Y:()=>h});var n=a(49231),r=a(19409),o=a(73433),s=a(64194),i=a(77148);function l(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function c(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??l(a);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function u(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const s=(0,r.k6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o._X)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(s.location.search);t.set(i,e),s.replace({...s.location,search:t.toString()})}),[i,s])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,o=c(e),[s,l]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[h,p]=d({queryString:a,groupId:r}),[m,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,i.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:r}),f=(()=>{const e=h??m;return u({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,o]),tabValues:o}}},65797:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(92407),r=a(5485),o=a(74399),s=a(49231);const i=e=>{const{colorMode:t}=(0,n.I)();let a=(0,r.Z)("dark"===t&&e.darkImg?e.darkImg:e.img),i="inherit";e.lightBg&&"dark"!==t&&(i=e.lightBg),e.darkBg&&"dark"===t&&(i=e.darkBg);let l={};return e.sx&&(l={backgroundColor:i,m:"auto",display:"flex",...l,...e.sx}),s.createElement(o.Z,{component:"img",sx:l,src:a})}},37758:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(95907),r=(a(49231),a(54852));a(65797),a(28784),a(16299),a(79510),a(26777);const o={sidebar_position:3,title:"Anchor: Read Feed On-Chain",description:"Learn how to read a feed using the Anchor framework."},s=void 0,i={unversionedId:"solana/guides/feeds/anchor",id:"solana/guides/feeds/anchor",title:"Anchor: Read Feed On-Chain",description:"Learn how to read a feed using the Anchor framework.",source:"@site/docs/solana/guides/feeds/anchor.mdx",sourceDirName:"solana/guides/feeds",slug:"/solana/guides/feeds/anchor",permalink:"/solana/guides/feeds/anchor",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Anchor: Read Feed On-Chain",description:"Learn how to read a feed using the Anchor framework."},sidebar:"solanaSidebar",previous:{title:"Native Rust: Read Feed On-Chain",permalink:"/solana/guides/feeds/rust"},next:{title:"Priority Fees",permalink:"/solana/guides/feeds/priority-fees"}},l={},c=[{value:"1. Add switchboard-v2",id:"1-add-switchboard-v2",level:2},{value:"2. <code>ReadResult</code> Context",id:"2-readresult-context",level:2},{value:"3. <code>read_result</code> Instruction",id:"3-read_result-instruction",level:2},{value:"4. Off-Chain: Read the result!",id:"4-off-chain-read-the-result",level:2}],u={toc:c},d="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide will show you how to read a Switchboard data feed."),(0,r.kt)("p",null,"In order to read a Switchboard data feed using Anchor, we will need to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add the switchboard-v2 dependency"),(0,r.kt)("li",{parentName:"ol"},"Create the ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadResult")," Accounts context containing the Switchboard data feed"),(0,r.kt)("li",{parentName:"ol"},"Create the ",(0,r.kt)("inlineCode",{parentName:"li"},"read_result")," instruction with the ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadResult")," Accounts context"),(0,r.kt)("li",{parentName:"ol"},"Submit a transaction on-chain with the ",(0,r.kt)("inlineCode",{parentName:"li"},"read_result")," instruction")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"View the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/sbv2-solana/tree/main/programs/anchor-feed-parser"},"anchor-feed-parser"),"\nexample on Github.")),(0,r.kt)("h2",{id:"1-add-switchboard-v2"},"1. Add switchboard-v2"),(0,r.kt)("p",null,"Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"switchboard-v2")," crate to your Cargo.toml file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nswitchboard-v2 = "0.1"\n')),(0,r.kt)("h2",{id:"2-readresult-context"},"2. ",(0,r.kt)("inlineCode",{parentName:"h2"},"ReadResult")," Context"),(0,r.kt)("p",null,"Anchor provides the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/anchor-lang/latest/anchor_lang/accounts/account_loader/struct.AccountLoader.html"},"anchor-lang AccountLoader"),"\ntrait to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"verify the account has the correct discriminator (all AggregatorAccounts share\nthe same first 8 bytes)"),(0,r.kt)("li",{parentName:"ul"},"the account is owned by the program ID defined in the switchboard-v2 crate")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadResult")," Accounts context would look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::prelude::*;\nuse switchboard_v2::{AggregatorAccountData};\n\n#[derive(Accounts)]\npub struct ReadResult<'info> {\n    pub switchboard_aggregator: AccountLoader<'info, AggregatorAccountData>,\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You should store the aggregator's pubkey somewhere in your program state and\nverify the expected aggregator was passed into your instruction."),(0,r.kt)("p",{parentName:"admonition"},"If you are building a DeFi market you may have a MyMarket account type storing\nthe SOL/USD Switchboard feed address in the field ",(0,r.kt)("inlineCode",{parentName:"p"},"switchboard_aggregator"),". You\ncan then verify this pubkey in the Accounts context like the following:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::prelude::*;\nuse switchboard_v2::{AggregatorAccountData};\n\n#[account(zero_copy)]\npub struct MyMarket {\n    pub bump: u8,\n    pub switchboard_aggregator: Pubkey,\n}\n\n#[derive(Accounts)]\npub struct ReadResult<'info> {\n    #[account(\n        has_one = switchboard_aggregator\n    )]\n    pub market: AccountLoader<'info, MyMarket>,\n    pub switchboard_aggregator: AccountLoader<'info, AggregatorAccountData>,\n}\n"))),(0,r.kt)("h2",{id:"3-read_result-instruction"},"3. ",(0,r.kt)("inlineCode",{parentName:"h2"},"read_result")," Instruction"),(0,r.kt)("p",null,"Now lets add a ",(0,r.kt)("inlineCode",{parentName:"p"},"read_result")," instruction to our program and pass in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"ReadResult")," context."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"First"),", we will deserialize the account data into the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/switchboard-v2/0.1.22/switchboard_v2/aggregator/struct.AggregatorAccountData.html"},"AggregatorAccountData (docs.rs)"),"\nstruct."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Next"),", we will use the TryInto trait to convert the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/switchboard-v2/0.1.22/switchboard_v2/decimal/struct.SwitchboardDecimal.html"},"SwitchboardDecimal (docs.rs)"),"\ninto the ",(0,r.kt)("inlineCode",{parentName:"p"},"f64")," primitive because it's easier to work with."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SwitchboardDecimal")," struct is a basic wrapper around the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/rust_decimal/1.29.1/rust_decimal/"},"rust-decimal (docs.rs)"),"\nimplementation.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Finally"),", we will verify the feed was updated in the last 300 seconds so we\naren't consuming a stale value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use anchor_lang::prelude::*;\nuse anchor_lang::solana_program::clock;\n\nuse std::convert::TryInto;\n\n#[program]\npub mod anchor_feed_parser {\n    use super::*;\n\n    pub fn read_result(\n        ctx: Context<ReadResult>\n    ) -> anchor_lang::Result<()> {\n        let feed = &ctx.accounts.switchboard_aggregator.load()?;\n\n        // get result\n        let val: f64 = feed.get_result()?.try_into()?;\n\n        // check whether the feed has been updated in the last 300 seconds\n        feed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)\n            .map_err(|_| error!(FeedErrorCode::StaleFeed))?;\n\n        msg!("Current feed result is {}!", val);\n\n        // Your custom logic here\n\n        Ok(())\n    }\n}\n\n#[error_code]\n#[derive(Eq, PartialEq)]\npub enum FeedErrorCode {\n    #[msg("Switchboard feed has not been updated in 5 minutes")]\n    StaleFeed,\n}\n\n')),(0,r.kt)("h2",{id:"4-off-chain-read-the-result"},"4. Off-Chain: Read the result!"),(0,r.kt)("p",null,"We will need to build a Solana transaction that contains our aggregator address\nto read."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@coral-xyz/anchor";\nimport { sleep } from "@switchboard-xyz/common";\nimport {\n  AggregatorAccount,\n  SwitchboardProgram,\n} from "@switchboard-xyz/solana.js";\nimport assert from "assert";\nimport { AnchorFeedParser } from "../target/types/anchor_feed_parser";\n\ndescribe("anchor-feed-parser test", () => {\n  const provider = anchor.AnchorProvider.env();\n  anchor.setProvider(provider);\n\n  const feedParserProgram: anchor.Program<AnchorFeedParser> =\n    anchor.workspace.AnchorFeedParser;\n\n  let switchboard: SwitchboardProgram;\n  let aggregatorAccount: AggregatorAccount;\n\n  it("Reads a Switchboard data feed", async () => {\n    const signature = await feedParserProgram.methods\n      .readResult()\n      .accounts({ switchboardAggregator: aggregatorAccount.publicKey })\n      .rpc();\n\n    // wait for RPC\n    await sleep(2000);\n\n    const logs = await provider.connection.getParsedTransaction(\n      signature,\n      "confirmed"\n    );\n\n    console.log(JSON.stringify(logs?.meta?.logMessages, undefined, 2));\n\n    const match = JSON.stringify(logs?.meta?.logMessages ?? []).match(\n      new RegExp(/Current feed result is (?<feed_result>\\d+)/)\n    );\n    const feedResult = Number(match?.groups?.feed_result ?? null);\n    console.log(`Feed Result: ${feedResult}`);\n  });\n});\n')))}h.isMDXComponent=!0}}]);