"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6807],{54852:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>m});var t=r(49231);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},b=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(r),b=a,m=d["".concat(l,".").concat(b)]||d[b]||p[b]||s;return r?t.createElement(m,o(o({ref:n},c),{},{components:r})):t.createElement(m,o({ref:n},c))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=b;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}b.displayName="MDXCreateElement"},33227:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var t=r(95634),a=(r(49231),r(54852));const s={title:"sbv2-near",slug:"/near/rust",hide_title:!0,sidebar_class_name:"sidebar__rust",sidebar_position:2},o=void 0,i={unversionedId:"near/sbv2-near",id:"near/sbv2-near",title:"sbv2-near",description:"Switchboard Logo",source:"@site/docs/near/sbv2-near.mdx",sourceDirName:"near",slug:"/near/rust",permalink:"/near/rust",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"sbv2-near",slug:"/near/rust",hide_title:!0,sidebar_class_name:"sidebar__rust",sidebar_position:2},sidebar:"gettingStartedSidebar",previous:{title:"@switchboard-xyz/near.js",permalink:"/near/javascript"},next:{title:"feed-parser",permalink:"/near/feed-parser"}},l={},u=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2}],c={toc:u},d="wrapper";function p(e){let{components:n,...r}=e;return(0,a.kt)(d,(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("div",{align:"center"},(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/switchboard-xyz/sbv2-core/raw/main/website/static/img/icons/switchboard/avatar.png",alt:"Switchboard Logo"})),(0,a.kt)("h1",{id:"sbv2-near"},"sbv2-near"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A Rust crate to deserialize and read a Switchboard data feed within a NEAR\ncontract.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/sbv2-near"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/crates/v/sbv2-near?label=sbv2-near&logo=rust%22",alt:"Crates.io"})))),(0,a.kt)("h2",{id:"install"},"Install"),(0,a.kt)("p",null,"Add the following to your your Cargo.toml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nnear-sdk = "4.0.0"\nsbv2-near = "0.1.0\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};\nuse near_sdk::env::log_str;\nuse near_sdk::log;\nuse near_sdk::near_bindgen;\nuse near_sdk::serde_json::json;\nuse near_sdk::Promise;\nuse near_sdk::PromiseResult::Successful;\nuse serde::{Deserialize, Serialize};\nuse serde_json;\nuse std::convert::TryInto;\n\nuse sbv2_near::{AggregatorRound, Uuid, SWITCHBOARD_PROGRAM_ID};\n\nmacro_rules! json_buf {\n    ($x:tt) => {\n        json!($x).to_string().as_bytes().to_vec()\n    };\n}\n\n#[near_bindgen]\n#[derive(BorshDeserialize, BorshSerialize, Default)]\npub struct Contract {}\n\n#[near_bindgen]\nimpl Contract {\n    #[payable]\n    pub fn aggregator_read(&mut self, ix: Ix) -> Promise {\n        Promise::new(SWITCHBOARD_PROGRAM_ID.parse().unwrap())\n            .function_call(\n                "aggregator_read".into(),\n                json_buf!({\n                    "ix": {\n                        "address": ix.address,\n                        "payer": ix.address,\n                    }\n                }),\n                near_sdk::ONE_YOCTO,\n                near_sdk::Gas(30000000000000), // WHAT IF GAS RUNS OUT?? need to make sure enough?\n            )\n            .then(\n                Promise::new(near_sdk::env::current_account_id()).function_call(\n                    "callback".into(),\n                    json_buf!({}),\n                    near_sdk::ONE_YOCTO,\n                    near_sdk::Gas(30000000000000), // WHAT IF GAS RUNS OUT?? need to make sure enough?\n                ),\n            )\n    }\n    #[payable]\n    pub fn callback(&mut self) {\n        let maybe_round = near_sdk::env::promise_result(0);\n        if let Successful(serialized_round) = maybe_round {\n            let round: AggregatorRound = serde_json::from_slice(&serialized_round).unwrap();\n            let val: f64 = round.result.try_into().unwrap();\n            log!("Feed value: {:?}", val);\n        } else {\n            log_str("error");\n        }\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct Ix {\n    pub address: [u8; 32],\n}\n\n')))}p.isMDXComponent=!0}}]);