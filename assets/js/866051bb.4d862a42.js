"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3178],{54852:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(49231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,m=d["".concat(u,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(m,i(i({ref:t},s),{},{components:n})):a.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[d]="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},77680:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(49231),r=n(19841);const o={tabItem:"tabItem_ftN3"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},8450:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(66e3),r=n(49231),o=n(19841),i=n(61084),c=n(95773),u=n(16082);const l={tabList:"tabList_QucB",tabItem:"tabItem_qpyD"};function s(e){let{className:t,block:n,selectedValue:c,selectValue:u,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),h=e=>{const t=e.currentTarget,n=d.indexOf(t),a=s[n].value;a!==c&&(p(t),u(a))},m=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:c===t?0:-1,"aria-selected":c===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:h},i,{className:(0,o.Z)("tabs__item",l.tabItem,i?.className,{"tabs__item--active":c===t})}),n??t)})))}function d(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function p(e){const t=(0,c.Y)(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",l.tabList)},r.createElement(s,(0,a.Z)({},e,t)),r.createElement(d,(0,a.Z)({},e,t)))}function h(e){const t=(0,u.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},95773:(e,t,n)=>{n.d(t,{Y:()=>p});var a=n(49231),r=n(19409),o=n(26002),i=n(75851),c=n(95149);function u(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function l(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,i.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function s(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:n}=e;const i=(0,r.k6)(),c=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(c),(0,a.useCallback)((e=>{if(!c)return;const t=new URLSearchParams(i.location.search);t.set(c,e),i.replace({...i.location,search:t.toString()})}),[c,i])]}function p(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=l(e),[i,u]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!s({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[p,h]=d({queryString:n,groupId:r}),[m,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),b=(()=>{const e=p??m;return s({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{b&&u(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!s({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);u(e),h(e),f(e)}),[h,f,o]),tabValues:o}}},73383:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(58681),r=n(78488),o=n(76681),i=n(49231);const c=e=>{const{colorMode:t}=(0,a.I)();let n=(0,r.Z)("dark"===t&&e.darkImg?e.darkImg:e.img),c="inherit";e.lightBg&&"dark"!==t&&(c=e.lightBg),e.darkBg&&"dark"===t&&(c=e.darkBg);let u={};return e.sx&&(u={backgroundColor:c,m:"auto",display:"flex",...u,...e.sx}),i.createElement(o.Z,{component:"img",sx:u,src:n})}},41202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var a=n(66e3),r=(n(49231),n(54852)),o=(n(73383),n(44229),n(18521),n(8450)),i=n(77680);const c={sidebar_position:3,title:"Functions: Getting Started",description:"Learn how to use Switchboard Functions to push data to your on-chain programs on a schedule or on-demand"},u=void 0,l={unversionedId:"guides/solana/functions/index",id:"guides/solana/functions/index",title:"Functions: Getting Started",description:"Learn how to use Switchboard Functions to push data to your on-chain programs on a schedule or on-demand",source:"@site/docs/guides/solana/functions/index.mdx",sourceDirName:"guides/solana/functions",slug:"/guides/solana/functions/",permalink:"/guides/solana/functions/",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Functions: Getting Started",description:"Learn how to use Switchboard Functions to push data to your on-chain programs on a schedule or on-demand"},sidebar:"guidesSidebar",previous:{title:"VRF Integration",permalink:"/guides/solana/vrf/"},next:{title:"Test Integration",permalink:"/guides/solana/test-integration"}},s={},d=[{value:"Define Switchboard interface in your program",id:"define-switchboard-interface-in-your-program",level:2},{value:"Write our custom function",id:"write-our-custom-function",level:2},{value:"Deploy function to Docker container",id:"deploy-function-to-docker-container",level:2},{value:"Create Switchboard function account",id:"create-switchboard-function-account",level:2}],p={toc:d},h="wrapper";function m(e){let{components:t,...c}=e;return(0,r.kt)(h,(0,a.Z)({},p,c,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Switchboard functions allow you to write your own Rust code in order to push\ndata to your program. You can choose to execute these functions on a pre-defined\nschedule, on-demand with custom parameters, or both!"),(0,r.kt)("p",null,"In this example we will build a custom oracle that pushes the latest price of\nBTC, ETH, and SOL to your program every 5 seconds."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Integration Checklist:")),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Define Switchboard interface in your program"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Write our custom function"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Deploy function to Docker container"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Create Switchboard function account")),(0,r.kt)("h2",{id:"define-switchboard-interface-in-your-program"},"Define Switchboard interface in your program"),(0,r.kt)("p",null,'The Attestation Program contains a set of verifier oracles which watch the chain\nfor attestation requests. When a request is found the verifier oracles will\nexecute your container within a secure enclave. The container contains your\ncustom off-chain logic and needs to return a list of instructions along with a\nquote generated from within the enclave. The verifier oracles will attest, or\n"verify", that the code running within the enclave matches the expected enclave\nvalues you control.'),(0,r.kt)("p",null,"The very first instruction returned by your function should be the Switchboard\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"functionVerify"))," instruction. This instruction is signed by the verifier\noracle which is also run within an enclave and has its verifier codebase\nattested on-chain. If we can prove the keypair never left the enclave and the\nkeypair signed the transaction, then we can be sure that the code was executed\nsecurely."),(0,r.kt)("p",null,"Your on-chain program needs to have an instruction which verifies the\n",(0,r.kt)("inlineCode",{parentName:"p"},"function.enclaveSigner")," has signed the transaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use switchboard_solana::{EnclaveAccountData, FunctionAccountData};\n\n#[derive(Accounts)]\npub struct SaveDataInstruction<'info> {\n    // ... your required accounts to modify your program's state\n\n    // We use this to derive and verify the functions enclave state\n    #[account(\n        constraint =\n            FunctionAccountData::validate_enclave(\n                &function.to_account_info(),\n                &enclave.to_account_info(),\n                &enclave_signer.to_account_info()\n            )?\n    )]\n    pub function: AccountLoader<'info, FunctionAccountData>,\n    pub enclave: AccountLoader<'info, EnclaveAccountData>,\n    pub enclave_signer: Signer<'info>,\n}\n\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"validate_enclave")," method will verify:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The provided enclave account corresponds to the provided function account"),(0,r.kt)("li",{parentName:"ol"},"The provided signer matches the function's enclave signer and has signed the\ntransaction"),(0,r.kt)("li",{parentName:"ol"},"The provided enclave accounts mr_enclave value is present in the function\naccounts mr_enclaves array.")),(0,r.kt)("h2",{id:"write-our-custom-function"},"Write our custom function"),(0,r.kt)("p",null,"Now we need to write our custom function which will invoke our program and save\nthe trading prices to our program state."),(0,r.kt)("p",null,"Clone the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/solana-functions-template"},"solana-functions-template"),"\nrepository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gh repo create myrepo --template switchboard-xyz/solana-functions-template\n# or just git clone\ngit clone https://github.com/switchboard-xyz/solana-functions-template.git\n")),(0,r.kt)("p",null,"You should see a file in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main.rs")," similar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub use switchboard_solana::prelude::*;\n\n#[tokio::main(worker_threads = 12)]\nasync fn main() {\n    // First, initialize the runner instance with a freshly generated Gramine keypair\n    let runner = FunctionRunner::new_from_cluster(Cluster::Devnet, None).unwrap();\n\n    // Then, write your own Rust logic and build a Vec of instructions.\n    // Should  be under 700 bytes after serialization\n    let ixs: Vec<solana_program::instruction::Instruction> = vec![];\n\n    // Finally, emit the signed quote and partially signed transaction to the functionRunner oracle\n    // The functionRunner oracle will use the last outputted word to stdout as the serialized result. This is what gets executed on-chain.\n    runner.emit(ixs).await.unwrap();\n}\n")),(0,r.kt)("p",null,"To write your custom Switchboard function just append instructions to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ixs"),"\narray. The FunctionRunner will automatically prepend the ",(0,r.kt)("inlineCode",{parentName:"p"},"function_verify"),"\ninstruction with the quote generated from the enclave. The quote verifier oracle\nrunning the function will verify this instruction before sending your\ntransaction."),(0,r.kt)("p",null,"See\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/examples/functions/01_basic_oracle/sgx-function/src/main.rs"},"examples/functions/01_basic_oracle/sgx-function/src/main.rs"),"\nin Switchboard's Solana SDK for the full example code."),(0,r.kt)("h2",{id:"deploy-function-to-docker-container"},"Deploy function to Docker container"),(0,r.kt)("p",null,"The template repository includes a Makefile to streamline publishing your\ncontainer to the docker repository along with outputting your MrEnclave\nmeasurement. This measurement corresponds to the code fingerprint of the\noutputted Rust binary. You should store this value in the function account we\ncreate in the following step. This will ensure that the only code that is\nallowed to add data to your smart contract must be generated from a binary with\nthis signature. You can add multiple MrEnclave values to your function account\nto allow backwards compatibility and make upgrades easier."),(0,r.kt)("p",null,"Edit the Makefile and add your docker registry."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-makefile"},"# Variables\n## Cargo.toml name of the compiled binary\nCARGO_NAME=switchboard-function\n## Docker registry image name (Ex: switchboardlabs/basic-oracle-function)\nDOCKER_IMAGE_NAME=switchboard-function\n")),(0,r.kt)("p",null,"Use one of the following commands to compile your function:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Command"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"make")),(0,r.kt)("td",{parentName:"tr",align:null},"Build the container locally and output the MrEnclave measurement")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"make publish")),(0,r.kt)("td",{parentName:"tr",align:null},"Publish the container to the provided docker repository under the latest tag")))),(0,r.kt)("h2",{id:"create-switchboard-function-account"},"Create Switchboard function account"),(0,r.kt)("p",null,"Finally we just need to create our function account on-chain. We will define a\ncron schedule of ",(0,r.kt)("inlineCode",{parentName:"p"},"5 * * * * *")," which will invoke our function every 5 seconds.\nWe will need to pre-fund our function escrow account in order to reward verifier\noracles for running our function."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{attributes:{className:"navbar_icon__switchboard"},value:"ui",label:"Web App",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Visit the Switchboard app:\n",(0,r.kt)("a",{parentName:"p",href:"https://beta.app.switchboard.xyz/"},"beta.app.switchboard.xyz")),(0,r.kt)("p",null,"In the top right, sign in to your Solana wallet for the selected cluster."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Switchboard App Sign-in Solana",src:n(85454).Z,width:"1058",height:"356"})),(0,r.kt)("p",null,"Then click build and start configuring your function"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Switchboard App Function Config Modal",src:n(92259).Z,width:"691",height:"654"}))),(0,r.kt)(i.Z,{attributes:{className:"navbar_icon__javascript"},value:"javascript",label:"@switchboard-xyz/solana.js",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  AttestationQueueAccount,\n  FunctionAccount,\n  parseMrEnclave,\n  SwitchboardProgram,\n} from "@switchboard-xyz/solana.js";\n\n// Load the Switchboard program and an existing Attestation Queue\nconst program = await SwitchboardProgram.load(\n  "devnet",\n  new Connection("https://api.devnet.solana.com"),\n  payerKeypair\n);\nconst [attestationQueueAccount, queueAccountData] =\n  await AttestationQueueAccount.load(program, "My Attestation Queue Pubkey");\n\n// Create the FunctionAccount\nconst [functionAccount, txnSignature] = await FunctionAccount.create(\n  ctx.program,\n  {\n    name: "FUNCTION_NAME",\n    metadata: "FUNCTION_METADATA",\n    schedule: "5 * * * * *",\n    container: "switchboardlabs/basic-oracle-function",\n    containerRegistry: "docker",\n    version: "latest",\n    mrEnclave: parseMrEnclave("my MrEnclave value"),\n    attestationQueue: attestationQueueAccount,\n  }\n);\n\n// Wrap 0.25 SOL into the functionAccount wallet\nawait functionAccount.wrap(0.25);\n'))),(0,r.kt)(i.Z,{attributes:{className:"navbar_icon__terminal"},value:"CLI",label:"sbv2 CLI",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sbv2 solana function create\n")))))}m.isMDXComponent=!0},92259:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/explorer-function-config-6774944f1093f5d5eb17c9a21a575e04.png"},85454:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/explorer-sign-in-bfc99ca60a9c0aec073d6022d098c74a.png"}}]);