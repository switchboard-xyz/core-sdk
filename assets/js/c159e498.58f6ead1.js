"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[59301],{2004:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(49231),r=a(19841);const o={tabItem:"tabItem_Z7jx"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},t)}},66081:(e,t,a)=>{a.d(t,{Z:()=>w});var n=a(48041),r=a(49231),o=a(19841),l=a(51556),s=a(19409),i=a(86449),c=a(80828),u=a(70621);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function g(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,i._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function b(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=g(e),[l,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[i,c]=p({queryString:a,groupId:n}),[d,b]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),f=(()=>{const e=i??d;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),b(e)}),[c,b,o]),tabValues:o}}var f=a(68213);const h={tabList:"tabList_YkLP",tabItem:"tabItem_dswv"};function k(e){let{className:t,block:a,selectedValue:s,selectValue:i,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),g=e=>{const t=e.currentTarget,a=u.indexOf(t),n=c[a].value;n!==s&&(d(t),i(n))},m=e=>{let t=null;switch(e.key){case"Enter":g(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:g},l,{className:(0,o.Z)("tabs__item",h.tabItem,l?.className,{"tabs__item--active":s===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;if(a=Array.isArray(a)?a:[a],t){const e=a.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function y(e){const t=b(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",h.tabList)},r.createElement(k,(0,n.Z)({},e,t)),r.createElement(v,(0,n.Z)({},e,t)))}function w(e){const t=(0,f.Z)();return r.createElement(y,(0,n.Z)({key:String(t)},e))}},93451:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(71146),r=a(65137),o=a(43939),l=a(49231);const s=e=>{const{colorMode:t}=(0,r.I)();let a=(0,o.Z)("dark"===t&&e.darkImg?e.darkImg:e.img),s="inherit";e.lightBg&&"dark"!==t&&(s=e.lightBg),e.darkBg&&"dark"===t&&(s=e.darkBg);let i={};return e.sx&&(i={backgroundColor:s,m:"auto",display:"flex",...i,...e.sx}),l.createElement(n.Z,{component:"img",sx:i,src:a})}},43101:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>b,default:()=>w,frontMatter:()=>p,metadata:()=>f,toc:()=>k});var n=a(48041),r=(a(49231),a(54852)),o=(a(93451),a(15733),a(17558)),l=a(66081),s=a(2004),i=a(75784),c=a(65646);const u='import { AggregatorAccount } from "@switchboard-xyz/solana.js";\n\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorPubkey);\nconst aggregator = await aggregatorAccount.loadData();\nconst result = AggregatorAccount.decodeLatestValue(aggregator);\nconsole.log(result);\n',d='import { AggregatorAccount } from "@switchboard-xyz/solana.js";\n\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorPubkey);\nconst aggregator = await aggregatorAccount.loadData();\nconst result = AggregatorAccount.decodeLatestValue(aggregator);\nconsole.log(result);\n',g='import { QueueAccount } from "@switchboard-xyz/solana.js";\nimport { OracleJob } from "@switchboard-xyz/common";\n\nconst queueAccount = new QueueAccount(program, queuePubkey);\n\nconst [aggregatorAccount, aggregatorInitSignatures] =\n  await queueAccount.createFeed({\n    batchSize: 1,\n    minRequiredOracleResults: 1,\n    minRequiredJobResults: 1,\n    minUpdateDelaySeconds: 60,\n    fundAmount: 2.5, // deposit 2.5 wSOL into the leaseAccount escrow\n    jobs: [\n      {\n        weight: 2,\n        data: OracleJob.encodeDelimited(\n          OracleJob.fromObject({\n            tasks: [\n              {\n                valueTask: {\n                  value: 1,\n                },\n              },\n            ],\n          })\n        ).finish(),\n      },\n    ],\n  });\nconst aggregator = await aggregatorAccount.loadData();\n',m='import { QueueAccount } from "@switchboard-xyz/solana.js";\nimport { OracleJob } from "@switchboard-xyz/common";\n\nconst queueAccount = new QueueAccount(program, queuePubkey);\n\nconst [aggregatorAccount, aggregatorInitSignatures] =\n  await queueAccount.createFeed({\n    batchSize: 1,\n    minRequiredOracleResults: 1,\n    minRequiredJobResults: 1,\n    minUpdateDelaySeconds: 60,\n    fundAmount: 2.5, // deposit 2.5 wSOL into the leaseAccount escrow\n    jobs: [\n      {\n        weight: 2,\n        data: OracleJob.encodeDelimited(\n          OracleJob.fromObject({\n            tasks: [\n              {\n                valueTask: {\n                  value: 1,\n                },\n              },\n            ],\n          })\n        ).finish(),\n      },\n    ],\n  });\nconst aggregator = await aggregatorAccount.loadData();\n',p={sidebar_position:10,title:"Data Feed Integration"},b=void 0,f={unversionedId:"solana/feed-integration",id:"solana/feed-integration",title:"Data Feed Integration",description:"\x3c!-- ## Configuration",source:"@site/docs/solana/feed-integration.mdx",sourceDirName:"solana",slug:"/solana/feed-integration",permalink:"/solana/feed-integration",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Data Feed Integration"},sidebar:"solana",previous:{title:"Devnet",permalink:"/solana/program/devnet"},next:{title:"Priority Fees",permalink:"/solana/priority-fees"}},h={},k=[{value:"Read a Feed",id:"read-a-feed",level:2},{value:"Rust SDK",id:"rust-sdk",level:3},{value:"Typescript SDK",id:"typescript-sdk",level:3},{value:"CLI",id:"cli",level:3},{value:"Create a Feed",id:"create-a-feed",level:2},{value:"UI",id:"ui",level:3},{value:"Typescript SDK",id:"typescript-sdk-1",level:3},{value:"CLI",id:"cli-1",level:3},{value:"More Resources",id:"more-resources",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Why is my feed stale?",id:"why-is-my-feed-stale",level:3}],v={toc:k},y="wrapper";function w(e){let{components:t,...a}=e;return(0,r.kt)(y,(0,n.Z)({},v,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"read-a-feed"},"Read a Feed"),(0,r.kt)("h3",{id:"rust-sdk"},"Rust SDK"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"preview",label:"Preview",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"rust",mdxType:"CodeBlock"},c.Z)),(0,r.kt)(s.Z,{value:"full",label:"Full",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"rust",mdxType:"CodeBlock"},i.Z))),(0,r.kt)("h3",{id:"typescript-sdk"},"Typescript SDK"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"preview",label:"Preview",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"typescript",mdxType:"CodeBlock"},d)),(0,r.kt)(s.Z,{value:"full",label:"Full",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"typescript",mdxType:"CodeBlock"},u))),(0,r.kt)("h3",{id:"cli"},"CLI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sbv2 solana aggregator print --mainnetBeta $AGGREGATOR_PUBKEY\n")),(0,r.kt)("admonition",{title:"CLI --json flag",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"--json")," flag to return a JSON object representing the\naccount state which can then be piped to a file descriptor.")),(0,r.kt)("h2",{id:"create-a-feed"},"Create a Feed"),(0,r.kt)("h3",{id:"ui"},"UI"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/publisher"},"Publisher")," for creating a feed with the UI."),(0,r.kt)("h3",{id:"typescript-sdk-1"},"Typescript SDK"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"preview",label:"Preview",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"typescript",mdxType:"CodeBlock"},m)),(0,r.kt)(s.Z,{value:"full",label:"Full",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"typescript",mdxType:"CodeBlock"},g))),(0,r.kt)("h3",{id:"cli-1"},"CLI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 solana aggregator create $QUEUE_PUBKEY \\\n    --keypair ~/.config/solana/devnet.json \\\n    --crankKey $CRANK_PUBKEY \\\n    --name "My_Test_Feed" \\\n    --updateInterval 10 \\\n    --minOracles 1 \\\n    --batchSize 1 \\\n    --leaseAmount 1.337 \\\n    --job ./directory/jobs/btc/binanceCom.json \\\n    --job ./directory/jobs/btc/kraken.json \\\n    --job ./directory/jobs/btc/bitfinex.json\n')),(0,r.kt)("h2",{id:"more-resources"},"More Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/tree/main/programs/anchor-feed-parser"},"anchor-feed-parser"),":\nView an anchor example showing how to deserialize and read a Switchboard data\nfeed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/switchboard-xyz/sbv2-solana/blob/main/javascript/solana.js/test/aggregator.spec.ts"},"aggregator.spec.ts"),":\nView the javascript tests for an aggregator and see sample implementations")),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",{id:"why-is-my-feed-stale"},"Why is my feed stale?")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Does the feed have enough funds in its lease account?"),(0,r.kt)("li",{parentName:"ul"},"Does the feed have the right permissions for its queue?"),(0,r.kt)("li",{parentName:"ul"},"Is the feed currently on a crank?"),(0,r.kt)("li",{parentName:"ul"},"Is a new round being opened?"))))}w.isMDXComponent=!0},65646:(e,t,a)=>{a.d(t,{Z:()=>n});const n="use anchor_lang::solana_program::clock;\nuse std::convert::TryInto;\nuse switchboard_v2::{AggregatorAccountData, SwitchboardDecimal, SWITCHBOARD_PROGRAM_ID};\n\n// check feed owner\nlet owner = *aggregator.owner;\nif owner != SWITCHBOARD_PROGRAM_ID {\n    return Err(error!(ErrorCode::InvalidSwitchboardAccount));\n}\n\n// deserialize account info\nlet feed = ctx.accounts.aggregator.load()?;\n// OR\nlet feed = AggregatorAccountData::new(feed_account_info)?;\n\n// get result\nlet decimal: f64 = feed.get_result()?.try_into()?;\n\n// check if feed has been updated in the last 5 minutes\nfeed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)?;\n\n// check if feed exceeds a confidence interval of +/i $0.80\nfeed.check_confidence_interval(SwitchboardDecimal::from_f64(0.80))?;"},75784:(e,t,a)=>{a.d(t,{Z:()=>n});const n='use anchor_lang::prelude::*;\nuse anchor_lang::solana_program::clock;\nuse std::convert::TryInto;\npub use switchboard_v2::{AggregatorAccountData, SwitchboardDecimal, SWITCHBOARD_PROGRAM_ID};\n\ndeclare_id!("FnsPs665aBSwJRu2A8wGv6ZT76ipR41kHm4hoA3B1QGh");\n\n#[derive(Accounts)]\n#[instruction(params: ReadResultParams)]\npub struct ReadResult<\'info> {\n    pub aggregator: AccountLoader<\'info, AggregatorAccountData>,\n}\n\n#[derive(Clone, AnchorSerialize, AnchorDeserialize)]\npub struct ReadResultParams {\n    pub max_confidence_interval: Option<f64>,\n}\n\n#[program]\npub mod anchor_feed_parser {\n    use super::*;\n\n    pub fn read_result(\n        ctx: Context<ReadResult>,\n        params: ReadResultParams,\n    ) -> anchor_lang::Result<()> {\n        let feed = &ctx.accounts.aggregator.load()?;\n\n        // get result\n        let val: f64 = feed.get_result()?.try_into()?;\n\n        // check whether the feed has been updated in the last 300 seconds\n        feed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)\n            .map_err(|_| error!(FeedErrorCode::StaleFeed))?;\n\n        // check feed does not exceed max_confidence_interval\n        if let Some(max_confidence_interval) = params.max_confidence_interval {\n            feed.check_confidence_interval(SwitchboardDecimal::from_f64(max_confidence_interval))\n                .map_err(|_| error!(FeedErrorCode::ConfidenceIntervalExceeded))?;\n        }\n\n        msg!("Current feed result is {}!", val);\n\n        Ok(())\n    }\n}\n\n#[error_code]\n#[derive(Eq, PartialEq)]\npub enum FeedErrorCode {\n    #[msg("Not a valid Switchboard account")]\n    InvalidSwitchboardAccount,\n    #[msg("Switchboard feed has not been updated in 5 minutes")]\n    StaleFeed,\n    #[msg("Switchboard feed exceeded provided confidence interval")]\n    ConfidenceIntervalExceeded,\n}\n'}}]);