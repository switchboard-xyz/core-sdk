"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7695],{54852:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>h});var r=n(49231);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=r.createContext({}),l=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},d=function(t){var e=l(t.components);return r.createElement(s.Provider,{value:e},t.children)},p="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,s=t.parentName,d=c(t,["components","mdxType","originalType","parentName"]),p=l(n),m=o,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(h,a(a({ref:e},d),{},{components:n})):r.createElement(h,a({ref:e},d))}));function h(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c[p]="string"==typeof t?t:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},91925:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(95634),o=(n(49231),n(54852));const i={title:"\u27a1\ufe0f Getting Started with Foundry",keywords:["Switchboard","oracle network","evm","foundry","forge"]},a="Getting Started with Foundry",c={unversionedId:"evm/guides/foundry",id:"evm/guides/foundry",title:"\u27a1\ufe0f Getting Started with Foundry",description:"ISwitchboard.sol is a solidity interface representing the Switchboard",source:"@site/docs/202-evm/80-guides/02-foundry.mdx",sourceDirName:"202-evm/80-guides",slug:"/evm/guides/foundry",permalink:"/evm/guides/foundry",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"\u27a1\ufe0f Getting Started with Foundry",keywords:["Switchboard","oracle network","evm","foundry","forge"]},sidebar:"sidebar",previous:{title:"\u27a1\ufe0f Getting Started with Hardhat",permalink:"/evm/guides/hardhat"},next:{title:"Troubleshooting",permalink:"/evm/troubleshooting"}},s={},l=[{value:"Import the Contract",id:"import-the-contract",level:3},{value:"Deploying with Foundry",id:"deploying-with-foundry",level:3},{value:"Testing with Foundry",id:"testing-with-foundry",level:3},{value:"Usage",id:"usage",level:2},{value:"Read Attestation Queue",id:"read-attestation-queue",level:3},{value:"Create a Function",id:"create-a-function",level:3},{value:"Read Function",id:"read-function",level:3},{value:"Fund Function",id:"fund-function",level:3},{value:"Call Function",id:"call-function",level:3}],d={toc:l},p="wrapper";function u(t){let{components:e,...n}=t;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started-with-foundry"},"Getting Started with Foundry"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ISwitchboard.sol")," is a solidity interface representing the Switchboard\ncontract. You may initialize this interface in your program if you pass a valid\nSwitchboard address. You may find a list of supported networks in the\n",(0,o.kt)("a",{parentName:"p",href:"/network"},"Networks Page")," - or use some of the utility functions below to load\nthe addresses dynamically based on a chainId."),(0,o.kt)("p",null,"Add\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/switchboard-contracts"},"switchboard-xyz/switchboard-contracts"),"\nto your foundry project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"forge install --no-commit switchboard-xyz/switchboard-contracts\n")),(0,o.kt)("p",null,"Then add the following to your remappings.txt:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="remappings.txt"',title:'"remappings.txt"'},"switchboard-contracts/=lib/switchboard-contracts/\nswitchboard/=lib/switchboard-contracts/src/\nswitchboard-scripts/=lib/switchboard-contracts/script/\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"NOTE:")," If you do not have this file you can generate it with:\n",(0,o.kt)("inlineCode",{parentName:"p"},"forge remappings > remappings.txt"),".")),(0,o.kt)("h3",{id:"import-the-contract"},"Import the Contract"),(0,o.kt)("p",null,"Import the ISwitchboard interface from ",(0,o.kt)("inlineCode",{parentName:"p"},"switchboard/ISwitchboard.sol"),"."),(0,o.kt)("p",null,"You will need to pass the Switchboard address into your constructor or\ninitialization function. This ensures you always call the correct Switchboard\ncontract."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="src/MyContract.sol"',title:'"src/MyContract.sol"'},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {ISwitchboard} from "switchboard/ISwitchboard.sol";\n\ncontract MyContract {\n    ISwitchboard switchboard;\n\n    constructor(address switchboardAddress) {\n        switchboard = ISwitchboard(switchboardAddress);\n    }\n}\n')),(0,o.kt)("h3",{id:"deploying-with-foundry"},"Deploying with Foundry"),(0,o.kt)("p",null,"Foundry uses solidity scripts to handle deployments. The ",(0,o.kt)("inlineCode",{parentName:"p"},"switchboard-contracts"),"\nrepository contains a\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/switchboard-contracts/blob/main/script/HelperConfig.s.sol"},"HelperConfig contract"),"\nto check if the current chainId corresponds to a valid Switchboard deployment -\nand if the chainId is not found it fallsback to a mock contract."),(0,o.kt)("p",null,"Below is a sample deployment script to deploy our contract."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="script/Deploy.s.sol"',title:'"script/Deploy.s.sol"'},'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {MyContract} from "../src/MyContract.sol";\n\nimport {Script, console2} from "forge-std/Script.sol";\nimport {SwitchboardHelperConfig} from "switchboard-scripts/HelperConfig.s.sol";\n\ncontract DeployScript is Script {\n    function setUp() public {}\n\n    function run() external returns (MyContract, SwitchboardHelperConfig) {\n        SwitchboardHelperConfig sbConfig = new SwitchboardHelperConfig();\n        console2.log("Switchboard address: %s", sbConfig.getSwitchboardAddress());\n        console2.log("AttestationQueueId: %s", sbConfig.getAttestationQueueId());\n\n        vm.startBroadcast();\n        MyContract myContract = new MyContract(sbConfig.getSwitchboardAddress());\n        vm.stopBroadcast();\n\n        console2.log("MyContract address: %s", address(myContract));\n\n        return (myContract, sbConfig);\n    }\n}\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You may call the deployment script with:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"forge script script/Deploy.s.sol:DeployScript -vv\n"))),(0,o.kt)("h3",{id:"testing-with-foundry"},"Testing with Foundry"),(0,o.kt)("p",null,"We now have a deployment script to deploy our contract. We can also use this in\nour integration tests to streamline our deploys. We'll add a basic helloWorld\nfunction to ",(0,o.kt)("inlineCode",{parentName:"p"},"src/MyContract.sol")," then test our contract with ",(0,o.kt)("inlineCode",{parentName:"p"},"forge test"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="test/MyContract.t.sol"',title:'"test/MyContract.t.sol"'},'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {MyContract} from "../src/MyContract.sol";\nimport {DeployScript} from "../script/Deploy.s.sol";\n\nimport {Test} from "forge-std/Test.sol";\nimport {SwitchboardHelperConfig} from "switchboard-scripts/HelperConfig.s.sol";\n\ncontract MyContractTest is Test {\n    MyContract public myContract;\n    SwitchboardHelperConfig public sbConfig;\n\n    function setUp() public {\n        DeployScript deployer = new DeployScript();\n        (myContract, sbConfig) = deployer.run();\n    }\n\n    function testHelloWorld() public {\n        myContract.helloWorld();\n    }\n}\n')),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"TBD - example calls using the ISwitchboard interface"),(0,o.kt)("h3",{id:"read-attestation-queue"},"Read Attestation Queue"),(0,o.kt)("h3",{id:"create-a-function"},"Create a Function"),(0,o.kt)("h3",{id:"read-function"},"Read Function"),(0,o.kt)("h3",{id:"fund-function"},"Fund Function"),(0,o.kt)("h3",{id:"call-function"},"Call Function"))}u.isMDXComponent=!0}}]);