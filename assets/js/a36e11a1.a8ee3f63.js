"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5940],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),b=p(n),v=a,d=b["".concat(c,".").concat(v)]||b[v]||s[v]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},7609:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>v,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={toc:[{value:"<code>sbv2 job create JOBDEFINITION</code>",id:"sbv2-job-create-jobdefinition",level:2},{value:"<code>sbv2 job print [JOBKEY]</code>",id:"sbv2-job-print-jobkey",level:2}]};function i(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"interact with a switchboard job account"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#sbv2-job-create-jobdefinition"},(0,a.kt)("inlineCode",{parentName:"a"},"sbv2 job create JOBDEFINITION"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#sbv2-job-print-jobkey"},(0,a.kt)("inlineCode",{parentName:"a"},"sbv2 job print [JOBKEY]")))),(0,a.kt)("h2",{id:"sbv2-job-create-jobdefinition"},(0,a.kt)("inlineCode",{parentName:"h2"},"sbv2 job create JOBDEFINITION")),(0,a.kt)("p",null,"create a job account"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 job create [JOBDEFINITION] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [-a <value>] [-n <value>]\n\nARGUMENTS\n  JOBDEFINITION  filesystem path to job definition\n\nFLAGS\n  -a, --authority=<value>  alternate keypair that will be the account authority\n  -k, --keypair=<value>    keypair that will pay for onchain transactions. defaults to new account authority if no\n                           alternate authority provided\n  -n, --name=<value>       name of the buffer account\n  -s, --silent             suppress cli prompts\n  -u, --rpcUrl=<value>     alternate RPC url\n  -v, --verbose            log everything\n  --mainnetBeta            WARNING: use mainnet-beta solana cluster\n  --programId=<value>      alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  create a job account\n")),(0,a.kt)("h2",{id:"sbv2-job-print-jobkey"},(0,a.kt)("inlineCode",{parentName:"h2"},"sbv2 job print [JOBKEY]")),(0,a.kt)("p",null,"Print the deserialized Switchboard job account"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 job print [JOBKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  JOBKEY  public key of the job account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  Print the deserialized Switchboard job account\n\nALIASES\n  $ sbv2 job print\n\nEXAMPLES\n  $ sbv2 job:print SzTvFZLz3hwjZFMwVWzuEnr1oUF6qyvXwXCvsqf7qeA\n")))}i.isMDXComponent=!0;const l={sidebar_position:10,title:"sbv2 job"},c=void 0,p={unversionedId:"cli/job",id:"cli/job",title:"sbv2 job",description:"",source:"@site/api/cli/job.mdx",sourceDirName:"cli",slug:"/cli/job",permalink:"/sbv2-core/api/cli/job",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"sbv2 job"},sidebar:"tutorialSidebar",previous:{title:"sbv2 print",permalink:"/sbv2-core/api/cli/print"},next:{title:"sbv2 aggregator",permalink:"/sbv2-core/api/cli/aggregator"}},u={},s=[],b={toc:s};function v(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(i,{mdxType:"Sbv2Job"}))}v.isMDXComponent=!0}}]);