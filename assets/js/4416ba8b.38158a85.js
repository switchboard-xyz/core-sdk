"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[848],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>m});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var u=r.createContext({}),i=function(e){var t=r.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=i(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=i(a),m=n,b=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return a?r.createElement(b,l(l({ref:t},s),{},{components:a})):r.createElement(b,l({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=d;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var i=2;i<o;i++)l[i]=a[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8215:(e,t,a)=>{a.d(t,{Z:()=>n});var r=a(7294);function n(e){let{children:t,hidden:a,className:n}=e;return r.createElement("div",{role:"tabpanel",hidden:a,className:n},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>s});var r=a(7462),n=a(7294),o=a(2389),l=a(1548),c=a(6010);const u="tabItem_LplD";function i(e){var t,a,o;const{lazy:i,block:s,defaultValue:p,values:d,groupId:m,className:b}=e,y=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=d?d:y.map((e=>{let{props:{value:t,label:a,attributes:r}}=e;return{value:t,label:a,attributes:r}})),v=(0,l.lx)(f,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const h=null===p?p:null!=(t=null!=p?p:null==(a=y.find((e=>e.props.default)))?void 0:a.props.value)?t:null==(o=y[0])?void 0:o.props.value;if(null!==h&&!f.some((e=>e.value===h)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:k}=(0,l.UB)(),[g,O]=(0,n.useState)(h),T=[],{blockElementScrollPositionUntilNextRender:A}=(0,l.o5)();if(null!=m){const e=w[m];null!=e&&e!==g&&f.some((t=>t.value===e))&&O(e)}const N=e=>{const t=e.currentTarget,a=T.indexOf(t),r=f[a].value;r!==g&&(A(t),O(r),null!=m&&k(m,r))},E=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;a=T[t]||T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;a=T[t]||T[T.length-1];break}}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":s},b)},f.map((e=>{let{value:t,label:a,attributes:o}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,key:t,ref:e=>T.push(e),onKeyDown:E,onFocus:N,onClick:N},o,{className:(0,c.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":g===t})}),null!=a?a:t)}))),i?(0,n.cloneElement)(y.filter((e=>e.props.value===g))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},y.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==g})))))}function s(e){const t=(0,o.Z)();return n.createElement(i,(0,r.Z)({key:String(t)},e))}},2561:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>p});var r=a(7462),n=(a(7294),a(3905)),o=a(9877),l=a(8215);const c={sidebar_position:20,title:"Oracles"},u=void 0,i={unversionedId:"developers/oracle",id:"developers/oracle",title:"Oracles",description:"Create",source:"@site/docs/developers/oracle.mdx",sourceDirName:"developers",slug:"/developers/oracle",permalink:"/developers/oracle",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"Oracles"},sidebar:"tutorialSidebar",previous:{title:"Oracle Queue",permalink:"/developers/queue"},next:{title:"Data Feeds",permalink:"/developers/feed"}},s={},p=[{value:"Create",id:"create",level:2},{value:"Oracle Deposit",id:"oracle-deposit",level:2},{value:"Oracle Withdraw",id:"oracle-withdraw",level:2}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"create"},"Create"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"oracleInit"))),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  loadSwitchboardProgram,\n  OracleAccount,\n  OracleQueueAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\n\nconst queueAccount = new OracleQueueAccount({\n  program,\n  publicKey: queuePubkey,\n});\n\n// Create oracle\nconst oracleAccount = await OracleAccount.create(program, {\n  name: Buffer.from("My Oracle"),\n  queueAccount,\n});\n'))),(0,n.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 oracle create QUEUEKEY \\\n    --name "My Oracle" \\\n    --keypair "path/to/payer/keypair.json" \\\n    --authority "path/to/authority/keypair.json"  \\\n    --enable \\\n    --verbose\n')))),(0,n.kt)("h2",{id:"oracle-deposit"},"Oracle Deposit"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tokenTransfer"))),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  loadSwitchboardProgram,\n  OracleAccount,\n  OracleQueueAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nlet amount = new anchor.BN(1_000_000_000);\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\n\nconst oracleAccount = new OracleAccount({ program, publicKey: oracleKey });\nconst oracle = await oracleAccount.loadData();\n\nconst queueAccount = new OracleQueueAccount({\n  program,\n  publicKey: oracle.queuePubkey,\n});\nconst mint = await queueAccount.loadMint();\nconst funderTokenAccount = (\n  await mint.getOrCreateAssociatedAccountInfo(payer.publicKey)\n).address;\n\nconst signature = await mint.transfer(\n  funderTokenAccount,\n  oracle.tokenAccount,\n  payer,\n  [],\n  amount.toNumber()\n);\n'))),(0,n.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 oracle deposit ORACLEKEY \\\n   --keypair "path/to/payer/keypair.json" \\\n   --amount 1.25\n')))),(0,n.kt)("h2",{id:"oracle-withdraw"},"Oracle Withdraw"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"oracleWithdraw"))),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"Typescript",label:"Typescript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@project-serum/anchor";\nimport { Keypair } from "@solana/web3.js";\nimport {\n  loadSwitchboardProgram,\n  OracleAccount,\n  OracleQueueAccount,\n} from "@switchboard-xyz/switchboard-v2";\n\nlet payer: Keypair;\nlet amount = new anchor.BN(1_000_000_000);\nconst program = await loadSwitchboardProgram("devnet", undefined, payer);\n\nconst oracleAccount = new OracleAccount({ program, publicKey: oracleKey });\nconst oracle = await oracleAccount.loadData();\n\nconst queueAccount = new OracleQueueAccount({\n  program,\n  publicKey: oracle.queuePubkey,\n});\nconst mint = await queueAccount.loadMint();\nconst withdrawAccount = (\n  await mint.getOrCreateAssociatedAccountInfo(payer.publicKey)\n).address;\n\nconst signature = await oracleAccount.withdraw({\n  amount,\n  oracleAuthority: payer,\n  withdrawAccount,\n});\n'))),(0,n.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 oracle withdraw ORACLEKEY \\\n    --keypair "path/to/payer/keypair.json" \\\n    --amount 1.25\n')))))}m.isMDXComponent=!0}}]);