"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5844],{54852:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>g});var n=a(49231);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(a),m=r,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return a?n.createElement(g,c(c({ref:t},u),{},{components:a})):n.createElement(g,c({ref:t},u))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=a[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},14177:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>c,default:()=>u,frontMatter:()=>o,toc:()=>i});var n=a(95634),r=(a(49231),a(54852));const o={},c=void 0,i=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Load Switchboard Program",id:"load-switchboard-program",level:3},{value:"Transactions",id:"transactions",level:3},{value:"Create a Queue",id:"create-a-queue",level:3},{value:"Add an Oracle",id:"add-an-oracle",level:3},{value:"Create a Job on IPFS",id:"create-a-job-on-ipfs",level:3},{value:"Create a Data Feed",id:"create-a-data-feed",level:3},{value:"Read a Data Feed",id:"read-a-data-feed",level:3},{value:"Watch Data Feed",id:"watch-data-feed",level:3}],s={toc:i},l="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(l,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{align:"center"},(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/switchboard-xyz/sbv2-core/raw/main/website/static/img/icons/switchboard/avatar.png",alt:"Switchboard Logo"})),(0,r.kt)("h1",{id:"switchboard-xyzevmjs"},"@switchboard-xyz/evm.js"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A Typescript client to interact with Switchboard on EVM based chains.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@switchboard-xyz/evm.js"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/package-json/v/switchboard-xyz/sbv2-evm?color=red&filename=javascript%2Fevm.js%2Fpackage.json&label=%40switchboard-xyz%2Fevm.js&logo=npm",alt:"NPM Badge"})))),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @switchboard-xyz/evm.js\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Directory")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#load-switchboard-program"},"Load Switchboard Program")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#transactions"},"Transactions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-queue"},"Create a Queue")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#add-an-oracle"},"Add an Oracle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-job-on-ipfs"},"Create a Job on IPFS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-data-feed"},"Create a Data Feed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#read-a-data-feed"},"Read a Data Feed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#watch-data-feed"},"Watch Data Feed"))),(0,r.kt)("h3",{id:"load-switchboard-program"},"Load Switchboard Program"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import ethers from "ethers";\nimport { SwitchboardProgram } from "@switchboard-xyz/evm.js";\n\n// Instantiate SwitchboardProgram\nconst signer = new ethers.Wallet(privateKey);\nconst switchboardProgram = await SwitchboardProgram.load(\n  signer, // Signer instance\n  "0x73d6C66874e570f058834cAA666b2c352F1C792D" // Switchboard contract address\n);\n\n// Send a transaction to Switchboard\nconst tx = await switchboard.sendSbTxn("createOracleQueue", [\n  name,\n  authority,\n  unpermissionedFeedsEnabled,\n  maxSize,\n  reward,\n  oracleTimeout,\n]);\n\n// Fetch all aggregator data for a given authority\nconst authority = "0xabc123..."; // the public key of the authority\nconst aggregatorData = await switchboardProgram.fetchAggregators(authority);\n\n// Connect a new signer to SwitchboardProgram\nconst newSigner = new ethers.Wallet(newPrivateKey);\nconst newSwitchboardProgram = switchboardProgram.connect(newSigner);\n')),(0,r.kt)("h3",{id:"transactions"},"Transactions"),(0,r.kt)("p",null,"Most SDK methods have an optional TransactionOptions parameter to provide overrides."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Most methods have an optional TransactionOptions parameter to provide overrides and an optional new signer\nconst txOptions: TransactionOptions = {\n  // an optional multiplier to modify the gasEstimation\n  gasFactor: 1.1,\n  // simulate the tx before sending\n  simulate: true,\n  // the new msg.sender for the tx\n  signer: myNewSigner,\n  // it also supports any fields from ethers PayableOverrides\n  gasLimit: 3000000,\n  gasPrice: 10000,\n  maxFeePerGas: 10000,\n  maxPriorityFeePerGas: 1000,\n  nonce: 1337,\n};\n\n// Send a transaction to the Switchboard.sol contract\nconst tx = await switchboardProgram.sendSbTxn(\n  "methodName",\n  [...args],\n  // optional txnOptions\n  txOptions\n);\n\n// Send a transaction to the SwitchboardAttestationService.sol contract\nconst tx = await switchboardProgram.sendVsTxn(\n  "methodName",\n  [...args],\n  // optional txnOptions\n  txOptions\n);\n')),(0,r.kt)("h3",{id:"create-a-queue"},"Create a Queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { OracleQueueAccount } from "@switchboard-xyz/evm.js";\n\nconst [oracleQueueAccount, tx] = await OracleQueueAccount.create(\n  switchboardProgram,\n  {\n    authority: "0xMyAuthority",\n    name: "my queue",\n    oracleTimeout: 3600,\n    reward: 10000000,\n    unpermissionedFeedsEnabled: true,\n    maxSize: 100,\n  }\n);\nconst oracleQueue = await oracleQueueAccount.loadData();\n')),(0,r.kt)("h3",{id:"add-an-oracle"},"Add an Oracle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { OracleQueueAccount } from "@switchboard-xyz/evm.js";\n\nconst oracleQueueAccount = new OracleQueueAccount(\n  switchboardProgram,\n  queueAddress\n);\n\nconst oracleAccount = await oracleQueueAccount.createOracle(\n  {\n    name: "my oracle",\n    authority: "0xMyOracleAuthority",\n  },\n  // enable the heartbeat permissions (requires msg.sender to be queueAuthority)\n  true,\n  // you can also explicitly provide the queueAuthority signer\n  {\n    signer: queueAuthoritySigner,\n  }\n);\nconst oracle = await oracleAccount.loadData();\n\nawait oracleAccount.heartbeat();\n')),(0,r.kt)("h3",{id:"create-a-job-on-ipfs"},"Create a Job on IPFS"),(0,r.kt)("p",null,"A set of jobs must be encoded with the ",(0,r.kt)("a",{parentName:"p",href:"https://ipfs.io/ipfs/bafybeiaprigfe7hakc4hgqyrjtgsbggrpvzfufpufzvpwtzlznyjb5hjw4/%20USD"},"following structure"),". This example uses ",(0,r.kt)("a",{parentName:"p",href:"https://web3.storage"},"web3.storage"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const jobs = [\n  {\n    name: job.name,\n    weight: job.weight,\n    data: Buffer.from(\n      sb.OracleJob.encodeDelimited({\n        tasks: [\n          {\n            httpTask: {\n              url: "https://api.coinbase.com/v2/prices/USDC-USD/spot",\n            },\n          },\n          {\n            jsonParseTask: {\n              path: "$.data.amount",\n            },\n          },\n          {\n            boundTask: {\n              lowerBoundValue: "0.98",\n              upperBoundValue: "1.02",\n            },\n          },\n        ],\n      }).finish()\n    ).toString("base64"),\n  },\n];\n\nconst client = new Web3Storage({\n  token: "<TOKEN_GOES_HERE>",\n});\n\n// get jobs from validation\nconst content = new File([JSON.stringify(jobs)], "", {\n  type: "application/json",\n});\n\n// get content ID - fetchable immediately via ipfs\nconst cid = await client.put([content], {\n  wrapWithDirectory: false,\n});\n')),(0,r.kt)("h3",{id:"create-a-data-feed"},"Create a Data Feed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { OracleQueueAccount } from "@switchboard-xyz/evm.js";\n\nconst oracleQueueAccount = new OracleQueueAccount(\n  switchboardProgram,\n  queueAddress\n);\n\nconst aggregatorAccount = await oracleQueueAccount.createAggregator(\n  {\n    authority: "0xYourAuthority",\n    name: "MyAggregator",\n    queueAddress: "0xQueueAddress",\n    batchSize: 10,\n    minOracleResults: 5,\n    minJobResults: 3,\n    minUpdateDelaySeconds: 60,\n    varianceThreshold: 0.05,\n    forceReportPeriod: 600,\n    jobsHash: "0xJobHash",\n    enableLegacyAdapter: false,\n    initialValue: 0,\n  },\n  // enable the oracle queue usage permissions (requires msg.sender to be queueAuthority)\n  true,\n  // you can also explicitly provide the queueAuthority signer\n  {\n    signer: queueAuthoritySigner,\n  }\n);\nconst aggregator = await aggregatorAccount.loadData();\n')),(0,r.kt)("h3",{id:"read-a-data-feed"},"Read a Data Feed"),(0,r.kt)("p",null,"After the oracles respond, read the feed result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { AggregatorAccount } from "@switchboard-xyz/evm.js";\n\nconst aggregatorAccount = new AggregatorAccount(\n  switchboardProgram,\n  aggregatorAddress\n);\nconst result: number = await aggregatorAccount.latestValue();\nconsole.log(result);\n')),(0,r.kt)("h3",{id:"watch-data-feed"},"Watch Data Feed"),(0,r.kt)("p",null,"Setup a websocket listener to invoke a callback whenever an aggregator is updated"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { AggregatorAccount } from "@switchboard-xyz/evm.js";\n\nconst watchHandle = AggregatorAccount.watch(\n  switchboardProgram,\n  "0xAggregatorAccountAddress",\n  (event) => {\n    console.log(event);\n  }\n);\n\n// To stop watching\nwatchHandle.stop();\n')))}u.isMDXComponent=!0}}]);