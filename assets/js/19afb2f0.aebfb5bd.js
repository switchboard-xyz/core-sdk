"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3763],{54852:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>b});var a=n(49231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),i=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=i(e.components);return a.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=i(n),m=r,b=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(b,l(l({ref:t},s),{},{components:n})):a.createElement(b,l({ref:t},s))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[d]="string"==typeof e?e:r,l[1]=c;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},53242:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(49231),r=n(19841);const o={tabItem:"tabItem_B1C6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},t)}},79793:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(95634),r=n(49231),o=n(19841),l=n(49949),c=n(4345),u=n(54162);const i={tabList:"tabList_wB6B",tabItem:"tabItem_i0b_"};function s(e){let{className:t,block:n,selectedValue:c,selectValue:u,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=d.indexOf(t),a=s[n].value;a!==c&&(p(t),u(a))},b=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:c===t?0:-1,"aria-selected":c===t,key:t,ref:e=>d.push(e),onKeyDown:b,onClick:m},l,{className:(0,o.Z)("tabs__item",i.tabItem,l?.className,{"tabs__item--active":c===t})}),n??t)})))}function d(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function p(e){const t=(0,c.Y)(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",i.tabList)},r.createElement(s,(0,a.Z)({},e,t)),r.createElement(d,(0,a.Z)({},e,t)))}function m(e){const t=(0,u.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},4345:(e,t,n)=>{n.d(t,{Y:()=>p});var a=n(49231),r=n(19409),o=n(18048),l=n(54657),c=n(70583);function u(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function i(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function s(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:n}=e;const l=(0,r.k6)(),c=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(c),(0,a.useCallback)((e=>{if(!c)return;const t=new URLSearchParams(l.location.search);t.set(c,e),l.replace({...l.location,search:t.toString()})}),[c,l])]}function p(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=i(e),[l,u]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!s({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[p,m]=d({queryString:n,groupId:r}),[b,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),h=(()=>{const e=p??b;return s({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{h&&u(h)}),[h]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!s({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);u(e),m(e),f(e)}),[m,f,o]),tabValues:o}}},82219:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>b,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var a=n(95634),r=(n(49231),n(54852)),o=n(79793),l=n(53242);const c={sidebar_position:5,hide_table_of_contents:!0,title:"Developer Resources",keywords:["Solana","Solana SDK"]},u=void 0,i={unversionedId:"solana/dev",id:"solana/dev",title:"Developer Resources",description:"Table of Contents",source:"@site/docs/solana/dev.mdx",sourceDirName:"solana",slug:"/solana/dev",permalink:"/solana/dev",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,hide_table_of_contents:!0,title:"Developer Resources",keywords:["Solana","Solana SDK"]},sidebar:"gettingStartedSidebar",previous:{title:"Switchboard x Solana",permalink:"/solana/"},next:{title:"Functions Overview",permalink:"/solana/functions"}},s={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Functions",id:"functions",level:2},{value:"Create a Scheduled Function",id:"create-a-scheduled-function",level:3},{value:"Read a Function",id:"read-a-function",level:3},{value:"Debug a Function",id:"debug-a-function",level:3},{value:"Data Feeds",id:"data-feeds",level:2},{value:"Create a Data Feed",id:"create-a-data-feed",level:3},{value:"Read a Data Feed",id:"read-a-data-feed",level:3}],p={toc:d},m="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Functions"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-scheduled-function"},"Create a Scheduled Function")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#on-demand-functions"},"On-Demand Functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#read-a-function"},"Read a Function")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#debug-a-function"},"Debug a Function")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"DataFeeds"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-data-feed"},"Create a Data Feed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#read-a-data-feed"},"Read a Data Feed"))))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Language"),(0,r.kt)("th",{parentName:"tr",align:null},"SDK"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Javascript"),(0,r.kt)("td",{parentName:"tr",align:null},"The npm package ",(0,r.kt)("a",{parentName:"td",href:"/api/solana.js"},"@switchboard-xyz/solana.js")," can be used to build and manage Switchboard accounts on Solana.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Rust"),(0,r.kt)("td",{parentName:"tr",align:null},"The rust crate ",(0,r.kt)("a",{parentName:"td",href:"https://crates.io/crates/switchboard-solana"},"switchboard-solana")," can be used on-chain and off-chain. The previous crate ",(0,r.kt)("a",{parentName:"td",href:"https://crates.io/crates/switchboard-v2"},"switchboard-v2")," is only compatible with Switchboard V2 accounts and does not support Switchboard Functions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CLI"),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("a",{parentName:"td",href:"/api/cli"},"Switchboard CLI")," can be used to help debug your Switchboard deployments with a command line interface or be used in automation scripts for custom alerting.")))),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"create-a-scheduled-function"},"Create a Scheduled Function"),(0,r.kt)("p",null,"The examples below show how to create a Switchboard Function that\nruns the ",(0,r.kt)("inlineCode",{parentName:"p"},"switchboardlabs/basic-binance-oracle:latest")," container from dockerhub every 30 seconds."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  FunctionAccount,\n  SwitchboardProgram,\n} from "@switchboard-xyz/solana.js";\nimport { parseMrEnclave } from "@switchboard-xyz/common";\n\nlet program: SwitchboardProgram;\n\nconst [functionAccount] = await FunctionAccount.create(program, {\n  name: "FUNCTION_NAME",\n  metadata: "FUNCTION_METADATA",\n  schedule: "30 * * * * *", // every 30 seconds\n  container: "switchboardlabs/basic-binance-oracle",\n  containerRegistry: "dockerhub",\n  version: "latest",\n  mrEnclave: parseMrEnclave("0xABC123"),\n  attestationQueue: attestationQueueAccount,\n});\n'))),(0,r.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sbv2 solana function create CkvizjVnm2zA5Wuwan34NhVT3zFc7vqUyGnA6tuEF5aE \\\n  --name "My Function" \\\n  --metadata "Randomness Callback" \\\n  --schedule "30 * * * * *" \\\n  --containerRegistry dockerhub \\\n  --container "switchboardlabs/basic-binance-oracle" \\\n  --keypair ~/.config/solana/id.json\n')))),(0,r.kt)("h3",{id:"read-a-function"},"Read a Function"),(0,r.kt)("p",null,"Switchboard Functions allow you to execute arbitrary instructions as long as the\nfunctions ",(0,r.kt)("inlineCode",{parentName:"p"},"enclave.signer")," has signed the transaction. This keypair gets generated within\nthe enclave so we can prove the transaction was built securely."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Rust",label:"Rust",default:!0,default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"This example shows how to verify that the functions ",(0,r.kt)("inlineCode",{parentName:"p"},"enclave.signer")," has signed your custom instructions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use switchboard_solana::{FunctionAccountData};\n\n#[derive(Accounts)]\npub struct SaveDataInstruction<'info> {\n    // ... your required accounts to modify your program's state\n\n    // We use this to derive and verify the functions enclave state\n    #[account(\n        constraint =\n            function.load()?.validate(\n              &enclave_signer.to_account_info()\n            )?\n    )]\n    pub function: AccountLoader<'info, FunctionAccountData>,\n    pub enclave_signer: Signer<'info>,\n}\n"))),(0,r.kt)(l.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  FunctionAccount,\n  SwitchboardProgram,\n  attestationTypes,\n} from "@swtichboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\n\nconst functionAccount = new FunctionAccount(program, "My_Function_Pubkey");\nconst functionState: attestationTypes.FunctionAccountData =\n  await functionAccount.loadData();\n'))),(0,r.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sbv2 solana function print My_Function_Pubkey\n")),(0,r.kt)("p",null,"You need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"--mainnetBeta")," to view a function for the mainnet-beta network. The default network is devnet."))),(0,r.kt)("h3",{id:"debug-a-function"},"Debug a Function"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Coming Soon!")),(0,r.kt)("p",null,"The Switchboard Function developer tooling is still in its early stages. By the end of Q3 we will support\na function simulation server, an endpoint to view container logs, and some helper scripts to manage your protocols functions."),(0,r.kt)("h2",{id:"data-feeds"},"Data Feeds"),(0,r.kt)("h3",{id:"create-a-data-feed"},"Create a Data Feed"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  FunctionAccount,\n  OracleQueueAccount,\n  SwitchboardProgram,\n} from "@switchboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\n\nconst queueAccount = new OracleQueueAccount(\n  program,\n  "uPeRMdfPmrPqgRWSrjAnAkH78RqAhe5kXoW6vBYRqFX"\n); // devnet\n\nconst [aggregatorAccount] = await queueAccount.createFeed({\n  queueAuthority: queueAuthority,\n  batchSize: 1,\n  minRequiredOracleResults: 1,\n  minRequiredJobResults: 1,\n  minUpdateDelaySeconds: 60,\n  fundAmount: 2.5,\n  enable: true,\n  jobs: [\n    // existing job account\n    { pubkey: jobAccount.publicKey },\n    // or create a new job account with the feed\n    {\n      weight: 2,\n      data: OracleJob.encodeDelimited(\n        OracleJob.fromObject({\n          tasks: [\n            {\n              valueTask: {\n                value: 1,\n              },\n            },\n          ],\n        })\n      ).finish(),\n    },\n  ],\n});\n'))),(0,r.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export QUEUE_KEY=uPeRMdfPmrPqgRWSrjAnAkH78RqAhe5kXoW6vBYRqFX\nexport CRANK_KEY=GN9jjCy2THzZxhYqZETmPM3my8vg4R5JyNkgULddUMa5\nsbv2 solana aggregator create "$QUEUE_KEY" \\\n    --keypair ~/.config/solana/id.json \\\n    --crankKey "$CRANK_KEY" \\\n    --name "My_Test_Feed" \\\n    --updateInterval 10 \\\n    --minOracles 1 \\\n    --batchSize 1 \\\n    --leaseAmount 0.1 \\\n    --job ./src/oracle-job.json \\\n    --verbose\n')))),(0,r.kt)("h3",{id:"read-a-data-feed"},"Read a Data Feed"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use anchor_lang::prelude::*;\nuse anchor_lang::solana_program::clock;\n\nuse std::convert::TryInto;\n\n// Instruction accounts\n#[derive(Accounts)]\n#[instruction(params: ReadFeedParams)]\npub struct ReadFeed<\'info> {\n    pub aggregator: AccountLoader<\'info, AggregatorAccountData>,\n}\n\n// Instruction params\n#[derive(Clone, AnchorSerialize, AnchorDeserialize)]\npub struct ReadFeedParams {\n    pub max_confidence_interval: Option<f64>,\n}\n\n// Instruction logic\npub fn read_result(\n    ctx: Context<ReadResult>\n) -> anchor_lang::Result<()> {\n    let feed = &ctx.accounts.switchboard_aggregator.load()?;\n\n    // get result\n    let val: f64 = feed.get_result()?.try_into()?;\n\n    // check whether the feed has been updated in the last 300 seconds\n    feed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)\n        .map_err(|_| error!(FeedErrorCode::StaleFeed))?;\n\n    msg!("Current feed result is {}!", val);\n\n    // Your custom logic here\n\n    Ok(())\n}\n\n#[error_code]\n#[derive(Eq, PartialEq)]\npub enum FeedErrorCode {\n    #[msg("Switchboard feed has not been updated in 5 minutes")]\n    StaleFeed,\n}\n'))),(0,r.kt)(l.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  AggregatorAccount,\n  SwitchboardProgram,\n  types,\n} from "@swtichboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\n\nconst aggregatorAccount = new AggregatorAccount(program, "My_Data_Feed_Pubkey");\nconst aggregatorState: types.AggregatorAccountData =\n  await aggregatorAccount.loadData();\n'))),(0,r.kt)(l.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sbv2 solana function print My_Function_Pubkey\n")),(0,r.kt)("p",null,"You need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"--mainnetBeta")," to view a function for the mainnet-beta network. The default network is devnet."))))}b.isMDXComponent=!0}}]);