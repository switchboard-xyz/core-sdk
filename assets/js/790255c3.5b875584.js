"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[71041],{25195:(e,t,a)=>{var n=a(66344);t.Z=void 0;var r=n(a(64938)),l=a(85893),o=(0,r.default)((0,l.jsx)("path",{d:"M6 6h12v12H6z"}),"Stop");t.Z=o},36752:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(99226),r=a(15861),l=a(67294),o=a(53219),i=a(83117);function s(e){return l.createElement(o.Z,(0,i.Z)({},e,{id:"a2e9f51b-359e-4615-886a-42805a3d0c79","data-name":"Icon Logo",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 60 60",className:"h-6 md:h-8 drop-shadow-[0_35px_35px_rgba(0,0,0,0.95)]",style:""}),l.createElement("path",{d:"M46.47,20.07H41.16a2.15,2.15,0,0,1-1.61-.72l-2.16-2.42a1.69,1.69,0,0,0-2.53,0L33,19a3.21,3.21,0,0,1-2.39,1.07h-29A30.26,30.26,0,0,0,0,27.48H27.42a1.78,1.78,0,0,0,1.28-.54l2.56-2.66a1.67,1.67,0,0,1,1.22-.52h.1a1.7,1.7,0,0,1,1.27.57L36,26.75a2.17,2.17,0,0,0,1.61.73H60a30.26,30.26,0,0,0-1.58-7.41h-12Z"})," ",l.createElement("path",{d:"M16.6,43.05a1.78,1.78,0,0,0,1.27-.54l2.56-2.66a1.7,1.7,0,0,1,1.22-.52h.1A1.7,1.7,0,0,1,23,39.9l2.15,2.42a2.14,2.14,0,0,0,1.62.73H57.12a29.73,29.73,0,0,0,2.47-7.48H30.47a2.17,2.17,0,0,1-1.62-.72L26.7,32.42a1.69,1.69,0,0,0-2.53,0L22.32,34.5a3.18,3.18,0,0,1-2.38,1.07H.41a29.73,29.73,0,0,0,2.47,7.48Z"})," ",l.createElement("path",{d:"M38.12,12a1.74,1.74,0,0,0,1.27-.54L42,8.78a1.69,1.69,0,0,1,1.22-.51h.1a1.69,1.69,0,0,1,1.27.56l2.15,2.43a2.17,2.17,0,0,0,1.62.72h5.77A30.19,30.19,0,0,0,5.92,12Z"})," ",l.createElement("path",{d:"M26.53,50.46H18.64A2.17,2.17,0,0,1,17,49.74l-2.15-2.43a1.71,1.71,0,0,0-2.53,0l-1.85,2.08a3.18,3.18,0,0,1-2.38,1.07H8a30.16,30.16,0,0,0,44,0Z"}))}var d=a(91174),u=a(25195);function p(e){return l.createElement(o.Z,(0,i.Z)({},e,{viewBox:"0 0 397.7 311.7"}),l.createElement("linearGradient",{id:"SVGID_1_",gradientUnits:"userSpaceOnUse",x1:"360.8791",y1:"351.4553",x2:"141.213",y2:"-69.2936",gradientTransform:"matrix(1 0 0 -1 0 314)"},l.createElement(u.Z,{offset:"0",sx:{stopColor:"#00FFA3"}}),l.createElement(u.Z,{offset:"1",sx:{stopColor:"#DC1FFF"}})),l.createElement("path",{className:"st0",d:"M64.6,237.9c2.4-2.4,5.7-3.8,9.2-3.8h317.4c5.8,0,8.7,7,4.6,11.1l-62.7,62.7c-2.4,2.4-5.7,3.8-9.2,3.8H6.5 c-5.8,0-8.7-7-4.6-11.1L64.6,237.9z"}),l.createElement("linearGradient",{id:"SVGID_2_",gradientUnits:"userSpaceOnUse",x1:"264.8291",y1:"401.6014",x2:"45.163",y2:"-19.1475",gradientTransform:"matrix(1 0 0 -1 0 314)"},l.createElement(u.Z,{offset:"0",sx:{stopColor:"#00FFA3"}}),l.createElement(u.Z,{offset:"1",sx:{stopColor:"#DC1FFF"}})),l.createElement("path",{className:"st1",d:"M64.6,3.8C67.1,1.4,70.4,0,73.8,0h317.4c5.8,0,8.7,7,4.6,11.1l-62.7,62.7c-2.4,2.4-5.7,3.8-9.2,3.8H6.5 c-5.8,0-8.7-7-4.6-11.1L64.6,3.8z"}),l.createElement("linearGradient",{id:"SVGID_3_",gradientUnits:"userSpaceOnUse",x1:"312.5484",y1:"376.688",x2:"92.8822",y2:"-44.061",gradientTransform:"matrix(1 0 0 -1 0 314)"},l.createElement(u.Z,{offset:"0",sx:{stopColor:"#00FFA3"}}),l.createElement(u.Z,{offset:"1",sx:{stopColor:"#DC1FFF"}})),l.createElement("path",{className:"st2",d:"M333.1,120.1c-2.4-2.4-5.7-3.8-9.2-3.8H6.5c-5.8,0-8.7,7-4.6,11.1l62.7,62.7c2.4,2.4,5.7,3.8,9.2,3.8h317.4 c5.8,0,8.7-7,4.6-11.1L333.1,120.1z"}))}function c(e){let{chain:t,note:a,sx:o}=e;return l.createElement(l.Fragment,null,l.createElement(n.Z,{display:"flex",alignItems:"center",sx:{padding:"1rem",...o}},"aptos"===t?l.createElement(s,null):"near"===t?l.createElement(d.Q,null):l.createElement(p,null),l.createElement(r.Z,{display:"inline",sx:{padding:"0rem 0.5rem",fontWeight:"bold"}}," ","Note:"," "),l.createElement(r.Z,{display:"inline"},a)))}},24008:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(99226),r=a(92949),l=a(44996),o=a(67294);const i=e=>{const{colorMode:t}=(0,r.I)();let a=(0,l.Z)("dark"===t&&e.darkImg?e.darkImg:e.img),i="inherit";e.lightBg&&"dark"!==t&&(i=e.lightBg),e.darkBg&&"dark"===t&&(i=e.darkBg);let s={};return e.sx&&(s={backgroundColor:i,m:"auto",display:"flex",...s,...e.sx}),o.createElement(n.Z,{component:"img",sx:s,src:a})}},91174:(e,t,a)=>{a.d(t,{Q:()=>o});var n=a(53219),r=a(83117),l=a(67294);function o(e){return l.createElement(n.Z,(0,r.Z)({},e,{viewBox:"0 0 90.1 90"}),l.createElement("path",{d:"M72.2,4.6L53.4,32.5c-1.3,1.9,1.2,4.2,3,2.6L74.9,19c0.5-0.4,1.2-0.1,1.2,0.6v50.3c0,0.7-0.9,1-1.3,0.5l-56-67 C17,1.2,14.4,0,11.5,0h-2C4.3,0,0,4.3,0,9.6v70.8C0,85.7,4.3,90,9.6,90c3.3,0,6.4-1.7,8.2-4.6l18.8-27.9c1.3-1.9-1.2-4.2-3-2.6 l-18.5,16c-0.5,0.4-1.2,0.1-1.2-0.6V20.1c0-0.7,0.9-1,1.3-0.5l56,67c1.8,2.2,4.5,3.4,7.3,3.4h2c5.3,0,9.6-4.3,9.6-9.6V9.6 c0-5.3-4.3-9.6-9.6-9.6C77.1,0,74,1.7,72.2,4.6z"}))}},68193:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var n=a(83117),r=(a(67294),a(3905)),l=a(46550),o=a(36752),i=a(24008);const s={sidebar_position:10,slug:"updates",title:"Update Lifecycle"},d=void 0,u={unversionedId:"feeds/update-lifecycle",id:"feeds/update-lifecycle",title:"Update Lifecycle",description:"An update request can be broken down into three stages:",source:"@site/docs/feeds/update-lifecycle.mdx",sourceDirName:"feeds",slug:"/feeds/updates",permalink:"/feeds/updates",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,slug:"updates",title:"Update Lifecycle"},sidebar:"learn",previous:{title:"Switchboard Tasks",permalink:"/feeds/tasks"},next:{title:"Cost Estimations",permalink:"/feeds/cost"}},p={},c=[{value:"Requesting Updates",id:"requesting-updates",level:2},{value:"Oracle Execution",id:"oracle-execution",level:2},{value:"Oracle Consensus",id:"oracle-consensus",level:2},{value:"Sliding Window Mode",id:"sliding-window-mode",level:3}],m={toc:c};function g(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"An update request can be broken down into three stages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Requesting Updates"),(0,r.kt)("li",{parentName:"ul"},"Oracle Execution"),(0,r.kt)("li",{parentName:"ul"},"Oracle Consensus")),(0,r.kt)("p",null,"Let's walk through what the feed update lifecycle looks like."),(0,r.kt)(i.Z,{img:"/img/update_request_activity.png",sx:{display:"flex",width:"90%"},mdxType:"MarkdownImage"}),(0,r.kt)("h2",{id:"requesting-updates"},"Requesting Updates"),(0,r.kt)("p",null,"A feed is updated when someone calls ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregatorOpenRound")," on-chain. If\nopenRound is called before ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.minUpdateDelaySeconds")," have elapsed, the\nopenRound call will fail and the user will forfeit their transaction fees. If\nsuccessful, the user is rewarded from the feed's lease for keeping the feed\nupdating."),(0,r.kt)("p",null,"Optionally, a feed may be pushed onto a crank and updated periodically. Any data\nfeed permitted to request updates on a queue is also permitted to join a queue's\nexisting Crank, ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.crankPubkey"),". The Crank is the scheduling mechanism\nbehind feeds that allow them to be periodically updated. The Crank is a buffer\naccount that stores a collection of aggregator public keys, ordered by their\nnext available update, with some level of jitter added to prevent a predictable\noracle allocation cycle. A feed can set ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.disableCrank")," to prevent\nbeing pushed onto a Crank and draining it's lease."),(0,r.kt)("p",null,"After ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregatorOpenRound")," is called successfully, the queue assigns the next\n",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.oracleRequestBatchSize")," oracles to the update request and assigns\nthem to the current round."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Any user calls ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"aggregatorOpenRound")),", either manually or via a crank turn"),(0,r.kt)("li",{parentName:"ul"},"sbv2 program checks if ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.minUpdateDelaySeconds")," have passed since\nthe last openRound call"),(0,r.kt)("li",{parentName:"ul"},"sbv2 program checks if a LeaseContract has enough funds to reward the oracles\nfor the next round"),(0,r.kt)("li",{parentName:"ul"},"sbv2 program assigns the next ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.oracleRequestBatchSize")," oracles to\nthe update request and emits an ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"AggregatorOpenRoundEvent")))),(0,r.kt)("h2",{id:"oracle-execution"},"Oracle Execution"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Oracle watches the chain for an ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"AggregatorOpenRoundEvent"))," with the\noracle's public key assigned to the update"),(0,r.kt)("li",{parentName:"ul"},"Oracle fetches the feed and job account definitions from its RPC Provider"),(0,r.kt)("li",{parentName:"ul"},"Oracle verifies the job account definitions match the feeds\n",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.jobHashes")),(0,r.kt)("li",{parentName:"ul"},"Oracle executes the job definitions in parallel"),(0,r.kt)("li",{parentName:"ul"},"When an oracle receives ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.minJobResults"),", it calculates the weighted\nmedian based on the feeds ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.jobWeights"),". Note, this is not enforced\non-chain and is purely up to the oracle to respect"),(0,r.kt)("li",{parentName:"ul"},"If a feed has configured a ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.varianceThreshold")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.forceReportPeriod")," has not elapsed, the oracle calculates the\npercentage change between its calculated result and the previous confirmed\nround. If it does not exceed the feeds ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.varianceThreshold"),", the\noracle drops the update request and waits for new update request"),(0,r.kt)("li",{parentName:"ul"},"If a feeds configuration dictate a new on-chain result, the oracle submits an\n",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"aggregatorSaveResult"))," transaction")),(0,r.kt)("h2",{id:"oracle-consensus"},"Oracle Consensus"),(0,r.kt)("p",null,"When a new update is requested, the feeds ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.currentRound")," is zeroized.\nThe AggregatorRound is updated each time an assigned oracle responds. After\n",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.minOracleResponses")," responses, the round is moved to\n",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.latestConfirmedRound")," and ready for on-chain programs to consume."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"sbv2 program waits for ",(0,r.kt)("inlineCode",{parentName:"li"},"aggregator.minOracleResults")," to be submitted by the\nassigned oracles"),(0,r.kt)("li",{parentName:"ul"},"When sufficient oracle responses, the sbv2 program computes the accepted value\nfrom the median of the oracle responses"),(0,r.kt)("li",{parentName:"ul"},"If a feed has a history buffer account, the accepted result is pushed onto the\nbuffer"),(0,r.kt)("li",{parentName:"ul"},"Oracles that responded within ",(0,r.kt)("inlineCode",{parentName:"li"},"queue.varianceToleranceMultiplier")," are rewarded\n",(0,r.kt)("inlineCode",{parentName:"li"},"queue.reward")," from the feed's LeaseContract"),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"queue.slashingEnabled"),", oracles that responded outside the\n",(0,r.kt)("inlineCode",{parentName:"li"},"queue.varianceToleranceMultiplier")," are slashed ",(0,r.kt)("inlineCode",{parentName:"li"},"queue.reward")," tokens from\nit's ",(0,r.kt)("inlineCode",{parentName:"li"},"oracle.tokenAccount")," and transferred to the feed's ",(0,r.kt)("inlineCode",{parentName:"li"},"lease.escrow")),(0,r.kt)("li",{parentName:"ul"},"If additional oracle responses are submitted after a value has been accepted,\nthe median is recalculated based on the new response set, oracle rewards are\nredistributed, and the history buffer value is updated")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"AggregatorRound Definition (Solana)"),(0,r.kt)(l.default,{mdxType:"AggregatorRound"})),(0,r.kt)("h3",{id:"sliding-window-mode"},"Sliding Window Mode"),(0,r.kt)(o.Z,{chain:"solana",note:"Currently, only Solana supports sliding window mode.",mdxType:"ChainNote"}),(0,r.kt)("p",null,"During periods of network congestion, oracle responses may be delayed and\nprocessed by the network after the next round has started. This results in a\ndata feed to be stale for a prolonged period of time even when an oracle\nresponse is just milliseconds too late."),(0,r.kt)("p",null,"To remedy this, Solana feeds may enable sliding window mode\n",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.resolutionMode"),". Sliding window mode allows an aggregator to store\nthe last 16 oracle responses even if they were processed after its assigned\nround has closed. The sliding window account can only store a single response\nper oracle to prevent an oracle from filling the responses with malicous data.\nUpon each response, the ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.latestConfirmedRound")," is calculated from the\nmedian of the last ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.oracleRequestBatchSize")," responses."))}g.isMDXComponent=!0},46550:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=a(83117),r=(a(67294),a(3905));const l={},o=void 0,i={unversionedId:"solana/idl/types/AggregatorRound",id:"solana/idl/types/AggregatorRound",title:"AggregatorRound",description:"| Field              | Type                                                           | Description                                                                                                                                           |",source:"@site/docs/solana/idl/types/AggregatorRound.md",sourceDirName:"solana/idl/types",slug:"/solana/idl/types/AggregatorRound",permalink:"/solana/idl/types/AggregatorRound",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"solana",previous:{title:"AggregatorResolutionMode",permalink:"/solana/idl/types/AggregatorResolutionMode"},next:{title:"AggregatorSaveResultParams",permalink:"/solana/idl/types/AggregatorSaveResultParams"}},s={},d=[],u={toc:d};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"numSuccess"),(0,r.kt)("td",{parentName:"tr",align:null},"u32"),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the number of successful responses received from nodes. Nodes can submit one successful response per round. Number of successful responses.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"numError"),(0,r.kt)("td",{parentName:"tr",align:null},"u32"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of error responses.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isClosed"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether an update request round has ended.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"roundOpenSlot"),(0,r.kt)("td",{parentName:"tr",align:null},"u64"),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the ",(0,r.kt)("inlineCode",{parentName:"td"},"solana_program::clock::Slot")," that the round was opened at. Solana slot when the update request round was open.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"roundOpenTimestamp"),(0,r.kt)("td",{parentName:"tr",align:null},"i64"),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the ",(0,r.kt)("inlineCode",{parentName:"td"},"solana_program::clock::UnixTimestamp;")," the round was opened at. Timestamp when the update request round was open.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"result"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/solana/idl/types/switchboarddecimal"},"SwitchboardDecimal")),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the current median of all successful round responses.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stdDeviation"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/solana/idl/types/switchboarddecimal"},"SwitchboardDecimal")),(0,r.kt)("td",{parentName:"tr",align:null},"Standard deviation of the accepted results in the round.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minResponse"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/solana/idl/types/switchboarddecimal"},"SwitchboardDecimal")),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the minimum node response this round. Maintains the minimum oracle response this round.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxResponse"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/solana/idl/types/switchboarddecimal"},"SwitchboardDecimal")),(0,r.kt)("td",{parentName:"tr",align:null},"Maintains the maximum node response this round. Maintains the maximum oracle response this round.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"oraclePubkeysData"),(0,r.kt)("td",{parentName:"tr",align:null},"publicKey","[16]"),(0,r.kt)("td",{parentName:"tr",align:null},"Pubkeys of the oracles fulfilling this round. Public keys of the oracles fulfilling this round.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mediansData"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/solana/idl/types/switchboarddecimal"},"SwitchboardDecimal"),"[16]"),(0,r.kt)("td",{parentName:"tr",align:null},"Represents all successful node responses this round. ",(0,r.kt)("inlineCode",{parentName:"td"},"NaN")," if empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"currentPayout"),(0,r.kt)("td",{parentName:"tr",align:null},"i64","[16]"),(0,r.kt)("td",{parentName:"tr",align:null},"Current rewards/slashes oracles have received this round. Rewards to provide oracles and round openers on this queue.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mediansFulfilled"),(0,r.kt)("td",{parentName:"tr",align:null},"bool","[16]"),(0,r.kt)("td",{parentName:"tr",align:null},"Keep track of which responses are fulfilled here. Keeps track of which responses are fulfilled here.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"errorsFulfilled"),(0,r.kt)("td",{parentName:"tr",align:null},"bool","[16]"),(0,r.kt)("td",{parentName:"tr",align:null},"Keeps track of which errors are fulfilled here.")))))}p.isMDXComponent=!0}}]);