"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5623],{3905:(t,n,l)=>{l.d(n,{Zo:()=>c,kt:()=>p});var e=l(7294);function r(t,n,l){return n in t?Object.defineProperty(t,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):t[n]=l,t}function o(t,n){var l=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),l.push.apply(l,e)}return l}function i(t){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?o(Object(l),!0).forEach((function(n){r(t,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(l,n))}))}return t}function a(t,n){if(null==t)return{};var l,e,r=function(t,n){if(null==t)return{};var l,e,r={},o=Object.keys(t);for(e=0;e<o.length;e++)l=o[e],n.indexOf(l)>=0||(r[l]=t[l]);return r}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(e=0;e<o.length;e++)l=o[e],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(t,l)&&(r[l]=t[l])}return r}var u=e.createContext({}),k=function(t){var n=e.useContext(u),l=n;return t&&(l="function"==typeof t?t(n):i(i({},n),t)),l},c=function(t){var n=k(t.components);return e.createElement(u.Provider,{value:n},t.children)},s={inlineCode:"code",wrapper:function(t){var n=t.children;return e.createElement(e.Fragment,{},n)}},b=e.forwardRef((function(t,n){var l=t.components,r=t.mdxType,o=t.originalType,u=t.parentName,c=a(t,["components","mdxType","originalType","parentName"]),b=k(l),p=r,d=b["".concat(u,".").concat(p)]||b[p]||s[p]||o;return l?e.createElement(d,i(i({ref:n},c),{},{components:l})):e.createElement(d,i({ref:n},c))}));function p(t,n){var l=arguments,r=n&&n.mdxType;if("string"==typeof t||r){var o=l.length,i=new Array(o);i[0]=b;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=t,a.mdxType="string"==typeof t?t:r,i[1]=a;for(var k=2;k<o;k++)i[k]=l[k];return e.createElement.apply(null,i)}return e.createElement.apply(null,l)}b.displayName="MDXCreateElement"},7248:(t,n,l)=>{l.r(n),l.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>a,toc:()=>k});var e=l(3117),r=(l(7294),l(3905));const o={sidebar_position:5,slug:"./config",title:"Configuration"},i="Configuration",a={unversionedId:"oracles/configuration",id:"oracles/configuration",title:"Configuration",description:"RPC Endpoint",source:"@site/docs/oracles/configuration.mdx",sourceDirName:"oracles",slug:"/oracles/config",permalink:"/sbv2-core/oracles/config",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,slug:"./config",title:"Configuration"},sidebar:"operator",previous:{title:"Background",permalink:"/sbv2-core/oracles/"},next:{title:"Docker",permalink:"/sbv2-core/oracles/docker"}},u={},k=[{value:"RPC Endpoint",id:"rpc-endpoint",level:2},{value:"Solana",id:"solana",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Solana Config",id:"solana-config",level:3},{value:"Oracle Config",id:"oracle-config",level:3},{value:"Keypair Config",id:"keypair-config",level:3},{value:"Monitoring Config",id:"monitoring-config",level:3}],c={toc:k};function s(t){let{components:n,...l}=t;return(0,r.kt)("wrapper",(0,e.Z)({},c,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configuration"},"Configuration"),(0,r.kt)("h2",{id:"rpc-endpoint"},"RPC Endpoint"),(0,r.kt)("p",null,"A Switchboard oracle should have a reliable RPC endpoint with no rate limiting\nin order to listen to the chain for events and respond in a timely manner."),(0,r.kt)("h3",{id:"solana"},"Solana"),(0,r.kt)("p",null,"On Solana, RPC providers will need to have ",(0,r.kt)("inlineCode",{parentName:"p"},"--full-rpc-api")," enabled in their\nvalidator config, along with the ability to support fetching 100 program\naccounts in a single getProgramAccounts request."),(0,r.kt)("p",null,"Switchboard recommends the following RPC providers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"RPC Pool"),(0,r.kt)("li",{parentName:"ul"},"GenesysGo"),(0,r.kt)("li",{parentName:"ul"},"Quick Node")),(0,r.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'env title=".env"',env:!0,title:'".env"'},'# Solana Config\nCLUSTER=""\nRPC_URL=""\nWS_URL=""\nBACKUP_MAINNET_RPC=""\n# Oracle Config\nORACLE_KEY=""\nHEARTBEAT_INTERVAL=15\nGCP_CONFIG_BUCKET=""\nUNWRAP_STAKE_THRESHOLD=""\n# Keypair Config\nPAYER_SECRET_PATH=""\nPAYER_SECRETS=""\nGOOGLE_PAYER_SECRET_PATH=""\n# Monitoring Config\nMETRICS_EXPORTER\nPAGERDUTY_EVENT_KEY=""\nVERBOSE=1\n')),(0,r.kt)("h3",{id:"solana-config"},"Solana Config"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Env Variable"),(0,r.kt)("th",null,"Definition"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"CLUSTER"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Required")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - String (devnet / mainnet-beta)",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Solana cluster you will be running an oracle on (mainnet-beta/devnet)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"RPC_URL"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Required")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - URL",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Solana RPC URL that must be capable of supporting websockets. The default RPC pools should be avoided at all cost as you will quickly hit the rate limits and risk being slashed")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"WS_URL"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Optional")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - URL",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - RPC_URL",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Websocket URL to connect to a Solana RPC server. If not provided, oracle will fallback to RPC_URL")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"BACKUP_MAINNET_RPC"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Optional")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - URL",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - https://api.mainnet-beta.solana.com",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Backup RPC URL in case of network congestion")))),(0,r.kt)("h3",{id:"oracle-config"},"Oracle Config"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Env Variable"),(0,r.kt)("th",null,"Definition"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"ORACLE_KEY"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Required")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - Public Key",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Public key of the oracle account that has been granted permissions to use an oracle queue ",(0,r.kt)("br",null))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"HEARTBEAT_INTERVAL"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Optional")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - Number (seconds)",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - 30",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Seconds between oracle heartbeats. Queues have different oracle heartbeat requirements. Recommended value is 15")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"GCP_CONFIG_BUCKET"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Optional")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - GCP Resource Path",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - Looks for configs.json in the current working directory. If not found, no config is loaded.",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Contains API keys for private API endpoints")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"UNWRAP_STAKE_THRESHOLD"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Optional")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - Number (SOL amount, Ex. 1.55)",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - 0, disabled.",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - The Solana balance amount to trigger an unwrap stake action. When an oracle's Solana balance falls below the set threshold, the node will automatically unwrap funds from the oracle's staking wallet, leaving at least 0.1 wSOL or 10% more than the queue's minimum stake requirement.")))),(0,r.kt)("h3",{id:"keypair-config"},"Keypair Config"),(0,r.kt)("p",null,"You must provide one of the following environment variables, which is the same\nkeypair that is the authority for the given ",(0,r.kt)("inlineCode",{parentName:"p"},"$ORACLE_KEY")," and will pay for any\non-chain transactions."),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Env Variable"),(0,r.kt)("th",null,"Definition"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"PAYER_SECRET_PATH"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Filesystem Path",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Local filesystem path to keypair file that will pay for on-chain transactions and is the authority for the oracle")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"PAYER_SECRETS"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Docker Secret",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Docker Secret path to keypair file that will pay for on-chain transactions and is the authority for the oracle")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"GOOGLE_PAYER_SECRET_PATH"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - GCP Resource Path",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Google cloud resource to manage your keypair securely.")))),(0,r.kt)("h3",{id:"monitoring-config"},"Monitoring Config"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Env Variable"),(0,r.kt)("th",null,"Definition"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"METRICS_EXPORTER"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Optional")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - prometheus / gcp / opentelemetry-collector*",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - prometheus",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Dictates which metric suite to aggregate resource metrics, as defined in:",(0,r.kt)("br",null),(0,r.kt)("a",{href:"./monitoring"},"Oracle - Monitoring"),(0,r.kt)("br",null),"*opentelemetry-collector only supports the default endpoint localhost:55681/v1/metric")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"PAGERDUTY_EVENT_KEY"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Optional")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - String",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - Paging disabled",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Token provided by pagerduty for sending pages about various alerts.",(0,r.kt)("br",null),(0,r.kt)("a",{href:"./monitoring#alerts"},"Oracle - Alerts"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,"VERBOSE"),(0,r.kt)("td",null,(0,r.kt)("b",null,(0,r.kt)("u",null,"Optional")),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - Flag (0 or 1)",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - 0, normal logging",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Set to 1 to increase the level of logging")))))}s.isMDXComponent=!0}}]);