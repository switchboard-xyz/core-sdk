"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8077],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(n),f=r,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},55180:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));const o={title:"Create"},i=void 0,l={unversionedId:"dev/cli/solana/queue/create",id:"dev/cli/solana/queue/create",title:"Create",description:"create an oracle queue",source:"@site/docs/dev/cli/solana/queue/create.md",sourceDirName:"dev/cli/solana/queue",slug:"/dev/cli/solana/queue/create",permalink:"/dev/cli/solana/queue/create",draft:!1,tags:[],version:"current",frontMatter:{title:"Create"},sidebar:"dev",previous:{title:"Index",permalink:"/dev/cli/solana/print/"},next:{title:"Print",permalink:"/dev/cli/solana/queue/print"}},u={},s=[],c={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"create an oracle queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana queue create [-h] [-v] [-s] [--mainnetBeta | --cluster devnet|mainnet-beta|mainnet|localnet] [-u <value>]\n    [--programId <value>] [--commitment confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger]\n    [--json] [-a <value>] [--queueKeypair <value>] [--dataBufferKeypair <value>] [--size <value>] [--name <value>]\n    [--metadata <value>] [--reward <value>] [--minStake <value>] [--oracleTimeout <value>] [--slashingEnabled]\n    [--permissionedFeeds] [--unpermissionedVrf] [--enableBufferRelayers] [--feedProbationPeriod <value>]\n    [--consecutiveFeedFailureLimit <value>] [--consecutiveOracleFailureLimit <value>]\n\nFLAGS\n  -a, --authority=<value>                  alternate keypair that is the authority for the queue and is required to\n                                           approve permissions\n  -h, --help                               Show CLI help.\n  -k, --keypair=<value>                    keypair that will pay for onchain transactions. defaults to new account\n                                           authority if no alternate authority provided\n  -s, --silent                             suppress cli prompts\n  -u, --rpcUrl=<value>                     alternate RPC url\n  -v, --verbose                            log everything\n  --cluster=<option>                       the solana cluster to connect to\n                                           <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>                    [default: confirmed] transaction commitment level to use\n                                           <options: confirmed|finalized|processed>\n  --consecutiveFeedFailureLimit=<value>    [default: 1000] consecutive failure limit for a feed before feed permission\n                                           is revoked.\n  --consecutiveOracleFailureLimit=<value>  [default: 1000] consecutive failure limit for an oracle before oracle\n                                           permission is revoked.\n  --dataBufferKeypair=<value>              keypair to use for the oracle queue data buffer account.\n  --enableBufferRelayers                   enabling this setting will allow buffer relayer accounts to call openRound.\n  --feedProbationPeriod=<value>            [default: 1000] After a feed lease is funded or re-funded, it must\n                                           consecutively succeed N amount of times or its authorization to use the queue\n                                           is auto-revoked.\n  --ledger                                 enable ledger support\n  --ledgerPath=<value>                     HID path to the ledger\n  --mainnetBeta                            WARNING: use mainnet-beta solana cluster\n  --metadata=<value>                       metadata of the aggregator\n  --minStake=<value>                       [default: 0] the reward payed out to oracles for responding to an update\n                                           request on-chain, Ex: 2 requires oracles to have 2 wSOL in their staking\n                                           wallet before heartbeating\n  --name=<value>                           name of the aggregator\n  --oracleTimeout=<value>                  [default: 180] time period (in seconds) we should remove an oracle after if\n                                           no response\n  --permissionedFeeds                      enabling this setting means data feeds need explicit permission to join the\n                                           queue.\n  --programId=<value>                      alternative Switchboard program ID to interact with\n  --queueKeypair=<value>                   keypair to use for the oracle queue account. This will be the account's\n                                           publicKey\n  --reward=<value>                         [default: 0] the reward payed out to oracles for responding to an update\n                                           request on-chain, Ex: A reward of 0.0000075 with a feed with a batchSize of 4\n                                           would deduct (4 * 0.0000075) wSOL from an aggregators lease each round.\n  --size=<value>                           [default: 100] set the size of the queue\n  --slashingEnabled                        whether slashing is enabled on this queue.\n  --unpermissionedVrf                      enabling this setting means data feeds do not need explicit permission to\n                                           request VRF proofs and verifications from this queue.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an oracle queue\n")))}d.isMDXComponent=!0}}]);