"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4821],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>v});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var c=r.createContext({}),u=function(e){var a=r.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=u(e.components);return r.createElement(c.Provider,{value:a},e.children)},s={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},k=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),k=u(n),v=t,d=k["".concat(c,".").concat(v)]||k[v]||s[v]||o;return n?r.createElement(d,i(i({ref:a},p),{},{components:n})):r.createElement(d,i({ref:a},p))}));function v(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,i=new Array(o);i[0]=k;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l.mdxType="string"==typeof e?e:t,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},363:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>c,default:()=>v,frontMatter:()=>l,metadata:()=>u,toc:()=>s});var r=n(7462),t=(n(7294),n(3905));const o={toc:[{value:"<code>sbv2 crank add aggregator [CRANKKEY] [AGGREGATORKEY]</code>",id:"sbv2-crank-add-aggregator-crankkey-aggregatorkey",level:2},{value:"<code>sbv2 crank create [QUEUEKEY]</code>",id:"sbv2-crank-create-queuekey",level:2},{value:"<code>sbv2 crank list [CRANKKEY]</code>",id:"sbv2-crank-list-crankkey",level:2},{value:"<code>sbv2 crank pop [CRANKKEY]</code>",id:"sbv2-crank-pop-crankkey",level:2},{value:"<code>sbv2 crank print [CRANKKEY]</code>",id:"sbv2-crank-print-crankkey",level:2},{value:"<code>sbv2 crank push [CRANKKEY] [AGGREGATORKEY]</code>",id:"sbv2-crank-push-crankkey-aggregatorkey",level:2},{value:"<code>sbv2 crank turn [CRANKKEY]</code>",id:"sbv2-crank-turn-crankkey",level:2}]};function i(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",(0,r.Z)({},o,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"interact with a switchboard crank account"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-crank-add-aggregator-crankkey-aggregatorkey"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 crank add aggregator [CRANKKEY] [AGGREGATORKEY]"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-crank-create-queuekey"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 crank create [QUEUEKEY]"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-crank-list-crankkey"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 crank list [CRANKKEY]"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-crank-pop-crankkey"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 crank pop [CRANKKEY]"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-crank-print-crankkey"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 crank print [CRANKKEY]"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-crank-push-crankkey-aggregatorkey"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 crank push [CRANKKEY] [AGGREGATORKEY]"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"#sbv2-crank-turn-crankkey"},(0,t.kt)("inlineCode",{parentName:"a"},"sbv2 crank turn [CRANKKEY]")))),(0,t.kt)("h2",{id:"sbv2-crank-add-aggregator-crankkey-aggregatorkey"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 crank add aggregator [CRANKKEY] [AGGREGATORKEY]")),(0,t.kt)("p",null,"push an aggregator onto a crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 crank add aggregator [CRANKKEY] [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>]\n\nARGUMENTS\n  CRANKKEY       public key of the crank\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  push an aggregator onto a crank\n\nALIASES\n  $ sbv2 aggregator add crank\n  $ sbv2 crank add aggregator\n")),(0,t.kt)("h2",{id:"sbv2-crank-create-queuekey"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 crank create [QUEUEKEY]")),(0,t.kt)("p",null,"add a crank to an existing oracle queue"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 crank create [QUEUEKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>] [-n\n    <value>] [-r <value>] [--queueAuthority <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create a crank on\n\nFLAGS\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -n, --name=<value>        name of the crank for easier identification\n  -r, --maxRows=<value>     [default: 100] maximum number of rows a crank can support\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n  --queueAuthority=<value>  alternative keypair to use for queue authority\n\nDESCRIPTION\n  add a crank to an existing oracle queue\n\nEXAMPLES\n  $ sbv2 queue:add:crank 5aYuxRdcB9GpWrEXVMBQp2R5uf94uoBiFdMEBwcmHuU4 -k ../authority-keypair.json -n crank-1\n")),(0,t.kt)("h2",{id:"sbv2-crank-list-crankkey"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 crank list [CRANKKEY]")),(0,t.kt)("p",null,"list the pubkeys currently on the crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 crank list [CRANKKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n    [--force] [-f <value>]\n\nARGUMENTS\n  CRANKKEY  public key of the crank\n\nFLAGS\n  -f, --outputFile=<value>  output file to save aggregator pubkeys to\n  -k, --keypair=<value>     keypair that will pay for onchain transactions. defaults to new account authority if no\n                            alternate authority provided\n  -s, --silent              suppress cli prompts\n  -u, --rpcUrl=<value>      alternate RPC url\n  -v, --verbose             log everything\n  --force                   overwrite output file if exists\n  --mainnetBeta             WARNING: use mainnet-beta solana cluster\n  --programId=<value>       alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  list the pubkeys currently on the crank\n")),(0,t.kt)("h2",{id:"sbv2-crank-pop-crankkey"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 crank pop [CRANKKEY]")),(0,t.kt)("p",null,"pop the crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 crank pop [CRANKKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  CRANKKEY  public key of the crank\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  pop the crank\n")),(0,t.kt)("h2",{id:"sbv2-crank-print-crankkey"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 crank print [CRANKKEY]")),(0,t.kt)("p",null,"print deserialized switchboard crank account"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 crank print [CRANKKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  CRANKKEY  public key of the crank account to deserialize\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  print deserialized switchboard crank account\n\nALIASES\n  $ sbv2 crank print\n\nEXAMPLES\n  $ sbv2 crank:print 85L2cFUvXaeGQ4HrzP8RJEVCL7WvRrXM2msvEmQ82AVr\n")),(0,t.kt)("h2",{id:"sbv2-crank-push-crankkey-aggregatorkey"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 crank push [CRANKKEY] [AGGREGATORKEY]")),(0,t.kt)("p",null,"push an aggregator onto a crank"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 crank push [CRANKKEY] [AGGREGATORKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k\n    <value>]\n\nARGUMENTS\n  CRANKKEY       public key of the crank\n  AGGREGATORKEY  public key of the aggregator\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  push an aggregator onto a crank\n\nALIASES\n  $ sbv2 aggregator add crank\n  $ sbv2 crank add aggregator\n")),(0,t.kt)("h2",{id:"sbv2-crank-turn-crankkey"},(0,t.kt)("inlineCode",{parentName:"h2"},"sbv2 crank turn [CRANKKEY]")),(0,t.kt)("p",null,"turn the crank and get rewarded if aggregator updates available"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 crank turn [CRANKKEY] [-v] [-s] [--mainnetBeta] [-u <value>] [--programId <value>] [-k <value>]\n\nARGUMENTS\n  CRANKKEY  public key of the crank to turn\n\nFLAGS\n  -k, --keypair=<value>  keypair that will pay for onchain transactions. defaults to new account authority if no\n                         alternate authority provided\n  -s, --silent           suppress cli prompts\n  -u, --rpcUrl=<value>   alternate RPC url\n  -v, --verbose          log everything\n  --mainnetBeta          WARNING: use mainnet-beta solana cluster\n  --programId=<value>    alternative Switchboard program ID to interact with\n\nDESCRIPTION\n  turn the crank and get rewarded if aggregator updates available\n\nEXAMPLES\n  $ sbv2 crank:turn 85L2cFUvXaeGQ4HrzP8RJEVCL7WvRrXM2msvEmQ82AVr --keypair ../payer-keypair.json\n")))}i.isMDXComponent=!0;const l={sidebar_position:30,title:"sbv2 crank"},c=void 0,u={unversionedId:"cli/crank",id:"cli/crank",title:"sbv2 crank",description:"",source:"@site/api/cli/crank.mdx",sourceDirName:"cli",slug:"/cli/crank",permalink:"/api/cli/crank",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,title:"sbv2 crank"},sidebar:"tutorialSidebar",previous:{title:"sbv2 lease",permalink:"/api/cli/lease"},next:{title:"sbv2 localnet",permalink:"/api/cli/localnet"}},p={},s=[],k={toc:s};function v(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",(0,r.Z)({},k,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)(i,{mdxType:"Sbv2Crank"}))}v.isMDXComponent=!0}}]);