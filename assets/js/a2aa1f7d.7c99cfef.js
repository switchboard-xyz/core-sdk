"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2034],{54852:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(49231);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(a),h=r,m=c["".concat(i,".").concat(h)]||c[h]||p[h]||o;return a?n.createElement(m,l(l({ref:t},d),{},{components:a})):n.createElement(m,l({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},4225:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(49231),r=a(19841);const o={tabItem:"tabItem_Hnis"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},t)}},15078:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(432),r=a(49231),o=a(19841),l=a(18665),s=a(88777),i=a(67095);const u={tabList:"tabList_IpD_",tabItem:"tabItem_lwlC"};function d(e){let{className:t,block:a,selectedValue:s,selectValue:i,tabValues:d}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),h=e=>{const t=e.currentTarget,a=c.indexOf(t),n=d[a].value;n!==s&&(p(t),i(n))},m=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},d.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:h},l,{className:(0,o.Z)("tabs__item",u.tabItem,l?.className,{"tabs__item--active":s===t})}),a??t)})))}function c(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function p(e){const t=(0,s.Y)(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",u.tabList)},r.createElement(d,(0,n.Z)({},e,t)),r.createElement(c,(0,n.Z)({},e,t)))}function h(e){const t=(0,i.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},88777:(e,t,a)=>{a.d(t,{Y:()=>p});var n=a(49231),r=a(19409),o=a(62002),l=a(17242),s=a(75601);function i(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function u(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??i(a);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function c(e){let{queryString:t=!1,groupId:a}=e;const l=(0,r.k6)(),s=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o._X)(s),(0,n.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(l.location.search);t.set(s,e),l.replace({...l.location,search:t.toString()})}),[s,l])]}function p(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,o=u(e),[l,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[p,h]=c({queryString:a,groupId:r}),[m,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,s.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:r}),k=(()=>{const e=p??m;return d({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),h(e),f(e)}),[h,f,o]),tabValues:o}}},71176:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(49231);const r=e=>{let{type:t,header:a,children:r}=e;const o=a||t.toUpperCase();return n.createElement("div",{className:`custom-admonition ${t}`},o&&n.createElement("div",{className:"custom-admonition-header"},o),n.createElement("div",{className:"custom-admonition-content"},r))}},89594:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(49231);const r=e=>{let{header:t,children:a}=e;const[r,o]=(0,n.useState)(!1);return n.createElement("div",{className:"custom-details "+(r?"open":"")},n.createElement("summary",{onClick:()=>{o(!r)}},t),n.createElement("div",{className:"divider"}),n.createElement("div",{className:"details-content"},a))}},54199:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(55013),r=a(56774),o=a(51102),l=a(49231);const s=e=>{const{colorMode:t}=(0,n.I)(),a=(0,r.Z)("dark"===t&&e.darkImg?e.darkImg:e.img);let s="inherit";e.lightBg&&"dark"!==t&&(s=e.lightBg),e.darkBg&&"dark"===t&&(s=e.darkBg);let i={};return e.sx&&(i={backgroundColor:s,m:"auto",display:"flex",...i,...e.sx}),l.createElement(o.Z,{component:"img",sx:i,src:a})}},65304:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>k,frontMatter:()=>u,metadata:()=>c,toc:()=>h});var n=a(432),r=(a(49231),a(54852)),o=(a(54199),a(60054),a(18150),a(15078)),l=a(4225),s=a(89594),i=a(71176);const u={slug:"./task-runner",title:"Build Data Feeds On Task Runner WIP",description:"Learn how to seamlessly build customizable Switchboard data feeds."},d=void 0,c={unversionedId:"solana/data-feed-guides/build-data-feeds-on-task-runner",id:"solana/data-feed-guides/build-data-feeds-on-task-runner",title:"Build Data Feeds On Task Runner WIP",description:"Learn how to seamlessly build customizable Switchboard data feeds.",source:"@site/docs/201-solana/80-data-feed-guides/101-build-data-feeds-on-task-runner.mdx",sourceDirName:"201-solana/80-data-feed-guides",slug:"/solana/data-feed-guides/task-runner",permalink:"/solana/data-feed-guides/task-runner",draft:!1,tags:[],version:"current",sidebarPosition:101,frontMatter:{slug:"./task-runner",title:"Build Data Feeds On Task Runner WIP",description:"Learn how to seamlessly build customizable Switchboard data feeds."},sidebar:"sidebar",previous:{title:"Program Addresses",permalink:"/solana/program-addresses"},next:{title:"Read Data Feeds On-Chain REVIEW",permalink:"/solana/data-feed-guides/read-data-feeds"}},p={},h=[{value:"Quick Recap",id:"quick-recap",level:3},{value:"Identify Data &amp; Its Sources",id:"identify-data--its-sources",level:3},{value:"Building The Data Feed",id:"building-the-data-feed",level:3}],m={toc:h},f="wrapper";function k(e){let{components:t,...a}=e;return(0,r.kt)(f,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Switchboard provides a permissionless and customizable method for developers\nto create and manage their own data feeds. In order to fully utilize the Data\nFeed Program, please refer to the Data Feed Service page to understand the\narchitecture and what/how to utilize the Task Runner."),(0,r.kt)("h3",{id:"quick-recap"},"Quick Recap"),(0,r.kt)(s.Z,{header:"What is the Switchboard Task Runner?",mdxType:"CustomDetails"},(0,r.kt)("p",null,"Switchboard provides a ...")),(0,r.kt)(s.Z,{header:"What is an Aggregator, Job and Task?",mdxType:"CustomDetails"},(0,r.kt)("p",null,"Switchboard provides a ...")),(0,r.kt)(i.Z,{type:"tip",mdxType:"CustomAdmonition"},(0,r.kt)("p",null,"In order to build Data Feeds outside the constraints or sandbox of the\ntask runner, you can utilize Switchboard Functions to perform more dynamic\nexecutions such as VWAPs and bulk updates."),(0,r.kt)("p",null,"Read ",(0,r.kt)("a",{parentName:"p",href:"/"},"Build Data Feeds On Functions")," to find out more.")),(0,r.kt)("h3",{id:"identify-data--its-sources"},"Identify Data & Its Sources"),(0,r.kt)("p",null,"Since Switchboard allows you to set up your very own data feeds,\nyou'll need to provision your own data sources, be it on-chain, off-chain\n(public or private) data can be utilized."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Identify what is the data you want to be brought on-chain: price, weather, sports are all achievable"),(0,r.kt)("li",{parentName:"ol"},"Identify the data source, you refer to ",(0,r.kt)("a",{parentName:"li",href:"/"},"Frequently Used Data Sources"))),(0,r.kt)(i.Z,{type:"tip",mdxType:"CustomAdmonition"},(0,r.kt)("p",null,"Utilize price aggregation explorers such as CoinGecko, Birdeye or Solscan\nto identify the price sources supporting your market pair (for example,\nBinance or Jupiter)")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Once you've identified the data you need and the sources supporting it, now you can build the Data Feed in 3 methods: ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./task-runner?build-feed-method=drag-n-drop"},"Drag-n-drop")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./task-runner?build-feed-method=import-json-yaml"},"Importing JSON/YAML")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./task-runner?build-feed-method=cli"},"CLI"))),(0,r.kt)("h3",{id:"building-the-data-feed"},"Building The Data Feed"),(0,r.kt)(i.Z,{type:"tip",mdxType:"CustomAdmonition"},(0,r.kt)("p",null,"For other types of data feeds such as weather, sports or more, check out\nour blog for more walkthroughs???")),(0,r.kt)("p",null,"To simplify this example walkthrough, we'll be assuming the creation of a\nprice feed fetching the data of ",(0,r.kt)("inlineCode",{parentName:"p"},"SOL/USD")," market pair and the images below\nfrom CoinGecko and Solscan are the representations of the market data\nwhich can be utilized as price sources."),(0,r.kt)(o.Z,{queryString:"build-feed-method",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"drag-n-drop",label:"Drag-n-drop",default:!0,mdxType:"TabItem"},(0,r.kt)("div",null,(0,r.kt)("h3",null,"Method [1]: Drag-n-drop"),(0,r.kt)("ol",null,(0,r.kt)("li",null,"Navigate to the ",(0,r.kt)("a",{href:"https://app.switchboard.xyz/build/feed"},"Feed Builder")," in the Switchboard App"),(0,r.kt)("li",null,"Connect your wallet"),(0,r.kt)("li",null,"Select the designated chain and network"),(0,r.kt)("li",null,"Dependent on the type of price data source, the task types that you utilize will differ largely:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("strong",null,"Off-chain Data Sources:")," Typically, a market pair such as SOL/USD is supported on Centralized Exchanges (CEX) API endpoints. In order to fetch the data, you will need to use the HttpTask and JsonParseTask to firstly hit the endpoint then parse the specific field such as $.price."),(0,r.kt)("li",null,(0,r.kt)("strong",null,"On-chain Data Sources:")," You will need to use the LpExchangeRateTask and input the specific pair/pool address from the Decentralized Exchanges (DEX)."),(0,r.kt)("li",null,(0,r.kt)("strong",null,"On-chain Data Sources:")," Some data can be fetched directly from on-chain accounts and calculated more accurately compared to DeFi markets (prone to price manipulations). In such cases, we can utilize a combination of tasks such as SolanaAccountDataFetchTask, SplStakePoolTask, SplTokenParseTask, CacheTask, BufferLayoutParseTask."),(0,r.kt)("li",null,(0,r.kt)("strong",null,"More Cases:")," There are other situations where the market pair is inversed such as USD/SOL or SOL denominated in JitoSOL and by doing simple math, you can achieve your final desired results."),(0,r.kt)("li",null,(0,r.kt)("strong",null,"Other Methods & ",(0,r.kt)("a",{href:"./data-feed-best-practices"},"Best Practices"),":")," The responsibility of creating data feeds lies in the hands of the protocols, in order to fully utilize the Data Feed Program and Task Runner, there are other task types such as BoundTask, ConditionalTask and indicators such as TWAP, EWMA that can further improve data resilience."))))),(0,r.kt)(l.Z,{value:"import-json-yaml",label:"Importing JSON/YAML",mdxType:"TabItem"},(0,r.kt)("div",null,(0,r.kt)("h3",null,"Method [2]: Importing JSON/YAML"),(0,r.kt)("ol",null,(0,r.kt)("li",null,"Navigate to the ",(0,r.kt)("a",{href:"https://app.switchboard.xyz/build/feed"},"Feed Builder")," in the Switchboard App"),(0,r.kt)("li",null,"Connect your wallet"),(0,r.kt)("li",null,"Select the designated chain and network"),(0,r.kt)("li",null,"Instead of using the drag-n-drop tool, you can toggle to `Import` when adding a new job and write JSON or YAML code to build the job definition."))),(0,r.kt)("p",null,(0,r.kt)("strong",null,"Binance SOL/USDT:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"tasks:\n- httpTask:\n    url: https://www.binance.com/api/v3/ticker/price?symbol=SOLUSDT\n- jsonParseTask:\n    path: $.price\n")),(0,r.kt)("p",null,(0,r.kt)("strong",null,"Orca SOL/USDC:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"tasks:\n  - lpExchangeRateTask:\n      orcaPoolAddress: FpCMFDFGYotvufJ7HrFHsWEiiQCGbkLCtwHiDnh7o28Q\n")),(0,r.kt)("p",null,(0,r.kt)("strong",null,"On-chain JLP/USD:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"tasks:\n  - cacheTask:\n      cacheItems:\n        - variableName: supply\n          job:\n            tasks:\n              - splTokenParseTask:\n                  mintAddress: 27G8MtK7VtTcCHkpASjSDdkWWYfoqT6ggEuKidVJidD4\n              - jsonParseTask:\n                  path: $.supply\n        - variableName: aum_usd\n          job:\n            tasks:\n              - solanaAccountDataFetchTask:\n                  pubkey: 5BUwFW4nRbftYTDMbgxykoFWqWHPzahFSNAaaaJtVKsq\n              - bufferLayoutParseTask:\n                  offset: 180\n                  type: u128\n  - valueTask:\n      big: ${aum_usd}\n  - divideTask:\n      big: ${supply}\n"))),(0,r.kt)(l.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},"To do")))}k.isMDXComponent=!0}}]);