"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9917],{54852:(e,a,t)=>{t.d(a,{Zo:()=>i,kt:()=>m});var r=t(49231);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=r.createContext({}),u=function(e){var a=r.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):c(c({},a),e)),t},i=function(e){var a=u(e.components);return r.createElement(s.Provider,{value:a},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),g=u(t),p=n,m=g["".concat(s,".").concat(p)]||g[p]||d[p]||o;return t?r.createElement(m,c(c({ref:a},i),{},{components:t})):r.createElement(m,c({ref:a},i))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,c=new Array(o);c[0]=p;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[g]="string"==typeof e?e:n,c[1]=l;for(var u=2;u<o;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},12111:(e,a,t)=>{t.r(a),t.d(a,{contentTitle:()=>c,default:()=>i,frontMatter:()=>o,toc:()=>l});var r=t(95634),n=(t(49231),t(54852));const o={},c=void 0,l=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Load Switchboard Program",id:"load-switchboard-program",level:3},{value:"Create a Queue",id:"create-a-queue",level:3},{value:"Add an Oracle",id:"add-an-oracle",level:3},{value:"Create a Data Feed",id:"create-a-data-feed",level:3},{value:"Request a New Value",id:"request-a-new-value",level:3},{value:"Read a Data Feed",id:"read-a-data-feed",level:3},{value:"Add a History Buffer",id:"add-a-history-buffer",level:3},{value:"Watch Data Feed",id:"watch-data-feed",level:3}],s={toc:l},u="wrapper";function i(e){let{components:a,...t}=e;return(0,n.kt)(u,(0,r.Z)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("div",{align:"center"},(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://github.com/switchboard-xyz/sbv2-core/raw/main/website/static/img/icons/switchboard/avatar.png",alt:"Switchboard Logo"})),(0,n.kt)("h1",{id:"switchboard-xyzsolanajs"},"@switchboard-xyz/solana.js"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"A Typescript client to interact with Switchboard V2 on Solana.")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/sbv2-solana/actions/workflows/solana-js-test.yml"},(0,n.kt)("img",{parentName:"a",src:"https://github.com/switchboard-xyz/sbv2-solana/actions/workflows/solana-js-test.yml/badge.svg",alt:"Test Status"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/sbv2-solana/actions/workflows/anchor-test.yml"},(0,n.kt)("img",{parentName:"a",src:"https://github.com/switchboard-xyz/sbv2-solana/actions/workflows/anchor-test.yml/badge.svg",alt:"Anchor Test Status"}))),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@switchboard-xyz/solana.js"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/github/package-json/v/switchboard-xyz/sbv2-solana?color=red&filename=javascript%2Fsolana.js%2Fpackage.json&label=%40switchboard-xyz%2Fsolana.js&logo=npm",alt:"NPM Badge"})),"\n",(0,n.kt)("a",{parentName:"p",href:"https://docs.switchboard.xyz/api/solana.js"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/types-docs.switchboard.xyz-blue",alt:"Types Badge"})))),(0,n.kt)("h2",{id:"install"},"Install"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @switchboard-xyz/solana.js\n")),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Directory")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#load-switchboard-program"},"Load Switchboard Program")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-a-queue"},"Create a Queue")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#add-an-oracle"},"Add an Oracle")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-a-data-feed"},"Create a Data Feed")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#request-a-new-value"},"Request a New Value")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#read-a-data-feed"},"Read a Data Feed")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#add-a-history-buffer"},"Add a History Buffer")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#watch-data-feed"},"Watch Data Feed"))),(0,n.kt)("h3",{id:"load-switchboard-program"},"Load Switchboard Program"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { Connection } from '@solana/web3.js';\nimport {\n  SwitchboardProgram,\n  TransactionObject,\n} from '@switchboard-xyz/solana.js';\n\nconst program = await SwitchboardProgram.load(\n  'mainnet-beta',\n  new Connection('https://api.mainnet-beta.solana.com'),\n  payerKeypair /** Optional, READ-ONLY if not provided */\n);\n")),(0,n.kt)("h3",{id:"create-a-queue"},"Create a Queue"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { QueueAccount } from '@switchboard-xyz/solana.js';\n\nconst [queueAccount, txnSignature] = await QueueAccount.create(program, {\n  name: 'My Queue',\n  metadata: 'Top Secret',\n  queueSize: 100,\n  reward: 0.00001337,\n  minStake: 10,\n  oracleTimeout: 60,\n  slashingEnabled: false,\n  unpermissionedFeeds: true,\n  unpermissionedVrf: true,\n  enableBufferRelayers: false,\n});\nconst queue = await queueAccount.loadData();\n")),(0,n.kt)("h3",{id:"add-an-oracle"},"Add an Oracle"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { QueueAccount } from '@switchboard-xyz/solana.js';\n\nconst queueAccount = new QueueAccount(program, queuePubkey);\n\nconst [oracleAccount, oracleInitSignature] = await queueAccount.createOracle({\n  name: 'My Oracle',\n  metadata: 'Oracle #1',\n  stakeAmount: 10,\n});\nconst oracle = await oracleAccount.loadData();\n\nawait oracleAccount.heartbeat();\n")),(0,n.kt)("h3",{id:"create-a-data-feed"},"Create a Data Feed"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { QueueAccount } from '@switchboard-xyz/solana.js';\nimport { OracleJob } from '@switchboard-xyz/common';\n\nconst queueAccount = new QueueAccount(program, queuePubkey);\n\nconst [aggregatorAccount, aggregatorInitSignatures] =\n  await queueAccount.createFeed({\n    batchSize: 1,\n    minRequiredOracleResults: 1,\n    minRequiredJobResults: 1,\n    minUpdateDelaySeconds: 60,\n    fundAmount: 2.5, // deposit 2.5 wSOL into the leaseAccount escrow\n    jobs: [\n      { pubkey: jobAccount.publicKey },\n      {\n        weight: 2,\n        data: OracleJob.encodeDelimited(\n          OracleJob.fromObject({\n            tasks: [\n              {\n                valueTask: {\n                  value: 1,\n                },\n              },\n            ],\n          })\n        ).finish(),\n      },\n    ],\n  });\nconst aggregator = await aggregatorAccount.loadData();\n")),(0,n.kt)("h3",{id:"request-a-new-value"},"Request a New Value"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { AggregatorAccount } from '@switchboard-xyz/solana.js';\n\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorPubkey);\n\nawait aggregatorAccount.openRound();\n")),(0,n.kt)("h3",{id:"read-a-data-feed"},"Read a Data Feed"),(0,n.kt)("p",null,"After the oracles respond, read the feed result"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import Big from 'big.js';\nimport { AggregatorAccount } from '@switchboard-xyz/solana.js';\n\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorPubkey);\n\nconst result: Big | null = await aggregatorAccount.fetchLatestValue();\nif (result === null) {\n  throw new Error('Aggregator holds no value');\n}\nconsole.log(result.toString());\n")),(0,n.kt)("h3",{id:"add-a-history-buffer"},"Add a History Buffer"),(0,n.kt)("p",null,"Optionally, add a history buffer to your feed to store the last N historical samples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  AggregatorAccount,\n  AggregatorHistoryBuffer,\n} from '@switchboard-xyz/solana.js';\n\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorPubkey);\nconst aggregator = await aggregatorAccount.loadData();\n\nconst [historyBuffer, addHistorySignature] =\n  await AggregatorHistoryBuffer.create(program, {\n    aggregatorAccount,\n    maxSamples: 10000,\n  });\nconst history = await historyBuffer.loadData();\n")),(0,n.kt)("h3",{id:"watch-data-feed"},"Watch Data Feed"),(0,n.kt)("p",null,"Setup a websocket listener to invoke a callback whenever an aggregator is updated"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import Big from 'big.js';\nimport { AggregatorAccount } from '@switchboard-xyz/solana.js';\n\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorPubkey);\n\nconst ws = aggregatorAccount.onChange(aggregator => {\n  const result = AggregatorAccount.decodeLatestValue(aggregator);\n  if (result !== null) {\n    console.log(result.toString());\n  }\n});\n")))}i.isMDXComponent=!0}}]);