"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[38980],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=s(r),m=n,d=g["".concat(c,".").concat(m)]||g[m]||p[m]||o;return r?a.createElement(d,l(l({ref:t},u),{},{components:r})):a.createElement(d,l({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},60016:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=r(83117),n=(r(67294),r(3905));const o={title:"Set"},l=void 0,i={unversionedId:"cli/solana/aggregator/set",id:"cli/solana/aggregator/set",title:"Set",description:"set an aggregators config",source:"@site/docs/cli/solana/aggregator/set.md",sourceDirName:"cli/solana/aggregator",slug:"/cli/solana/aggregator/set",permalink:"/cli/solana/aggregator/set",draft:!1,tags:[],version:"current",frontMatter:{title:"Set"},sidebar:"cli",previous:{title:"Remove Job",permalink:"/cli/solana/aggregator/remove_job"},next:{title:"Transfer",permalink:"/cli/solana/aggregator/transfer"}},c={},s=[],u={toc:s};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"set an aggregators config"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana aggregator set [AGGREGATORKEY] [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>] [--name <value>]\n    [--metadata <value>] [--batchSize <value>] [--minJobs <value>] [--minOracles <value>] [--updateInterval <value>]\n    [--varianceThreshold <value>] [--forceReportPeriod <value>] [--basePriorityFee <value>] [--priorityFeeBump <value>]\n    [--priorityFeeBumpPeriod <value>] [--maxPriorityFeeMultiplier <value>]\n\nARGUMENTS\n  AGGREGATORKEY  public key of the aggregator account\n\nFLAGS\n  -a, --authority=<value>             alternate keypair that is the authority for the aggregator and required to make\n                                      config changes\n  -h, --help                          Show CLI help.\n  -k, --keypair=<value>               keypair that will pay for onchain transactions. defaults to new account authority\n                                      if no alternate authority provided\n  -s, --silent                        suppress cli prompts\n  -u, --rpcUrl=<value>                alternate RPC url\n  -v, --verbose                       log everything\n  --basePriorityFee=<value>\n  --batchSize=<value>                 number of oracles requested for each open round call\n  --cluster=<option>                  the solana cluster to connect to\n                                      <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>               [default: confirmed] transaction commitment level to use\n                                      <options: confirmed|finalized|processed>\n  --forceReportPeriod=<value>         Number of seconds for which, even if the variance threshold is not passed, accept\n                                      new responses from oracles.\n  --ledger                            enable ledger support\n  --ledgerPath=<value>                HID path to the ledger\n  --mainnetBeta                       WARNING: use mainnet-beta solana cluster\n  --maxPriorityFeeMultiplier=<value>\n  --metadata=<value>                  metadata of the aggregator\n  --minJobs=<value>                   number of jobs that must respond before an oracle responds\n  --minOracles=<value>                number of oracles that must respond before a value is accepted on-chain\n  --name=<value>                      name of the aggregator\n  --priorityFeeBump=<value>\n  --priorityFeeBumpPeriod=<value>\n  --programId=<value>                 alternative Switchboard program ID to interact with\n  --updateInterval=<value>            set an aggregator's minimum update delay\n  --varianceThreshold=<value>         percentage change between a previous accepted result and the next round before an\n                                      oracle reports a value on-chain. Used to conserve lease cost during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  set an aggregators config\n")))}p.isMDXComponent=!0}}]);