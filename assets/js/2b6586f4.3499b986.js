"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4178],{24024:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(95907),r=(n(49231),n(54852)),o=n(16299);const s="pub use solana_program::{\n    account_info::{next_account_info, AccountInfo},\n    clock::Clock,\n    entrypoint,\n    entrypoint::ProgramResult,\n    msg,\n    program_error::ProgramError,\n    pubkey::Pubkey,\n    sysvar::Sysvar,\n};\nuse std::convert::TryInto;\npub use switchboard_v2::{AggregatorAccountData, SWITCHBOARD_PROGRAM_ID};\n\nentrypoint!(process_instruction);\n\nfn process_instruction<'a>(\n    _program_id: &'a Pubkey,\n    accounts: &'a [AccountInfo<'a>],\n    _instruction_data: &'a [u8],\n) -> ProgramResult {\n    let accounts_iter = &mut accounts.iter();\n    let aggregator = next_account_info(accounts_iter)?;\n\n    let clock = Clock::get()?;\n\n    // check feed owner\n    let owner = *aggregator.owner;\n    if owner != SWITCHBOARD_PROGRAM_ID {\n        return Err(ProgramError::IncorrectProgramId);\n    }\n\n    // load and deserialize feed\n    let feed = AggregatorAccountData::new(aggregator)?;\n\n    // check if feed has updated in the last 5 minutes\n    let staleness = clock.unix_timestamp - feed.latest_confirmed_round.round_open_timestamp;\n    if staleness > 300 {\n        msg!(\"Feed has not been updated in {} seconds!\", staleness);\n        return Err(ProgramError::InvalidAccountData);\n    }\n\n    // get result\n    let val: f64 = feed.get_result()?.try_into()?;\n    msg!(\"Current feed result is {}!\", val);\n\n    Ok(())\n}\n",i={sidebar_position:2,title:"Native Rust: Read Feed On-Chain",description:"Learn how to read a feed using the native Rust runtime."},d=void 0,c={unversionedId:"solana/guides/feeds/rust",id:"solana/guides/feeds/rust",title:"Native Rust: Read Feed On-Chain",description:"Learn how to read a feed using the native Rust runtime.",source:"@site/docs/solana/guides/feeds/rust.mdx",sourceDirName:"solana/guides/feeds",slug:"/solana/guides/feeds/rust",permalink:"/solana/guides/feeds/rust",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Native Rust: Read Feed On-Chain",description:"Learn how to read a feed using the native Rust runtime."},sidebar:"solanaSidebar",previous:{title:"Data Feeds",permalink:"/solana/guides/feeds/"},next:{title:"Anchor: Read Feed On-Chain",permalink:"/solana/guides/feeds/anchor"}},l={},u=[{value:"1. Add switchboard-v2",id:"1-add-switchboard-v2",level:2},{value:"2. <code>read_result</code> Instruction",id:"2-read_result-instruction",level:2},{value:"3. Off-Chain: Read the result!",id:"3-off-chain-read-the-result",level:2}],g={toc:u},p="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide will walk you through how to read a Switchboard data feed using pure\nRust."),(0,r.kt)("p",null,"In order to read a Switchboard data feed, we will need to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add the switchboard-v2 dependency"),(0,r.kt)("li",{parentName:"ol"},"Create the ",(0,r.kt)("inlineCode",{parentName:"li"},"read_result")," instruction with the Switchboard data feed as the\nfirst account"),(0,r.kt)("li",{parentName:"ol"},"Submit a transaction on-chain with the ",(0,r.kt)("inlineCode",{parentName:"li"},"read_result")," instruction")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"View the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/sbv2-solana/tree/main/programs/native-feed-parser"},"native-feed-parser"),"\nexample on Github.")),(0,r.kt)("h2",{id:"1-add-switchboard-v2"},"1. Add switchboard-v2"),(0,r.kt)("p",null,"Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"switchboard-v2")," crate to your Cargo.toml file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nswitchboard-v2 = "0.1"\n')),(0,r.kt)("h2",{id:"2-read_result-instruction"},"2. ",(0,r.kt)("inlineCode",{parentName:"h2"},"read_result")," Instruction"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"First"),", we will get the aggregator AccountInfo from the accounts slice."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Next"),", verify the aggregator owner matches the ",(0,r.kt)("inlineCode",{parentName:"p"},"PROGRAM_ID")," in the\nswitchboard-v2 crate."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Then"),", deserialize the AccountInfo into the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/switchboard-v2/0.1.22/switchboard_v2/aggregator/struct.AggregatorAccountData.html"},"AggregatorAccountData (docs.rs)"),"\nstruct."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Then"),", verify the aggregator was updated in the last 300 seconds."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Finally"),", use the TryInto trait to convert the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/switchboard-v2/0.1.22/switchboard_v2/decimal/struct.SwitchboardDecimal.html"},"SwitchboardDecimal (docs.rs)"),"\ninto the ",(0,r.kt)("inlineCode",{parentName:"p"},"f64")," primitive because it's easier to work with."),(0,r.kt)(o.default,{language:"rust",mdxType:"CodeBlock"},s),(0,r.kt)("h2",{id:"3-off-chain-read-the-result"},"3. Off-Chain: Read the result!"),(0,r.kt)("p",null,"We will need to build a Solana transaction that contains our aggregator address\nto read."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@coral-xyz/anchor";\nimport {\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n} from "@solana/web3.js";\nimport { sleep } from "@switchboard-xyz/common";\nimport {\n  AggregatorAccount,\n  SwitchboardProgram,\n} from "@switchboard-xyz/solana.js";\nimport assert from "assert";\n\ndescribe("native-feed-parser test", () => {\n  const provider = anchor.AnchorProvider.env();\n  anchor.setProvider(provider);\n\n  let switchboard: SwitchboardProgram;\n  let aggregatorAccount: AggregatorAccount;\n\n  it("Read SOL/USD Feed", async () => {\n    const PROGRAM_ID = new PublicKey(""); // Your program ID\n\n    const readSwitchboardAggregatorTxn = new Transaction().add(\n      new TransactionInstruction({\n        keys: [\n          {\n            pubkey: aggregatorAccount.publicKey,\n            isSigner: false,\n            isWritable: false,\n          },\n        ],\n        programId: new PublicKey(PROGRAM_ID),\n        data: Buffer.from([]),\n      })\n    );\n\n    const signature = await provider.sendAndConfirm(\n      readSwitchboardAggregatorTxn\n    );\n\n    // wait for RPC\n    await sleep(2000);\n\n    const logs = await provider.connection.getParsedTransaction(\n      signature,\n      "confirmed"\n    );\n\n    console.log(JSON.stringify(logs?.meta?.logMessages, undefined, 2));\n    const match = JSON.stringify(logs?.meta?.logMessages ?? []).match(\n      new RegExp(/Current feed result is (?<feed_result>\\d+)/)\n    );\n    const feedResult = Number(match?.groups?.feed_result ?? null);\n    console.log(`Feed Result: ${feedResult}`);\n  });\n});\n')))}h.isMDXComponent=!0}}]);