"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7852],{54852:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var a=n(49231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),g=r,b=p["".concat(c,".").concat(g)]||p[g]||u[g]||s;return n?a.createElement(b,o(o({ref:t},d),{},{components:n})):a.createElement(b,o({ref:t},d))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},57702:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=n(95634),r=(n(49231),n(54852));const s={title:"@switchboard-xyz/aptos.js",slug:"/aptos/sdk/javascript/",hide_title:!0,sidebar_class_name:"sidebar__typescript",sidebar_position:2},o=void 0,i={unversionedId:"aptos/sdk/clients/aptos_js",id:"aptos/sdk/clients/aptos_js",title:"@switchboard-xyz/aptos.js",description:"Switchboard Logo",source:"@site/docs/aptos/sdk/clients/aptos_js.mdx",sourceDirName:"aptos/sdk/clients",slug:"/aptos/sdk/javascript/",permalink:"/aptos/sdk/javascript/",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"@switchboard-xyz/aptos.js",slug:"/aptos/sdk/javascript/",hide_title:!0,sidebar_class_name:"sidebar__typescript",sidebar_position:2},sidebar:"aptosSidebar",previous:{title:"switchboard",permalink:"/aptos/sdk/move/"},next:{title:"feed-parser",permalink:"/aptos/sdk/move/feed-parser"}},c={},l=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Reading Feeds",id:"reading-feeds",level:3},{value:"Creating Feeds",id:"creating-feeds",level:3},{value:"Listening to Updates",id:"listening-to-updates",level:3}],d={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{align:"center"},(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/switchboard-xyz/sbv2-core/raw/main/website/static/img/icons/switchboard/avatar.png",alt:"Switchboard Logo"})),(0,r.kt)("h1",{id:"switchboard-xyzaptosjs"},"@switchboard-xyz/aptos.js"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A Typescript client to interact with Switchboard on Aptos.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@switchboard-xyz/aptos.js"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/package-json/v/switchboard-xyz/sbv2-aptos?color=red&filename=javascript%2Faptos.js%2Fpackage.json&label=%40switchboard-xyz%2Faptos.js&logo=npm",alt:"NPM Badge"})))),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @switchboard-xyz/aptos.js\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Directory")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#reading-feeds"},"Reading Feeds")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#creating-feeds"},"Creating Feeds")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#listening-to-updates"},"Listening to Updates"))),(0,r.kt)("h3",{id:"reading-feeds"},"Reading Feeds"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { AggregatorAccount } from "@switchboard-xyz/aptos.js";\n\nconst aggregatorAccount: AggregatorAccount = new AggregatorAccount(\n  client,\n  aggregator_address,\n  SWITCHBOARD_ADDRESS\n);\n\nconsole.log(await aggregatorAccount.loadData());\n')),(0,r.kt)("h3",{id:"creating-feeds"},"Creating Feeds"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Buffer } from "buffer";\nimport { AptosClient, AptosAccount, FaucetClient, HexString } from "aptos";\nimport {\n  AptosEvent,\n  EventCallback,\n  OracleJob,\n  createFeed,\n} from "@switchboard-xyz/aptos.js";\nimport Big from "big.js";\n\nconst NODE_URL = "https://fullnode.devnet.aptoslabs.com/v1";\nconst FAUCET_URL = "https://faucet.devnet.aptoslabs.com";\n\nconst SWITCHBOARD_ADDRESS =\n  "0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77";\n\nconst SWITCHBOARD_QUEUE_ADDRESS =\n  "0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77";\n\nconst SWITCHBOARD_CRANK_ADDRESS =\n  "0x34e2eead0aefbc3d0af13c0522be94b002658f4bef8e0740a21086d22236ad77";\n\nconst client = new AptosClient(NODE_URL);\nconst faucetClient = new FaucetClient(NODE_URL, FAUCET_URL);\n\n// create new user\nlet user = new AptosAccount();\n\nawait faucetClient.fundAccount(user.address(), 50000);\nconsole.log(`User account ${user.address().hex()} created + funded.`);\n\n// Make Job data for btc price\nconst serializedJob = Buffer.from(\n  OracleJob.encodeDelimited(\n    OracleJob.create({\n      tasks: [\n        {\n          httpTask: {\n            url: "https://www.binance.us/api/v3/ticker/price?symbol=BTCUSD",\n          },\n        },\n        {\n          jsonParseTask: {\n            path: "$.price",\n          },\n        },\n      ],\n    })\n  ).finish()\n);\n\nconst [aggregator, createFeedTx] = await createFeed(\n  client,\n  user,\n  {\n    authority: user.address(),\n    queueAddress: SWITCHBOARD_QUEUE_ADDRESS, // account with OracleQueue resource\n    crankAddress: SWITCHBOARD_CRANK_ADDRESS, // account with Crank resource\n    batchSize: 1, // number of oracles to respond to each round\n    minJobResults: 1, // minimum # of jobs that need to return a result\n    minOracleResults: 1, // minumum # of oracles that need to respond for a result\n    minUpdateDelaySeconds: 5, // minimum delay between rounds\n    coinType: "0x1::aptos_coin::AptosCoin", // CoinType of the queue (now only AptosCoin)\n    initialLoadAmount: 1000, // load of the lease\n    jobs: [\n      {\n        name: "BTC/USD",\n        metadata: "binance",\n        authority: user.address().hex(),\n        data: serializedJob.toString("base64"), // jobs need to be base64 encoded strings\n        weight: 1,\n      },\n    ],\n  },\n  SWITCHBOARD_ADDRESS\n);\n\nconsole.log(\n  `Created Aggregator and Lease resources at account address ${aggregator.address}. Tx hash ${createFeedTx}`\n);\n\n// Manually trigger an update\nawait aggregator.openRound(user);\n')),(0,r.kt)("h3",{id:"listening-to-updates"},"Listening to Updates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Listen to Aggregator Updates Off-Chain\n */\n\n// create event listener\nconst onAggregatorUpdate = (\n  client: AptosClient,\n  callback: EventCallback,\n  pollIntervalMs: number = 1000\n): AptosEvent => {\n  return AggregatorAccount.watch(\n    client,\n    SWITCHBOARD_ADDRESS,\n    callback,\n    pollIntervalMs\n  );\n};\n\n// initialize event listener\nconst updatePoller = onAggregatorUpdate(client, async (e) => {\n  if (aggregator.address == e.data.aggregator_address) {\n    console.log(`NEW RESULT:`, e.data);\n  }\n});\n")))}u.isMDXComponent=!0}}]);