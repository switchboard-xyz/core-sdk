"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3582],{54852:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(49231);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=c(a),p=r,f=h["".concat(l,".").concat(p)]||h[p]||u[p]||o;return a?n.createElement(f,s(s({ref:t},d),{},{components:a})):n.createElement(f,s({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[h]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},24476:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(95634),r=(a(49231),a(54852));const o={title:"Switchboard V2 (pt.2)\u200a\u2014\u200aArchitecture and Data Flows",description:"",authors:["gallynaut"],tags:[],hide_table_of_contents:!0},s="Switchboard V2 (pt.2) \u2014 Architecture and Data Flows",i={permalink:"/blog/2021/10/12/Switchboard-V2-Architecture-and-Data-Flows",source:"@site/blog/2021/10-12-Switchboard-V2-Architecture-and-Data-Flows.mdx",title:"Switchboard V2 (pt.2)\u200a\u2014\u200aArchitecture and Data Flows",description:"",date:"2021-10-12T00:00:00.000Z",formattedDate:"October 12, 2021",tags:[],readingTime:5.89,hasTruncateMarker:!0,authors:[{name:"gallynaut",title:"Developer Relations",url:"https://twitter.com/gallynaut",imageURL:"https://pbs.twimg.com/profile_images/1649642820993679365/buRwDkVY_400x400.jpg",key:"gallynaut"}],frontMatter:{title:"Switchboard V2 (pt.2)\u200a\u2014\u200aArchitecture and Data Flows",description:"",authors:["gallynaut"],tags:[],hide_table_of_contents:!0},prevItem:{title:"Switchboard V2 (pt.3) \u2014 Incentives",permalink:"/blog/2021/11/03/Switchboard-V2-Incentives"},nextItem:{title:"Switchboard x GRAPE Network",permalink:"/blog/2021/10/04/Switchboard-x-GRAPE-Network"}},l={authorsImageUrls:[void 0]},c=[{value:"Overview",id:"overview",level:2},{value:"Execution",id:"execution",level:2}],d={toc:c},h="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(h,(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In a previous article we looked at the different stakeholders and how they\noperate within Switchboard V2. Today\u2019s article will focus on the technical\ncomponents and how they interact with each other. So let\u2019s jump right in."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"What is a Data Feed?"))),(0,r.kt)("p",null,"A data feed is the centerpiece of Switchboard and is what on-chain developers\nwill use when building smart contracts. A data feed is a collection of jobs that\nget aggregated to produce some deterministic result. Each job is associated with\nan endpoint and has a number of tasks that get executed in sequential order in\norder to produce a single value. Typically the first task in a job will fetch\nexternal data with subsequent tasks responsible for parsing the response and\ntransforming the value into a single data type, like an integer or decimal. When\nan oracle is assigned to process a data feed update, the oracle executes the\ndefined jobs and publishes the median result on-chain. The data feed then\ncomputes the final value as the median response among the assigned oracles. In\nsummary, the data feed is the blueprint for how data gets fetched from off-chain\nsources."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(63279).Z,width:"1652",height:"1024"})),(0,r.kt)("p",null,"Along with the jobs, a data feed also includes a configuration dictating how\noften a feed should be updated and the minimum number of jobs or oracles that\nmust respond before accepting a result. The publisher is ultimately responsible\nfor building a data feed and making the necessary trade-offs as it\u2019s a careful\nbalance between cost and update interval. The publisher is usually the on-chain\nconsumer of the data and will have the most familiarity with how the data may be\nused to make these considerations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Types of Data Feeds"))),(0,r.kt)("p",null,"Once a data feed has been configured, it needs to be assigned an oracle queue to\nprocess updates. Data feeds can be public, where they are approved by the DAO\nand have access to its oracle queue, or private, where the publisher has their\nown oracle infrastructure or agreements with oracle operators to process their\nupdates. A private feed has the added benefit of embedding API keys within a job\nfor any endpoints that require authentication, meaning a greater level of trust\nis needed between publishers and oracles. These keys will need to be created by\nindividual oracle operators or provided by the private feed creator. The rest of\nthis article will be focused on public feeds requiring DAO approval."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Lease Contract"))),(0,r.kt)("p",null,"Oracle queues have a finite amount of resources proportional to its number of\noracles so the DAO may reject new feeds that could cause delays on existing\nfeeds. The publisher is responsible for creating a lease contract to reserve a\nset amount of computer power from the oracle queue. Once a publisher\u2019s feed is\naccepted by the DAO, the feed is added to the network and granted permissions to\nuse the oracle queue resources."),(0,r.kt)("p",null,"Upon creating a lease contract, the publisher may specify a withdrawal authority\nand fund the lease contract to reward oracle operators for processing any future\nupdates. The withdrawal authority allows a publisher to cancel and refund their\nlease contract at any moment and specifies where any remaining lease balance is\nsent. The lease fee is derived from the oracle rewards dictated by each oracle\nqueue. This value can be increased over time to entice additional oracles to\njoin the queue or decreased to entice additional publishers to submit new feeds.\nIf a data feed\u2019s lease is low on funds, any update requests will fail and the\nfeed will be removed from any scheduled updates. As a feed gains popularity,\nother dApp developers will be incentivized to extend the lease and keep it\nactive. This creates a natural decay where unused feeds go unfunded to make room\nfor new use cases."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Oracle Queue"))),(0,r.kt)("p",null,"The Switchboard DAO governs how its oracle resources get allocated and rewarded.\nOracles are arranged in a round-robin fashion, where once requested, the next N\noracles in the queue are assigned to a feed and cycled to the bottom. Oracle\npositions are periodically swapped to mitigate oracles being assigned to the\nsame feeds each cycle. A single Oracle queue was architected to support over\n100,000 oracles, but given rent costs, the initial implementation will cap queue\nsizes at 2048 and increase it as the network grows."),(0,r.kt)("h2",{id:"execution"},"Execution"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"The Crank"))),(0,r.kt)("p",null,"Data feeds can also be configured so they are updated periodically or\non-command, depending on the feed\u2019s use cases. Solana has no mechanism to\nschedule periodic updates so a Crank is used to jump start the system. Any feed\napproved by the DAO is free to join the oracle queue\u2019s crank. The Crank is a\npriority queue of data feed public keys ordered by the feeds next available\nupdate time. When cranked, Switchboard will look for any data feeds ready for an\nupdate and if successful, reward the user who called it. If no data feed is\nready to be updated, the crankers transaction will fail and they could\npotentially lose their transaction fee. The crank is the scheduler behind the\noracles and incentivizes users to help keep the system spinning. Anyone can\ncompete to turn the crank but there can be only one!"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(85958).Z,width:"620",height:"409"})),(0,r.kt)("p",null,"When a data feed update is detected, the oracle queue moves the next N oracles\nto the back of the queue and passes the data feed public key to each oracle to\nbegin processing the update. Each oracle then reads the data feed configuration,\nexecutes each job, then publishes their results on-chain. Oracles are always on\nthe queue and can process multiple feed updates when requested."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Oracle Rewards"))),(0,r.kt)("p",null,"If enough oracles successfully respond, an on-chain program will aggregate the\nassigned oracle results and return the median value as the final result. Each\noracle is then scored based on their response. The variance threshold is\ndictated by the DAO on a per queue basis and is used when determining the\nvalidity of an oracle\u2019s response in relation to the accepted, median result.\nOracles within the acceptable range are awarded whatever fee is set by the DAO.\nOracles who\u2019s responses fall outside the acceptable range will be slashed and\nmust forfeit a set amount of their staked capital. The slashing mechanism\ndisincentivizes oracles from reporting dishonest data and helps protect the\nsystem from nodes who may have other incentives to return false data. A future\narticle will detail the various incentives to entice nodes to remain honest."),(0,r.kt)("p",null,"Each feed keeps track of the number of successful and failed responses. If a\nfeed has persistent failures, then the feed is removed from the oracle queue and\nthe publisher is refunded the remaining balance on the lease contract to the\nwithdrawal authority specified when creating the lease contract."),(0,r.kt)("p",null,"The diagram below depicts the system in action:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(15622).Z,width:"952",height:"904"})),(0,r.kt)("p",null,"Switchboard V2 gives more ways for you to join the network, whether that\u2019s\noperating a node, publishing feeds, or cranking the system. We are excited to\nroll out the next version of our community curated oracles and can\u2019t wait to see\nwhat the community builds with it!"))}u.isMDXComponent=!0},63279:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2021-10-12-Switchboard-V2-Architecture-and-Data-Flows_FeedComposition-7e5049ec91c3b3eca31427777fe32560.jpg"},15622:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2021-10-12-Switchboard-V2-Architecture-and-Data-Flows_FeedLifecycle-62c773cda9755daaeb2dda34b488a144.png"},85958:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2021-10-12-Switchboard-V2-Architecture-and-Data-Flows_Highlander-1073809360f15d81fd02bcbc9a29ba96.jpg"}}]);