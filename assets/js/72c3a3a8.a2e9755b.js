"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36773],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>v});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var u=r.createContext({}),c=function(e){var t=r.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(a),v=n,m=d["".concat(u,".").concat(v)]||d[v]||p[v]||o;return a?r.createElement(m,l(l({ref:t},s),{},{components:a})):r.createElement(m,l({ref:t},s))}));function v(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5956:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=a(83117),n=(a(67294),a(3905));const o={title:"Create"},l=void 0,i={unversionedId:"dev/cli/solana/aggregator/create",id:"dev/cli/solana/aggregator/create",title:"Create",description:"create an aggregator account",source:"@site/docs/dev/cli/solana/aggregator/create.md",sourceDirName:"dev/cli/solana/aggregator",slug:"/dev/cli/solana/aggregator/create",permalink:"/dev/cli/solana/aggregator/create",draft:!1,tags:[],version:"current",frontMatter:{title:"Create"}},u={},c=[],s={toc:c};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"create an aggregator account"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-asciidoc"},"USAGE\n  $ sbv2 solana aggregator create [QUEUEKEY] --updateInterval <value> [-h] [-v] [-s] [--mainnetBeta | --cluster\n    devnet|mainnet-beta|mainnet|localnet] [-u <value>] [--programId <value>] [--commitment\n    confirmed|finalized|processed] [-k <value>] [--ledgerPath <value> --ledger] [--json] [-a <value>]\n    [--aggregatorKeypair <value>] [--name <value>] [--metadata <value>] [--batchSize <value>] [--minJobs <value>]\n    [--minOracles <value>] [--forceReportPeriod <value>] [--varianceThreshold <value>] [--historyLimit <value>]\n    [--crankKey <value> | --disableCrank] [--queueAuthority <value>] [--enable] [--leaseAmount <value>] [-j <value>]\n    [--jobKey <value>] [--slidingWindow] [--basePriorityFee <value>] [--priorityFeeBump <value>]\n    [--priorityFeeBumpPeriod <value>] [--maxPriorityFeeMultiplier <value>]\n\nARGUMENTS\n  QUEUEKEY  public key of the oracle queue to create an aggregator on\n\nFLAGS\n  -a, --authority=<value>             alternate keypair that is the authority for the aggregator\n  -h, --help                          Show CLI help.\n  -j, --job=<value>...                filesystem path to job definition file\n  -k, --keypair=<value>               keypair that will pay for onchain transactions. defaults to new account authority\n                                      if no alternate authority provided\n  -s, --silent                        suppress cli prompts\n  -u, --rpcUrl=<value>                alternate RPC url\n  -v, --verbose                       log everything\n  --aggregatorKeypair=<value>         keypair to use for aggregator account. This will be the account's publicKey\n  --basePriorityFee=<value>\n  --batchSize=<value>                 [default: 1] number of oracles requested for each open round call\n  --cluster=<option>                  the solana cluster to connect to\n                                      <options: devnet|mainnet-beta|mainnet|localnet>\n  --commitment=<option>               [default: confirmed] transaction commitment level to use\n                                      <options: confirmed|finalized|processed>\n  --crankKey=<value>                  public key of the crank to join\n  --disableCrank                      whether the newly created feed can be pushed onto a crank. irreversible\n  --enable                            set permissions to PERMIT_ORACLE_QUEUE_USAGE\n  --forceReportPeriod=<value>         Number of seconds for which, even if the variance threshold is not passed, accept\n                                      new responses from oracles.\n  --historyLimit=<value>              number of historical samples to store\n  --jobKey=<value>...                 public key of existing job account\n  --leaseAmount=<value>               [default: 0] amount of funds to deposit into the lease, ex: 1.5 would deposit 1.5\n                                      wSOL\n  --ledger                            enable ledger support\n  --ledgerPath=<value>                HID path to the ledger\n  --mainnetBeta                       WARNING: use mainnet-beta solana cluster\n  --maxPriorityFeeMultiplier=<value>\n  --metadata=<value>                  metadata of the aggregator\n  --minJobs=<value>                   [default: 1] number of jobs that must respond before an oracle responds\n  --minOracles=<value>                [default: 1] number of oracles that must respond before a value is accepted\n                                      on-chain\n  --name=<value>                      name of the aggregator\n  --priorityFeeBump=<value>\n  --priorityFeeBumpPeriod=<value>\n  --programId=<value>                 alternative Switchboard program ID to interact with\n  --queueAuthority=<value>            alternative keypair to use for queue authority\n  --slidingWindow                     enable sliding window resolution mode\n  --updateInterval=<value>            (required) set an aggregator's minimum update delay\n  --varianceThreshold=<value>         [default: 0] percentage change between a previous accepted result and the next\n                                      round before an oracle reports a value on-chain. Used to conserve lease cost\n                                      during low volatility\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  create an aggregator account\n")))}p.isMDXComponent=!0}}]);