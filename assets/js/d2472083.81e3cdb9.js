"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7844],{54852:(t,e,n)=>{n.d(e,{Zo:()=>k,kt:()=>b});var l=n(49231);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,l,r=function(t,e){if(null==t)return{};var n,l,r={},a=Object.keys(t);for(l=0;l<a.length;l++)n=a[l],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(l=0;l<a.length;l++)n=a[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var u=l.createContext({}),s=function(t){var e=l.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},k=function(t){var e=s(t.components);return l.createElement(u.Provider,{value:e},t.children)},c="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},p=l.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,u=t.parentName,k=i(t,["components","mdxType","originalType","parentName"]),c=s(n),p=r,b=c["".concat(u,".").concat(p)]||c[p]||d[p]||a;return n?l.createElement(b,o(o({ref:e},k),{},{components:n})):l.createElement(b,o({ref:e},k))}));function b(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,o=new Array(a);o[0]=p;var i={};for(var u in e)hasOwnProperty.call(e,u)&&(i[u]=e[u]);i.originalType=t,i[c]="string"==typeof t?t:r,o[1]=i;for(var s=2;s<a;s++)o[s]=n[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},98934:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var l=n(95634),r=(n(49231),n(54852));const a={},o="NodeJS Oracle",i={unversionedId:"infra/nodejs-oracle",id:"infra/nodejs-oracle",title:"NodeJS Oracle",description:"A NodeJS container that facilitates on-chain update requests from an oracle's",source:"@site/docs/301-infra/02-nodejs-oracle.mdx",sourceDirName:"301-infra",slug:"/infra/nodejs-oracle",permalink:"/infra/nodejs-oracle",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"sidebar",previous:{title:"Overview",permalink:"/infra/"},next:{title:"Function Manager",permalink:"/infra/function-manager"}},u={},s=[{value:"Image",id:"image",level:2},{value:"Keypair",id:"keypair",level:2},{value:"Environment",id:"environment",level:2},{value:"Base Environment Variables",id:"base-environment-variables",level:3},{value:"Keypair Environment Variables",id:"keypair-environment-variables",level:3},{value:"Monitoring Environment Variables",id:"monitoring-environment-variables",level:3}],k={toc:s},c="wrapper";function d(t){let{components:e,...n}=t;return(0,r.kt)(c,(0,l.Z)({},k,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nodejs-oracle"},"NodeJS Oracle"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A NodeJS container that facilitates on-chain update requests from an oracle's\nassigned queue.")),(0,r.kt)("p",null,"A Switchboard oracle is a Node.js container that sits between a blockchain and\nthe internet and waits for update requests from an oracle queue. An oracle queue\nassigns updates to oracles in a round robin fashion."),(0,r.kt)("p",null,"Switchboard oracles on all supported chains MUST have a mainnet Solana RPC in\norder to run the task runner. This is used to support legacy task types for\nfetching on-chain Solana data."),(0,r.kt)("h2",{id:"image"},"Image"),(0,r.kt)("p",null,"This image is still in active development and not all release tags are\nguaranteed to work. You can view the current\n",(0,r.kt)("a",{parentName:"p",href:"https://switchboard.xyz/network"},"Switchboard network stats")," to get an idea of\nthe latest version."),(0,r.kt)("p",null,"Stable tags will be provided soon."),(0,r.kt)("h2",{id:"keypair"},"Keypair"),(0,r.kt)("p",null,"A Switchboard oracle requires a keypair in order to pay for on-chain updates.\nYou may mount the secret at ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/node/sbv2-oracle/payer_secrets.json")," or\nprovide your own path by updating the env variable ",(0,r.kt)("inlineCode",{parentName:"p"},"$FS_PAYER_SECRET_PATH"),". You\ncan also provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"PAYER_SECRETS")," docker secret. Google and Amazon secrets\nare also supported."),(0,r.kt)("h2",{id:"environment"},"Environment"),(0,r.kt)("h3",{id:"base-environment-variables"},"Base Environment Variables"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Env Variable"),(0,r.kt)("th",null,"Definition"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"CHAIN"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Required"),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - Enum [aptos / evm / near / solana / starknet / sui]",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Dictates which chain to listen on for on-chain events")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"ORACLE_KEY"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Required"),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - String",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - The address of the Switchboard oracle")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"HEARTBEAT_INTERVAL"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Integer",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - 30",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Seconds between oracle heartbeats. Queues have different oracle heartbeat requirements. Recommended value is 30")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"RPC_URL"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Required"),(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - String",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - The URL of the RPC server to connect to for any on-chain network requests.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"NETWORK_ID"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Enum [mainnet / mainnet-beta / devnet / testnet / localnet]",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - The network ID of the $CHAIN to connect to. Not required for most CHAINS.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"PROGRAM_ID"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - String",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - The Switchboard program ID for the given $CHAIN and $NETWORK_ID")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"TASK_RUNNER_SOLANA_RPC"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Required"),", if $CHAIN is not solana and $NETWORK_ID is not mainnet-beta",(0,r.kt)("br",null),(0,r.kt)("b",null,"Type")," - String",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Solana mainnet RPC URL used for fulfilling task types that require data on Solana.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"VERBOSE"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Boolean",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - disabled",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Enable additional logging.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"DEBUG"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Boolean",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - disabled",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Enable additional debug logging.")))),(0,r.kt)("h3",{id:"keypair-environment-variables"},"Keypair Environment Variables"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Env Variable"),(0,r.kt)("th",null,"Definition"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"FS_PAYER_SECRET_PATH"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Filesystem Path",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - /home/node/sbv2-oracle/payer_secrets.json",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Local filesystem path to keypair file that will pay for on-chain transactions and is the authority for the oracle")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"PAYER_SECRETS or DOCKER_PAYER_SECRET"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Docker Secret",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Docker Secret path to keypair file that will pay for on-chain transactions and is the authority for the oracle")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"GOOGLE_PAYER_SECRET_PATH"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - GCP Resource Path",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Google cloud resource to manage your keypair securely.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"AMAZON_PAYER_SECRET_PATH"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - AWS ARN path",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - Amazon web services ARN path of secret.")))),(0,r.kt)("h3",{id:"monitoring-environment-variables"},"Monitoring Environment Variables"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Env Variable"),(0,r.kt)("th",null,"Definition"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"PAGERDUTY_EVENT_KEY"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - String",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - PagerDuty event key to send alerts. Paging disabled if not provided.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"HEALTH_CHECK_PORT"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Integer",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - 8080",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - The network port to serve healthcheck requests. The docker healthcheck will ping /healthz periodically to determine a containers health status.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"METRICS_EXPORTER"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Enum [prometheus / opentelemetry-collector]",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - prometheus",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - The OpenTelemetry metrics provider.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"METRICS_EXPORTER_PORT"),(0,r.kt)("td",null,(0,r.kt)("b",null,"Type")," - Integer",(0,r.kt)("br",null),(0,r.kt)("b",null,"Default")," - 9090",(0,r.kt)("br",null),(0,r.kt)("b",null,"Description")," - The network port to collect metrics.")))))}d.isMDXComponent=!0}}]);