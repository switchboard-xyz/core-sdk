"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8394],{54852:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(49231);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(a),h=r,m=d["".concat(i,".").concat(h)]||d[h]||p[h]||o;return a?n.createElement(m,s(s({ref:t},u),{},{components:a})):n.createElement(m,s({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[d]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},4225:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(49231),r=a(19841);const o={tabItem:"tabItem_Hnis"};function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:a},t)}},15078:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(432),r=a(49231),o=a(19841),s=a(18665),l=a(88777),i=a(67095);const c={tabList:"tabList_IpD_",tabItem:"tabItem_lwlC"};function u(e){let{className:t,block:a,selectedValue:l,selectValue:i,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),h=e=>{const t=e.currentTarget,a=d.indexOf(t),n=u[a].value;n!==l&&(p(t),i(n))},m=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:h},s,{className:(0,o.Z)("tabs__item",c.tabItem,s?.className,{"tabs__item--active":l===t})}),a??t)})))}function d(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function p(e){const t=(0,l.Y)(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",c.tabList)},r.createElement(u,(0,n.Z)({},e,t)),r.createElement(d,(0,n.Z)({},e,t)))}function h(e){const t=(0,i.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},88777:(e,t,a)=>{a.d(t,{Y:()=>p});var n=a(49231),r=a(19409),o=a(62002),s=a(17242),l=a(75601);function i(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function c(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??i(a);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function u(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const s=(0,r.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o._X)(l),(0,n.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(s.location.search);t.set(l,e),s.replace({...s.location,search:t.toString()})}),[l,s])]}function p(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,o=c(e),[s,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[p,h]=d({queryString:a,groupId:r}),[m,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,l.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:r}),f=(()=>{const e=p??m;return u({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),h(e),g(e)}),[h,g,o]),tabValues:o}}},71176:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(49231);const r=e=>{let{type:t,header:a,children:r}=e;const o=a||t.toUpperCase();return n.createElement("div",{className:`custom-admonition ${t}`},o&&n.createElement("div",{className:"custom-admonition-header"},o),n.createElement("div",{className:"custom-admonition-content"},r))}},54199:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(55013),r=a(56774),o=a(51102),s=a(49231);const l=e=>{const{colorMode:t}=(0,n.I)(),a=(0,r.Z)("dark"===t&&e.darkImg?e.darkImg:e.img);let l="inherit";e.lightBg&&"dark"!==t&&(l=e.lightBg),e.darkBg&&"dark"===t&&(l=e.darkBg);let i={};return e.sx&&(i={backgroundColor:l,m:"auto",display:"flex",...i,...e.sx}),s.createElement(o.Z,{component:"img",sx:i,src:a})}},96976:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var n=a(432),r=(a(49231),a(54852)),o=(a(54199),a(60054),a(18150),a(15078),a(4225),a(71176));const s={slug:"./read-data-feeds",title:"Read Data Feeds On-Chain REVIEW",description:"Learn how to read Switchboard data feeds on-chain using Rust or Anchor."},l=void 0,i={unversionedId:"solana/data-feed-guides/read-data-feeds-on-chain",id:"solana/data-feed-guides/read-data-feeds-on-chain",title:"Read Data Feeds On-Chain REVIEW",description:"Learn how to read Switchboard data feeds on-chain using Rust or Anchor.",source:"@site/docs/201-solana/80-data-feed-guides/102-read-data-feeds-on-chain.mdx",sourceDirName:"201-solana/80-data-feed-guides",slug:"/solana/data-feed-guides/read-data-feeds",permalink:"/solana/data-feed-guides/read-data-feeds",draft:!1,tags:[],version:"current",sidebarPosition:102,frontMatter:{slug:"./read-data-feeds",title:"Read Data Feeds On-Chain REVIEW",description:"Learn how to read Switchboard data feeds on-chain using Rust or Anchor."},sidebar:"sidebar",previous:{title:"Build Data Feeds On Task Runner WIP",permalink:"/solana/data-feed-guides/task-runner"},next:{title:"Data Feed Best Practices REVIEW",permalink:"/solana/data-feed-guides/data-feed-best-practices"}},c={},u=[{value:"Overview",id:"overview",level:3},{value:"1. Add switchboard-solana",id:"1-add-switchboard-solana",level:3},{value:"2. <code>ReadResult</code> Context",id:"2-readresult-context",level:3},{value:"3. <code>read_result</code> Instruction",id:"3-read_result-instruction",level:3},{value:"4. Off-Chain: Read the result!",id:"4-off-chain-read-the-result",level:3}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide will walkthrough how to read a Switchboard Data Feed (built on\nthe Data Feed Program)!"),(0,r.kt)(o.Z,{type:"caution",mdxType:"CustomAdmonition"},(0,r.kt)("p",null,"We suggest that you ",(0,r.kt)("strong",{parentName:"p"},"create and manage your own data feeds")," instead of relying\non existing ones that do not belong to you (as the authority can adjust the\nconfigurations and job definitions at any given time). Hence, before you\ncontinue on with this guide, please create your own data feed for production\npurposes.")),(0,r.kt)("h3",{id:"overview"},"Overview"),(0,r.kt)("p",null,"In order to read a Switchboard data feed using Anchor, we will need to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add the ",(0,r.kt)("inlineCode",{parentName:"li"},"switchboard-solana")," dependency"),(0,r.kt)("li",{parentName:"ol"},"Create the ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadResult")," Accounts context containing the data feed"),(0,r.kt)("li",{parentName:"ol"},"Create the ",(0,r.kt)("inlineCode",{parentName:"li"},"read_result")," instruction with the ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadResult")," Accounts context"),(0,r.kt)("li",{parentName:"ol"},"Submit a transaction on-chain with the ",(0,r.kt)("inlineCode",{parentName:"li"},"read_result")," instruction")),(0,r.kt)(o.Z,{type:"tip",mdxType:"CustomAdmonition"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Anchor:")," View the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/solana-sdk/tree/main/examples/feeds/01_feed_client"},"01_feed_client"),"\nexample on Github."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Not using Anchor:")," View the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/solana-sdk/tree/main/examples/feeds/02_spl_native"},"02_spl_native"),"\nexample on Github.")),(0,r.kt)("h3",{id:"1-add-switchboard-solana"},"1. Add switchboard-solana"),(0,r.kt)("p",null,"Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"switchboard-solana")," crate to your Cargo.toml file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nswitchboard-solana = "0.9"\n')),(0,r.kt)("h3",{id:"2-readresult-context"},"2. ",(0,r.kt)("inlineCode",{parentName:"h3"},"ReadResult")," Context"),(0,r.kt)("p",null,"Anchor provides the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/anchor-lang/latest/anchor_lang/accounts/account_loader/struct.AccountLoader.html"},"anchor-lang AccountLoader"),"\ntrait to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"verify the account has the correct discriminator (all AggregatorAccounts share\nthe same first 8 bytes)"),(0,r.kt)("li",{parentName:"ul"},"the account is owned by the program ID defined in the switchboard-solana crate")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadResult")," Accounts context would look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::prelude::*;\nuse switchboard_solana::{AggregatorAccountData};\n\n#[derive(Accounts)]\npub struct ReadResult<'info> {\n    pub switchboard_aggregator: AccountLoader<'info, AggregatorAccountData>,\n}\n")),(0,r.kt)(o.Z,{type:"note",mdxType:"CustomAdmonition"},(0,r.kt)("p",null,"You should store the aggregator's pubkey somewhere in your program state and\nverify the expected aggregator was passed into your instruction."),(0,r.kt)("p",null,"If you are building a DeFi market you may have a MyMarket account type storing\nthe SOL/USD Switchboard feed address in the field ",(0,r.kt)("inlineCode",{parentName:"p"},"switchboard_aggregator"),". You\ncan then verify this pubkey in the Accounts context like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::prelude::*;\nuse switchboard_solana::{AggregatorAccountData};\n\n#[account(zero_copy)]\npub struct MyMarket {\n    pub bump: u8,\n    pub switchboard_aggregator: Pubkey,\n}\n\n#[derive(Accounts)]\npub struct ReadResult<'info> {\n    #[account(\n        has_one = switchboard_aggregator\n    )]\n    pub market: AccountLoader<'info, MyMarket>,\n    pub switchboard_aggregator: AccountLoader<'info, AggregatorAccountData>,\n}\n"))),(0,r.kt)("h3",{id:"3-read_result-instruction"},"3. ",(0,r.kt)("inlineCode",{parentName:"h3"},"read_result")," Instruction"),(0,r.kt)("p",null,"Now lets add a ",(0,r.kt)("inlineCode",{parentName:"p"},"read_result")," instruction to our program and pass in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"ReadResult")," context."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deserialize the account data into the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/switchboard-solana/latest/switchboard_solana/oracle_program/accounts/aggregator/struct.AggregatorAccountData.html"},"AggregatorAccountData (docs.rs)"),"\nstruct.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Use the TryInto trait to convert the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/switchboard-solana/latest/switchboard_solana/decimal/struct.SwitchboardDecimal.html"},"SwitchboardDecimal (docs.rs)"),"\ninto the ",(0,r.kt)("inlineCode",{parentName:"p"},"f64")," primitive because it's easier to work with."))),(0,r.kt)(o.Z,{type:"note",mdxType:"CustomAdmonition"},(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SwitchboardDecimal")," struct is a basic wrapper around the\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/rust_decimal/1.29.1/rust_decimal/"},"rust-decimal (docs.rs)"),"\nimplementation.")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Verify the feed was updated in the last 300 seconds so we aren't consuming a stale value.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use anchor_lang::prelude::*;\nuse anchor_lang::solana_program::clock;\n\nuse std::convert::TryInto;\n\n#[program]\npub mod anchor_feed_parser {\n    use super::*;\n\n    pub fn read_result(\n        ctx: Context<ReadResult>\n    ) -> anchor_lang::Result<()> {\n        let feed = &ctx.accounts.switchboard_aggregator.load()?;\n\n        // get result\n        let val: f64 = feed.get_result()?.try_into()?;\n\n        // check whether the feed has been updated in the last 300 seconds\n        feed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)\n            .map_err(|_| error!(FeedErrorCode::StaleFeed))?;\n\n        msg!("Current feed result is {}!", val);\n\n        // Your custom logic here\n\n        Ok(())\n    }\n}\n\n#[error_code]\n#[derive(Eq, PartialEq)]\npub enum FeedErrorCode {\n    #[msg("Switchboard feed has not been updated in 5 minutes")]\n    StaleFeed,\n}\n')),(0,r.kt)("h3",{id:"4-off-chain-read-the-result"},"4. Off-Chain: Read the result!"),(0,r.kt)("p",null,"We will need to build a Solana transaction that contains our aggregator address\nto read."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@coral-xyz/anchor";\nimport { sleep } from "@switchboard-xyz/common";\nimport {\n  AggregatorAccount,\n  SwitchboardProgram,\n} from "@switchboard-xyz/solana.js";\nimport assert from "assert";\nimport { AnchorFeedParser } from "../target/types/anchor_feed_parser";\n\ndescribe("anchor-feed-parser test", () => {\n  const provider = anchor.AnchorProvider.env();\n  anchor.setProvider(provider);\n\n  const feedParserProgram: anchor.Program<AnchorFeedParser> =\n    anchor.workspace.AnchorFeedParser;\n\n  let switchboard: SwitchboardProgram;\n  let aggregatorAccount: AggregatorAccount;\n\n  it("Reads a Switchboard data feed", async () => {\n    const signature = await feedParserProgram.methods\n      .readResult()\n      .accounts({ switchboardAggregator: aggregatorAccount.publicKey })\n      .rpc();\n\n    // wait for RPC\n    await sleep(2000);\n\n    const logs = await provider.connection.getParsedTransaction(\n      signature,\n      "confirmed"\n    );\n\n    console.log(JSON.stringify(logs?.meta?.logMessages, undefined, 2));\n\n    const match = JSON.stringify(logs?.meta?.logMessages ?? []).match(\n      new RegExp(/Current feed result is (?<feed_result>\\d+)/)\n    );\n    const feedResult = Number(match?.groups?.feed_result ?? null);\n    console.log(`Feed Result: ${feedResult}`);\n  });\n});\n')))}h.isMDXComponent=!0}}]);