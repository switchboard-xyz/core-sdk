"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1984],{70651:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(49231),o=a(19841);const r={tabItem:"tabItem_cjqz"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,l),hidden:a},t)}},54405:(e,t,a)=>{a.d(t,{Z:()=>b});var n=a(95634),o=a(49231),r=a(19841),l=a(93682),s=a(17096),i=a(80852);const c={tabList:"tabList_URvL",tabItem:"tabItem_e5E2"};function u(e){let{className:t,block:a,selectedValue:s,selectValue:i,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:m}=(0,l.o5)(),b=e=>{const t=e.currentTarget,a=d.indexOf(t),n=u[a].value;n!==s&&(m(t),i(n))},p=e=>{let t=null;switch(e.key){case"Enter":b(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:l}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>d.push(e),onKeyDown:p,onClick:b},l,{className:(0,r.Z)("tabs__item",c.tabItem,l?.className,{"tabs__item--active":s===t})}),a??t)})))}function d(e){let{lazy:t,children:a,selectedValue:n}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===n));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function m(e){const t=(0,s.Y)(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",c.tabList)},o.createElement(u,(0,n.Z)({},e,t)),o.createElement(d,(0,n.Z)({},e,t)))}function b(e){const t=(0,i.Z)();return o.createElement(m,(0,n.Z)({key:String(t)},e))}},17096:(e,t,a)=>{a.d(t,{Y:()=>m});var n=a(49231),o=a(19409),r=a(18948),l=a(79862),s=a(42150);function i(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:o}}=e;return{value:t,label:a,attributes:n,default:o}}))}function c(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??i(a);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function u(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const l=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,r._X)(s),(0,n.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(l.location.search);t.set(s,e),l.replace({...l.location,search:t.toString()})}),[s,l])]}function m(e){const{defaultValue:t,queryString:a=!1,groupId:o}=e,r=c(e),[l,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[m,b]=d({queryString:a,groupId:o}),[p,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,s.Nk)(a);return[o,(0,n.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:o}),g=(()=>{const e=m??p;return u({value:e,tabValues:r})?e:null})();(0,n.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),b(e),h(e)}),[b,h,r]),tabValues:r}}},49798:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(68885),o=a(63536),r=a(73315),l=a(15811),s=a(40862),i=a(92994),c=a(49231);const u=(0,r.ZP)(l.Z)((e=>{let{theme:t}=e;return{width:48,height:48,marginBottom:"8px",backgroundColor:"white",boxShadow:"0px 1px 3px 0px rgba(33, 27, 78, 0.15)",[t.breakpoints.down("md")]:{width:32,height:32},"& .MuiAvatar-img":{width:24,height:24,[t.breakpoints.down("md")]:{width:16,height:16}}}}));function d(e){const{colorMode:t}=(0,o.I)(),{title:a,to:r,image:l}=e;let d={p:2};return e.sx&&(d={...d,...e.sx}),r?c.createElement(s.Z,{key:a+"AvatarIcon",display:"flex",flexDirection:"column",alignItems:"center",component:n.default,href:r,style:{textDecoration:"none"},sx:d},c.createElement(u,{src:l}),a?c.createElement(i.Z,{align:"center",sx:{fontFamily:"Source Sans Pro",fontSize:16,fontWeight:600,color:"dark"===t?"white":"#172B4D"}},a):c.createElement(c.Fragment,null)):c.createElement(s.Z,{key:a+"AvatarIcon",display:"flex",flexDirection:"column",alignItems:"center",style:{textDecoration:"none"},sx:d},c.createElement(u,{src:l}),a?c.createElement(i.Z,{align:"center",sx:{fontFamily:"Source Sans Pro",fontSize:16,fontWeight:600,color:"dark"===t?"white":"#172B4D"}},a):c.createElement(c.Fragment,null))}},4765:(e,t,a)=>{a.d(t,{Z:()=>g});var n=a(68885),o=a(63536),r=a(4262),l=a(49250),s=a(50853),i=a(12416),c=a(92994),u=a(73315),d=a(41002),m=a(51766),b=a(49231),p=a(49798),h=a(29479);function g(e){const{colorMode:t}=(0,o.I)(),{sdk:a}=e,u=h.M.get(a);return b.createElement(b.Fragment,null,b.createElement(f,{dark:Number("dark"===t)},b.createElement(s.ZP,{container:!0,spacing:1,justifyContent:"flex-start",alignItems:"center"},b.createElement(s.ZP,{item:!0},b.createElement(p.Z,{sx:{p:1},title:"",image:u.icon.light})),b.createElement(s.ZP,{itemScope:!0},b.createElement("h3",{className:"landing_page",style:{padding:"10px"}},(0,d.S)(a)+" SDK")),b.createElement(s.ZP,{container:!0,item:!0,flex:2},b.createElement(n.default,{to:u.sdk.js.link,style:{marginLeft:"auto"}},b.createElement(i.Z,{sx:{color:"#4C6FFF"}},b.createElement(l.Z,{fontSize:"large"}))),b.createElement(n.default,{to:u.git,style:{marginLeft:"0px"}},b.createElement(i.Z,{sx:{color:"#4C6FFF"}},b.createElement(r.Z,{fontSize:"large"}))))),b.createElement(s.ZP,{container:!0},b.createElement(s.ZP,{item:!0,xs:12,md:3},b.createElement(c.Z,null,"Quick Links"),b.createElement("ul",null,b.createElement("li",null,b.createElement(n.default,{to:`/${a}`},"Getting Started")),b.createElement("li",null,b.createElement(n.default,{to:`/${a}/dev`},"Developer Resources")),b.createElement("li",null,b.createElement(n.default,{to:u.git},"Github SDK"))),u.links.map((e=>b.createElement("li",null,b.createElement(n.default,{to:e.link},e.label)))),b.createElement(c.Z,null,"Libraries"),b.createElement("ul",null,b.createElement("li",null,b.createElement(n.default,{to:u.sdk.js.link},u.sdk.js.label)),u.sdk.rust?b.createElement("li",null,b.createElement(n.default,{to:u.sdk.rust.link},u.sdk.rust.label)):b.createElement(b.Fragment,null),u.sdk.move?b.createElement("li",null,b.createElement(n.default,{to:u.sdk.move.link},u.sdk.move.label)):b.createElement(b.Fragment,null),b.createElement("li",null,b.createElement(n.default,{to:"/api/cli"},"Sb Cli")),u.sdk.solidity?u.sdk.solidity.map((e=>b.createElement("li",{key:e.label},b.createElement(n.default,{to:e.link},e.label)))):b.createElement(b.Fragment,null))),b.createElement(s.ZP,{item:!0,xs:12,md:9},b.createElement(c.Z,null,`Clone the Switchboard x ${(0,d.S)(a)} SDK to get started:`),b.createElement(m.default,{language:"bash"},`git clone ${u.git}`),b.createElement(c.Z,null,"Examples"),b.createElement("ul",null,u.examples.map((e=>b.createElement("li",{key:e.label},b.createElement(n.default,{to:e.link},e.label)))))))))}const f=(0,u.ZP)("div")((e=>{let{dark:t}=e;return{display:"flex",width:"100%",height:"100%",padding:"32px",gap:"16px",border:"solid 1px #E8E8E8",borderRadius:"16px",flexDirection:"column",boxShadow:"0 11px 15px 0 rgba(164, 164, 164, 0.21)"}}))},29479:(e,t,a)=>{a.d(t,{M:()=>n});const n=new Map([["solana",{git:"https://github.com/switchboard-xyz/solana-sdk",discord:"https://discord.com/channels/841525135311634443/984343400377647144",icon:{light:"/img/icons/solana/logo.svg",dark:"/img/icons/solana/logo.svg"},links:[],sdk:{js:{label:"@switchboard-xyz/solana.js",link:"/api/solana.js"},rust:{label:"Rust: switchboard-solana",link:"https://docs.rs/switchboard-solana/latest/switchboard_solana/"}},examples:[{label:"Switchboard Function Examples",link:"https://github.com/switchboard-xyz/solana-sdk/tree/main/examples/functions"},{label:"Data Feed Examples",link:"https://github.com/switchboard-xyz/solana-sdk/tree/main/examples/feeds"},{label:"Randomness Examples",link:"https://github.com/switchboard-xyz/solana-sdk/tree/main/examples/vrf"},{label:"VRF Flip",link:"https://github.com/switchboard-xyz/vrf-flip"}]}],["evm",{git:"https://github.com/switchboard-xyz/evm-sdk",discord:"https://discord.com/channels/841525135311634443/1134016468703526972",icon:{light:"/img/icons/solidity/light.svg",dark:"/img/icons/solana/dark.svg"},links:[],sdk:{js:{label:"@switchboard-xyz/evm.js",link:"/api/evm.js"},rust:{label:"Rust: switchboard-evm",link:"https://docs.rs/switchboard-evm/latest/switchboard_evm/"},solidity:[{label:"Switchboard.sol",link:"/evm/dev/switchboard-sol"},{label:"FunctionsClient.sol",link:"/evm/dev/functions-client-sol"}]},examples:[{label:"Randomness Callback Function",link:"https://github.com/switchboard-xyz/evm-sdk/tree/main/examples/01_randomness_callback"},{label:"User Triggered Callback",link:"https://github.com/switchboard-xyz/evm-sdk/tree/main/examples/02_user_triggered_callback"}]}],["aptos",{git:"https://github.com/switchboard-xyz/aptos-sdk",discord:"https://discord.com/channels/841525135311634443/1134016412734726216",icon:{light:"/img/icons/aptos/logo.svg",dark:"/img/icons/aptos/dark.svg"},links:[],sdk:{js:{label:"@switchboard-xyz/aptos.js",link:"/api/aptos.js"},move:{label:"Move: switchboard-aptos",link:"https://github.com/switchboard-xyz/aptos-sdk/tree/main/move/switchboard"}},examples:[{label:"Switchboard Feed Parser",link:"https://github.com/switchboard-xyz/aptos-sdk/blob/main/programs/feed-parser/sources/demo.move"}]}],["sui",{git:"https://github.com/switchboard-xyz/sui-sdk",discord:"https://discord.com/channels/841525135311634443/1134016553759821894",icon:{light:"/img/icons/sui/logo.svg",dark:"/img/icons/sui/dark.svg"},links:[],sdk:{js:{label:"@switchboard-xyz/sui.js",link:"/api/sui.js"},move:{label:"Move: switchboard-sui",link:"https://github.com/switchboard-xyz/sui-sdk/tree/main/move/mainnet/switchboard_std"}},examples:[{label:"Switchboard Feed Parser",link:"https://github.com/switchboard-xyz/sui-sdk/blob/main/programs/mainnet/feed-parser/sources/demo.move"}]}],["near",{git:"https://github.com/switchboard-xyz/near-sdk",discord:"https://discord.com/channels/841525135311634443/1134016553759821894",icon:{light:"/img/icons/near/logo.svg",dark:"/img/icons/near/dark.svg"},links:[],sdk:{js:{label:"@switchboard-xyz/near.js",link:"/api/near.js"},rust:{label:"Rust: sbv2-near",link:"https://github.com/switchboard-xyz/near-sdk/tree/main/rust/sbv2-near"}},examples:[{label:"Switchboard Feed Parser",link:"https://github.com/switchboard-xyz/near-sdk/blob/main/programs/feed-parser/src/lib.rs"}]}]])},41002:(e,t,a)=>{function n(e){const t=e.split(" ").map((e=>e.charAt(0).toUpperCase()+e.slice(1))).join(" ");return t.endsWith("dao")?t.slice(0,t.length-3)+"DAO":t}a.d(t,{S:()=>n})},81451:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>x,contentTitle:()=>y,default:()=>A,frontMatter:()=>v,metadata:()=>w,toc:()=>E});var n=a(95634),o=(a(49231),a(54852)),r=a(51766),l=a(54405),s=a(70651),i=a(4765);const c='import { parseMrEnclave } from "@switchboard-xyz/common";\nimport type { SwitchboardProgram } from "@switchboard-xyz/solana.js";\nimport {\n  AttesationQueueAccount,\n  FunctionAccount,\n} from "@switchboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\nconst attestationQueueAccount = new AttesationQueueAccount(\n  program,\n  "2ie3JZfKcvsRLsJaP5fSo43gUo1vsurnUAtAgUdUAiDG" // mainnet attestation queue\n);\n\nconst [functionAccount] = await FunctionAccount.create(program, {\n  name: "FUNCTION_NAME",\n  metadata: "FUNCTION_METADATA",\n  schedule: "30 * * * * *", // every 30 seconds\n  container: "switchboardlabs/basic-binance-oracle",\n  containerRegistry: "dockerhub",\n  version: "latest",\n  mrEnclave: parseMrEnclave("0xABC123"),\n  attestationQueue: attestationQueueAccount,\n});\n',u='sb solana function create 2ie3JZfKcvsRLsJaP5fSo43gUo1vsurnUAtAgUdUAiDG \\\n  --name "My Function" \\\n  --metadata "Randomness Callback" \\\n  --schedule "30 * * * * *" \\\n  --containerRegistry dockerhub \\\n  --container "switchboardlabs/basic-binance-oracle" \\\n  --keypair ~/.config/solana/id.json \\\n  --mainnetBeta',d="use switchboard_solana::FunctionAccountData;\n\n#[derive(Accounts)]\npub struct SaveDataInstruction<'info> {\n    // ... your required accounts to modify your program's state\n\n    // We use this to derive and verify the functions enclave state\n    #[account(\n        constraint =\n            function.load()?.validate(\n              &enclave_signer.to_account_info()\n            )?\n    )]\n    pub function: AccountLoader<'info, FunctionAccountData>,\n    pub enclave_signer: Signer<'info>,\n}\n",m='import type {\n  attestationTypes,\n  SwitchboardProgram,\n} from "@swtichboard-xyz/solana.js";\nimport { FunctionAccount } from "@swtichboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\n\nconst functionAccount = new FunctionAccount(program, "My_Function_Pubkey");\nconst functionState: attestationTypes.FunctionAccountData =\n  await functionAccount.loadData();\n',b="sb solana function print $MY_FUNCTION_PUBKEY --mainnetBeta",p='import type {\n  JobAccount,\n  SwitchboardProgram,\n} from "@switchboard-xyz/solana.js";\nimport { OracleQueueAccount } from "@switchboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\nlet jobAccount: JobAccount;\n\nconst queueAccount = new OracleQueueAccount(\n  program,\n  "uPeRMdfPmrPqgRWSrjAnAkH78RqAhe5kXoW6vBYRqFX"\n); // devnet\n\nconst [aggregatorAccount] = await queueAccount.createFeed({\n  batchSize: 1,\n  minRequiredOracleResults: 1,\n  minRequiredJobResults: 1,\n  minUpdateDelaySeconds: 60,\n  fundAmount: 2.5,\n  enable: true,\n  jobs: [\n    // existing job account\n    { pubkey: jobAccount.publicKey },\n    // or create a new job account with the feed\n    {\n      weight: 2,\n      data: OracleJob.encodeDelimited(\n        OracleJob.fromObject({\n          tasks: [\n            {\n              valueTask: {\n                value: 1,\n              },\n            },\n          ],\n        })\n      ).finish(),\n    },\n  ],\n});\n',h='export QUEUE_KEY=uPeRMdfPmrPqgRWSrjAnAkH78RqAhe5kXoW6vBYRqFX\nexport CRANK_KEY=GN9jjCy2THzZxhYqZETmPM3my8vg4R5JyNkgULddUMa5\n\nsb solana aggregator create "$QUEUE_KEY" \\\n    --keypair ~/.config/solana/id.json \\\n    --crankKey "$CRANK_KEY" \\\n    --name "My_Test_Feed" \\\n    --updateInterval 10 \\\n    --minOracles 1 \\\n    --batchSize 1 \\\n    --leaseAmount 0.1 \\\n    --job ./src/oracle-job.json \\\n    --verbose',g='use anchor_lang::prelude::*;\nuse anchor_lang::solana_program::clock;\n\nuse std::convert::TryInto;\n\n// Instruction accounts\n#[derive(Accounts)]\n#[instruction(params: ReadFeedParams)]\npub struct ReadFeed<\'info> {\n    pub aggregator: AccountLoader<\'info, AggregatorAccountData>,\n}\n\n// Instruction params\n#[derive(Clone, AnchorSerialize, AnchorDeserialize)]\npub struct ReadFeedParams {\n    pub max_confidence_interval: Option<f64>,\n}\n\n// Instruction logic\npub fn read_result(\n    ctx: Context<ReadResult>\n) -> anchor_lang::Result<()> {\n    let feed = &ctx.accounts.switchboard_aggregator.load()?;\n\n    // get result\n    let val: f64 = feed.get_result()?.try_into()?;\n\n    // check whether the feed has been updated in the last 300 seconds\n    feed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)\n        .map_err(|_| error!(FeedErrorCode::StaleFeed))?;\n\n    msg!("Current feed result is {}!", val);\n\n    // Your custom logic here\n\n    Ok(())\n}\n\n#[error_code]\n#[derive(Eq, PartialEq)]\npub enum FeedErrorCode {\n    #[msg("Switchboard feed has not been updated in 5 minutes")]\n    StaleFeed,\n}',f='import type { SwitchboardProgram, types } from "@swtichboard-xyz/solana.js";\nimport { AggregatorAccount } from "@swtichboard-xyz/solana.js";\n\nlet program: SwitchboardProgram;\n\nconst aggregatorAccount = new AggregatorAccount(program, "My_Data_Feed_Pubkey");\nconst aggregatorState: types.AggregatorAccountData =\n  await aggregatorAccount.loadData();\n',k='sb solana function print "$MY_FUNCTION_PUBKEY"',v={slug:".",title:"Developer Resources",keywords:["Solana","Solana SDK","Oracles","Web3","Off-chain","Randomness"]},y=void 0,w={unversionedId:"solana/dev/overview",id:"solana/dev/overview",title:"Developer Resources",description:"Functions",source:"@site/docs/201-solana/70-dev/00-overview.mdx",sourceDirName:"201-solana/70-dev",slug:"/solana/dev/",permalink:"/solana/dev/",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{slug:".",title:"Developer Resources",keywords:["Solana","Solana SDK","Oracles","Web3","Off-chain","Randomness"]},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/solana/"},next:{title:"\ud83d\udcc8 Read a Data Feed",permalink:"/solana/guides/read-a-data-feed"}},x={},E=[{value:"Functions",id:"functions",level:2},{value:"Create a Scheduled Function",id:"create-a-scheduled-function",level:3},{value:"Read a Function",id:"read-a-function",level:3},{value:"Debug a Function",id:"debug-a-function",level:3},{value:"Data Feeds",id:"data-feeds",level:2},{value:"Create a Data Feed",id:"create-a-data-feed",level:3},{value:"Read a Data Feed",id:"read-a-data-feed",level:3}],S={toc:E},T="wrapper";function A(e){let{components:t,...a}=e;return(0,o.kt)(T,(0,n.Z)({},S,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.Z,{sdk:"solana",mdxType:"SdkCard"}),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"create-a-scheduled-function"},"Create a Scheduled Function"),(0,o.kt)("p",null,"The examples below show how to create a Switchboard Function that runs the\n",(0,o.kt)("inlineCode",{parentName:"p"},"switchboardlabs/basic-binance-oracle:latest")," container from dockerhub every 30\nseconds."),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)(r.default,{language:"typescript",mdxType:"CodeBlock"},c)),(0,o.kt)(s.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)(r.default,{language:"typescript",mdxType:"CodeBlock"},u))),(0,o.kt)("h3",{id:"read-a-function"},"Read a Function"),(0,o.kt)("p",null,"Switchboard Functions allow you to execute arbitrary instructions as long as the\nfunctions ",(0,o.kt)("inlineCode",{parentName:"p"},"enclave.signer")," has signed the transaction. This keypair gets\ngenerated within the enclave so we can prove the transaction was built securely."),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"Rust",label:"Rust",default:!0,default:!0,mdxType:"TabItem"},(0,o.kt)("p",null,"This example shows how to verify that the functions `enclave.signer` has signed your custom instructions."),(0,o.kt)(r.default,{language:"rust",mdxType:"CodeBlock"},d)),(0,o.kt)(s.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)(r.default,{language:"typescript",mdxType:"CodeBlock"},m)),(0,o.kt)(s.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)(r.default,{language:"bash",mdxType:"CodeBlock"},b))),(0,o.kt)("h3",{id:"debug-a-function"},"Debug a Function"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Coming Soon!")),(0,o.kt)("p",null,"The Switchboard Function developer tooling is still in its early stages. By the\nend of Q3 we will support a function simulation server, an endpoint to view\ncontainer logs, and some helper scripts to manage your protocols functions."),(0,o.kt)("h2",{id:"data-feeds"},"Data Feeds"),(0,o.kt)("h3",{id:"create-a-data-feed"},"Create a Data Feed"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)(r.default,{language:"typescript",mdxType:"CodeBlock"},p)),(0,o.kt)(s.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)(r.default,{language:"bash",mdxType:"CodeBlock"},h))),(0,o.kt)("h3",{id:"read-a-data-feed"},"Read a Data Feed"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"Rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,o.kt)(r.default,{language:"rust",mdxType:"CodeBlock"},g)),(0,o.kt)(s.Z,{value:"Javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)(r.default,{language:"javascript",mdxType:"CodeBlock"},f)),(0,o.kt)(s.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,o.kt)(r.default,{language:"bash",mdxType:"CodeBlock"},k),(0,o.kt)("p",null,"You need to add `--mainnetBeta` to view a function for the mainnet-beta network. The default network is devnet."))))}A.isMDXComponent=!0}}]);