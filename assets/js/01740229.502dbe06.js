"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7246,8969],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},87357:(e,t,a)=>{a.d(t,{Z:()=>k});var n=a(83117),r=a(80102),i=a(67294),o=a(86010),l=a(49731),s=a(86523),u=a(39707),c=a(96682),d=a(85893);const p=["className","component"];var m=a(37078);const h=function(e={}){const{defaultTheme:t,defaultClassName:a="MuiBox-root",generateClassName:m,styleFunctionSx:h=s.Z}=e,k=(0,l.ZP)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(h);return i.forwardRef((function(e,i){const l=(0,c.Z)(t),s=(0,u.Z)(e),{className:h,component:f="div"}=s,g=(0,r.Z)(s,p);return(0,d.jsx)(k,(0,n.Z)({as:f,ref:i,className:(0,o.Z)(h,m?m(a):a),theme:l},g))}))}({defaultTheme:(0,a(21265).Z)(),defaultClassName:"MuiBox-root",generateClassName:m.Z.generate}),k=h},24588:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>d});var n=a(83117),r=(a(67294),a(3905)),i=a(86886),o=a(24008);a(64707);const l={sidebar_position:10,id:"queues",slug:"/queues"},s="Oracle Queues",u={unversionedId:"queues",id:"queues",title:"Oracle Queues",description:"TODO: High level overview of how Switchboard is structured",source:"@site/learn/queues.mdx",sourceDirName:".",slug:"/queues",permalink:"/sbv2-core/learn/queues",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,id:"queues",slug:"/queues"},sidebar:"tutorialSidebar",previous:{title:"Oracles",permalink:"/sbv2-core/learn/oracles"},next:{title:"Data Feeds",permalink:"/sbv2-core/learn/feeds"}},c={},d=[{value:"Configuration",id:"configuration",level:2},{value:"Oracle Queue",id:"oracle-queue",level:2},{value:"Access Control",id:"access-control",level:2},{value:"Crank",id:"crank",level:2},{value:"Economic Security",id:"economic-security",level:2},{value:"Stake",id:"stake",level:3},{value:"Reward",id:"reward",level:3},{value:"Slashing",id:"slashing",level:3},{value:"Governance",id:"governance",level:2}],p={toc:d};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"oracle-queues"},"Oracle Queues"),(0,r.kt)("p",null,"TODO: High level overview of how Switchboard is structured"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Queues are partitions networks"),(0,r.kt)("li",{parentName:"ul"},"Queues control the security permissions of its participants"),(0,r.kt)("li",{parentName:"ul"},"Queues can be governed by a DAO, multisig, or central authority"),(0,r.kt)("li",{parentName:"ul"},"Queues provide the flexibility to allow anyone to run their own oracle network")),(0,r.kt)("p",null,"An oracle queue is an independent realm of oracles, responsible for allocating\noracle resources for update requests from data feeds, randomness, or buffer\nrelayers. Oracle queue's act as an aggregator for on-chain consumers looking to\npublish data on-chain by specifying an upfront reward a requester is required to\npay when a new update is requested by an oracle. Oracles act as an off-chain\ncompute resource that can be utilized by on-chain programs needing a\ndecentralized way to source data."),(0,r.kt)("p",null,"Each oracle queue is independent and maintain their own configurations, which\ndictates its degree of security. Queue's can require update requesters to be\npre-approved to use a queues resources or allow any requester access to a queue.\nQueue's also specify a minimum stake oracles must maintain in their escrow\nwallet before joining a queue, which acts as a deposit to incentivize honest\noracle behavior."),(0,r.kt)("p",null,"Oracle queue's currently support update requests from the following resource\ntypes:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Resource Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Data Feeds")),(0,r.kt)("td",{parentName:"tr",align:null},"Utilize a batch of oracles to resolve a data point from a variety of source and determine the final result as the median of oracle responses ",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"Can be a price feed, sport result, or any data point found on the internet"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Randomness")),(0,r.kt)("td",{parentName:"tr",align:null},"Utilize an oracle to publish and verify a Verifiable Randomness Function on-chain.",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"Can be used for fair NFT launches, decentralized lottery, or any random assignment"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Buffer Relayer")),(0,r.kt)("td",{parentName:"tr",align:null},"Utilize an oracle to relay and publish a buffer on-chain",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"Can be used by programs needing a way to quickly source data on-chain that may not need as many security guarantees as a price feed "))))),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)(i.ZP,{container:!0,spacing:2,mdxType:"Grid"},(0,r.kt)(i.ZP,{item:!0,md:4,sm:12,mdxType:"Grid"},(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("b",null,"Oracle Queue: "),"Contains the Oracle Queue's configuration parameters that influence its security model."),(0,r.kt)("br",null),(0,r.kt)("li",null,(0,r.kt)("b",null,"Oracle Queue Buffer: "),"Stores the current list of oracles actively heartbeating on-chain."),(0,r.kt)("br",null),(0,r.kt)("li",null,(0,r.kt)("b",null,"Oracle: "),"Off-chain resource used by a queue to fulfill update request."),(0,r.kt)("br",null),(0,r.kt)("li",null,(0,r.kt)("b",null,"Crank: "),"Optional, Crank Account that permits data feeds to join and request periodic updates."),(0,r.kt)("br",null),(0,r.kt)("li",null,(0,r.kt)("b",null,"Crank Buffer: "),"Stores the list of data feeds on a crank along with their next allowed update time."))),(0,r.kt)(i.ZP,{item:!0,md:8,sm:12,mdxType:"Grid"},(0,r.kt)(o.Z,{img:"/img/queue/Oracle_Queue_Accounts.jpg",sx:{display:"flex"},mdxType:"MarkdownImage"}))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"oracle-queue"},"Oracle Queue"),(0,r.kt)("p",null,"When creating a queue, an OracleQueueBuffer account must also be initialized\nwith a size of 8 Bytes + (32 Bytes \xd7 ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.maxSize"),"), where ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.maxSize")," is\nthe maximum number of oracles the queue can support. The OracleQueueBuffer\naccount ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.dataBuffer")," stores a list of oracle public keys in a round robin\nfashion, using ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.currIdx")," to track its position on the queue for allocating\nresource update request. Once a buffer is full, oracles must be removed before\nnew oracles can join the network. An oracle can be assigned to many update\nrequest simultaneously but must continuously heartbeat on-chain to signal\nreadiness."),(0,r.kt)("p",null,"An oracle with ",(0,r.kt)("strong",{parentName:"p"},"PermitOracleHeartbeat")," permissions ",(0,r.kt)("em",{parentName:"p"},"MUST")," periodically\nheartbeat on the queue to signal readiness, which adds the oracle to the queue\nand allows it to be assigned resource update requests. Oracle positions are\nperiodically swapped in the OracleQueueBuffer account to mitigate oracles being\nassigned the same update requests on each iteration of the queue."),(0,r.kt)("p",null,"The queue uses ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.gcIdx")," to track its garbage collection index. When an\noracle heartbeats on-chain, it passes the oracle account at index ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.gcIdx"),".\nIf the oracle account has failed to heartbeat before ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.oracleTimeout"),", it\nis removed from the queue until its next successful heartbeat and will no longer\nbe assigned resource update requests."),(0,r.kt)("h2",{id:"access-control"},"Access Control"),(0,r.kt)("p",null,"Oracle queue resources, such as oracles, aggregators, VRF accounts, or buffer\nrelayer accounts, ",(0,r.kt)("em",{parentName:"p"},"MUST")," have an associated PermissionAccount initialized before\ninteracting with a queue. Permissions are granted by ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.authority"),", which\ncould be a DAO controlled account to allow network participants to vote on new\nentrants."),(0,r.kt)("p",null,"Oracles ",(0,r.kt)("em",{parentName:"p"},"MUST")," have ",(0,r.kt)("strong",{parentName:"p"},"PermitOracleHeartbeat")," permissions before heartbeating on\na queue. This is to prevent a malicious actor from spinning up a plethora of\noracles until it obtains the super majority, at which point it could misreport\ndata feed results and cause honest oracles to be slashed."),(0,r.kt)("p",null,"See the table below for the minimum required permissions for a resource based on\nthe queues settings:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Queue Setting"),(0,r.kt)("th",{parentName:"tr",align:null},"False"),(0,r.kt)("th",{parentName:"tr",align:null},"True"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unpermissionedFeedsEnabled")),(0,r.kt)("td",{parentName:"tr",align:null},"Aggregators & Buffer Relayers ",(0,r.kt)("em",{parentName:"td"},"MUST")," have ",(0,r.kt)("strong",{parentName:"td"},"PermitOracleQueueUsage")," permissions before requesting an update"),(0,r.kt)("td",{parentName:"tr",align:null},"Aggregators & Buffer Relayers require no explicit permissions before requesting an update")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unpermissionedVrfEnabled")),(0,r.kt)("td",{parentName:"tr",align:null},"VRF Accounts ",(0,r.kt)("em",{parentName:"td"},"MUST")," have ",(0,r.kt)("strong",{parentName:"td"},"PermitVrfRequests")," permissions before requesting an update"),(0,r.kt)("td",{parentName:"tr",align:null},"VRF Accounts require no explicit permissions before requesting an update")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"enableBufferRelayers")),(0,r.kt)("td",{parentName:"tr",align:null},"Buffer Relayers are ",(0,r.kt)("em",{parentName:"td"},"NOT")," permitted to request updates"),(0,r.kt)("td",{parentName:"tr",align:null},"Buffer Relayers are permitted to request updates")))),(0,r.kt)("h2",{id:"crank"},"Crank"),(0,r.kt)("p",null,"A queue can choose to create one or many cranks. A crank is a scheduling\nmechanism that allows data feeds to request periodic updates. A crank can be\nturned by anyone, and if successful, the crank turner will be rewarded for jump\nstarting the system."),(0,r.kt)("p",null,"A data feed is only permitted to join a crank if it has sufficient permissions\n(as detailed above) and the crank has available capacity. Data feeds on a crank\nare ordered by their next available update time with some level of jitter to\nmitigate oracles being assigned to the same update request upon each iteration\nof the queue, which makes them susceptible to a malicous oracle. The maximum\nupdate interval for a feed on a crank is based on its\n",(0,r.kt)("inlineCode",{parentName:"p"},"aggregator.minUpdateDelaySeconds")," and can be calculated by:"),(0,r.kt)("p",null,"$I",(0,r.kt)("em",{parentName:"p"},"{Max} (seconds) = I"),"{minUpdateDelaySeconds}  + ","[15\\quad\\% \\quad I_{minUpdateDelaySeconds}]","$"),(0,r.kt)("h2",{id:"economic-security"},"Economic Security"),(0,r.kt)("p",null,"An oracle queue uses economic incentives to entice oracles to act honestly,\nwhich dictate a queue's security model."),(0,r.kt)("h3",{id:"stake"},"Stake"),(0,r.kt)("p",null,"The queue's ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.minStake")," is the raw token amount in the token mints base\nunit (",(0,r.kt)("em",{parentName:"p"},"Ex: lamports or satoshis"),") required by an oracle to heartbeat on a queue.\nIf an oracle's staking wallet falls below the minStake requirement, it is\nremoved from the queue."),(0,r.kt)("p",null,"DeFi protocols with a significant Total Value Locked (TVL) should require\noracles with a higher minimum stake to fulfill their update request. Oracles\nwith a higher degree of ",(0,r.kt)("em",{parentName:"p"},"skin-in-the-game")," have a greater incentive to respond\nhonestly."),(0,r.kt)("h3",{id:"reward"},"Reward"),(0,r.kt)("p",null,"The queue's specified ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.reward")," is the number of tokens an oracle or crank\nturner receives for successfully completing an on-chain action. For a crank\nturner this is turning the crank and invoking a data feed update. For an oracle\nthis is responding to an update request within the reliable margin from the\naccepted result."),(0,r.kt)("p",null,"Queues should reward oracles enough such that the economic incentive over the\nlifecycle of the feed exceeds the opportunity cost to attack a protocol\nconsuming the feed."),(0,r.kt)("h3",{id:"slashing"},"Slashing"),(0,r.kt)("p",null,"A queue may set ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.slashingEnabled")," to true in order to dissuade oracles\nfrom responding to update request outside a set margin of error."),(0,r.kt)("p",null,"A queue's ",(0,r.kt)("inlineCode",{parentName:"p"},"queue.varianceToleranceMultiplier")," determines how many standard\ndeviations an oracle must respond within before being slashed and forfeiting a\nportion of their stake. ","[Defaults to 2 std deviations]"),(0,r.kt)("p",null,"DeFi protocols with a significant TVL should require their feeds to be on a\nqueue with slashing enabled."),(0,r.kt)("h2",{id:"governance"},"Governance"),(0,r.kt)("p",null,"An oracle queue can be governed by its network participants to control the\nvarious queue configuration parameters, such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queue.minStake")," - require a higher up-front cost for oracles to entice honest\nbehavior"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queue.reward")," - control the oracle reward payout for successfully fulfilling\nupdate request"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queue.slashingEnabled")," - to disincentivize malicious oracle behavior"),(0,r.kt)("li",{parentName:"ul"},"Permit new oracles to join the network")))}m.isMDXComponent=!0},64707:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=a(83117),r=(a(67294),a(3905));const i={},o=void 0,l={unversionedId:"types/SwitchboardPermission",id:"types/SwitchboardPermission",title:"SwitchboardPermission",description:"| Name                   | Value | Description                                                                                                                                                                               |",source:"@site/idl/types/SwitchboardPermission.md",sourceDirName:"types",slug:"/types/SwitchboardPermission",permalink:"/sbv2-core/idl/types/SwitchboardPermission",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SwitchboardDecimal",permalink:"/sbv2-core/idl/types/SwitchboardDecimal"},next:{title:"VrfBuilder",permalink:"/sbv2-core/idl/types/VrfBuilder"}},s={},u=[],c={toc:u};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"No assigned permissions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PermitOracleHeartbeat"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"queue ",(0,r.kt)("inlineCode",{parentName:"td"},"authority")," has permitted an Oracle Account to heartbeat on it's queue and receive update requests. Oracles ",(0,r.kt)("em",{parentName:"td"},"always")," need permissions to join a queue.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PermitOracleQueueUsage"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"queue ",(0,r.kt)("inlineCode",{parentName:"td"},"authority")," has permitted an Aggregator Account to request updates from it's oracles or join an existing crank. ",(0,r.kt)("strong",{parentName:"td"},"Note:")," Not required if a queue has ",(0,r.kt)("inlineCode",{parentName:"td"},"unpermissionedFeedsEnabled"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PermitVrfRequests"),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"queue ",(0,r.kt)("inlineCode",{parentName:"td"},"authority")," has permitted a VRF Account to request randomness from it's oracles. ",(0,r.kt)("strong",{parentName:"td"},"Note:")," Not required if a queue has ",(0,r.kt)("inlineCode",{parentName:"td"},"unpermissionedVrfEnabled"),".")))))}d.isMDXComponent=!0},24008:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(87357),r=a(92949),i=a(44996),o=a(67294);const l=e=>{const{colorMode:t}=(0,r.I)();let a="inherit";e.lightBg&&"dark"!==t&&(a=e.lightBg),e.darkBg&&"dark"===t&&(a=e.darkBg);let l={};return e.sx&&(l={backgroundColor:a,m:"auto",display:"flex",...l,...e.sx}),o.createElement(n.Z,{component:"img",sx:l,src:(0,i.Z)(e.img)})}}}]);