"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7546],{54852:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(49231);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(r),h=a,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return r?n.createElement(m,s(s({ref:t},u),{},{components:r})):n.createElement(m,s({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},77680:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(49231),a=r(19841);const o={tabItem:"tabItem_ftN3"};function s(e){let{children:t,hidden:r,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,s),hidden:r},t)}},8450:(e,t,r)=>{r.d(t,{Z:()=>h});var n=r(66e3),a=r(49231),o=r(19841),s=r(61084),i=r(95773),l=r(16082);const c={tabList:"tabList_QucB",tabItem:"tabItem_qpyD"};function u(e){let{className:t,block:r,selectedValue:i,selectValue:l,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),h=e=>{const t=e.currentTarget,r=d.indexOf(t),n=u[r].value;n!==i&&(p(t),l(n))},m=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const r=d.indexOf(e.currentTarget)+1;t=d[r]??d[0];break}case"ArrowLeft":{const r=d.indexOf(e.currentTarget)-1;t=d[r]??d[d.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},t)},u.map((e=>{let{value:t,label:r,attributes:s}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:h},s,{className:(0,o.Z)("tabs__item",c.tabItem,s?.className,{"tabs__item--active":i===t})}),r??t)})))}function d(e){let{lazy:t,children:r,selectedValue:n}=e;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function p(e){const t=(0,i.Y)(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",c.tabList)},a.createElement(u,(0,n.Z)({},e,t)),a.createElement(d,(0,n.Z)({},e,t)))}function h(e){const t=(0,l.Z)();return a.createElement(p,(0,n.Z)({key:String(t)},e))}},95773:(e,t,r)=>{r.d(t,{Y:()=>p});var n=r(49231),a=r(19409),o=r(26002),s=r(75851),i=r(95149);function l(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}function c(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??l(r);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function u(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:r}=e;const s=(0,a.k6)(),i=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,o._X)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(s.location.search);t.set(i,e),s.replace({...s.location,search:t.toString()})}),[i,s])]}function p(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,o=c(e),[s,l]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[p,h]=d({queryString:r,groupId:a}),[m,g]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,i.Nk)(r);return[a,(0,n.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:a}),f=(()=>{const e=p??m;return u({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),g(e)}),[h,g,o]),tabValues:o}}},73383:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(58681),a=r(78488),o=r(76681),s=r(49231);const i=e=>{const{colorMode:t}=(0,n.I)();let r=(0,a.Z)("dark"===t&&e.darkImg?e.darkImg:e.img),i="inherit";e.lightBg&&"dark"!==t&&(i=e.lightBg),e.darkBg&&"dark"===t&&(i=e.darkBg);let l={};return e.sx&&(l={backgroundColor:i,m:"auto",display:"flex",...l,...e.sx}),s.createElement(o.Z,{component:"img",sx:l,src:r})}},43471:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(66e3),a=(r(49231),r(54852));r(73383),r(44229),r(18521),r(8450),r(77680);const o={sidebar_position:3,title:"Anchor: Read Feed On-Chain",description:"Learn how to read a feed using the Anchor framework."},s=void 0,i={unversionedId:"guides/solana/feeds/anchor",id:"guides/solana/feeds/anchor",title:"Anchor: Read Feed On-Chain",description:"Learn how to read a feed using the Anchor framework.",source:"@site/docs/guides/solana/feeds/anchor.mdx",sourceDirName:"guides/solana/feeds",slug:"/guides/solana/feeds/anchor",permalink:"/guides/solana/feeds/anchor",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Anchor: Read Feed On-Chain",description:"Learn how to read a feed using the Anchor framework."},sidebar:"guidesSidebar",previous:{title:"Native Rust: Read Feed On-Chain",permalink:"/guides/solana/feeds/rust"},next:{title:"Priority Fees",permalink:"/guides/solana/feeds/priority-fees"}},l={},c=[{value:"1. Add switchboard-v2",id:"1-add-switchboard-v2",level:2},{value:"2. <code>ReadResult</code> Context",id:"2-readresult-context",level:2},{value:"3. <code>read_result</code> Instruction",id:"3-read_result-instruction",level:2},{value:"4. Off-Chain: Read the result!",id:"4-off-chain-read-the-result",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This guide will show you how to read a Switchboard data feed."),(0,a.kt)("p",null,"In order to read a Switchboard data feed using Anchor, we will need to:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add the switchboard-v2 dependency"),(0,a.kt)("li",{parentName:"ol"},"Create the ",(0,a.kt)("inlineCode",{parentName:"li"},"ReadResult")," Accounts context containing the Switchboard data feed"),(0,a.kt)("li",{parentName:"ol"},"Create the ",(0,a.kt)("inlineCode",{parentName:"li"},"read_result")," instruction with the ",(0,a.kt)("inlineCode",{parentName:"li"},"ReadResult")," Accounts context"),(0,a.kt)("li",{parentName:"ol"},"Submit a transaction on-chain with the ",(0,a.kt)("inlineCode",{parentName:"li"},"read_result")," instruction")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"View the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/sbv2-solana/tree/main/programs/anchor-feed-parser"},"anchor-feed-parser"),"\nexample on Github.")),(0,a.kt)("h2",{id:"1-add-switchboard-v2"},"1. Add switchboard-v2"),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"switchboard-v2")," crate to your Cargo.toml file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nswitchboard-v2 = "0.1"\n')),(0,a.kt)("h2",{id:"2-readresult-context"},"2. ",(0,a.kt)("inlineCode",{parentName:"h2"},"ReadResult")," Context"),(0,a.kt)("p",null,"Anchor provides the\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/anchor-lang/latest/anchor_lang/accounts/account_loader/struct.AccountLoader.html"},"anchor-lang AccountLoader"),"\ntrait to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"verify the account has the correct discriminator (all AggregatorAccounts share\nthe same first 8 bytes)"),(0,a.kt)("li",{parentName:"ul"},"the account is owned by the program ID defined in the switchboard-v2 crate")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ReadResult")," Accounts context would look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::prelude::*;\nuse switchboard_v2::{AggregatorAccountData};\n\n#[derive(Accounts)]\npub struct ReadResult<'info> {\n    pub switchboard_aggregator: AccountLoader<'info, AggregatorAccountData>,\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You should store the aggregator's pubkey somewhere in your program state and\nverify the expected aggregator was passed into your instruction."),(0,a.kt)("p",{parentName:"admonition"},"If you are building a DeFi market you may have a MyMarket account type storing\nthe SOL/USD Switchboard feed address in the field ",(0,a.kt)("inlineCode",{parentName:"p"},"switchboard_aggregator"),". You\ncan then verify this pubkey in the Accounts context like the following:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::prelude::*;\nuse switchboard_v2::{AggregatorAccountData};\n\n#[account(zero_copy)]\npub struct MyMarket {\n    pub bump: u8,\n    pub switchboard_aggregator: Pubkey,\n}\n\n#[derive(Accounts)]\npub struct ReadResult<'info> {\n    #[account(\n        has_one = switchboard_aggregator\n    )]\n    pub market: AccountLoader<'info, MyMarket>,\n    pub switchboard_aggregator: AccountLoader<'info, AggregatorAccountData>,\n}\n"))),(0,a.kt)("h2",{id:"3-read_result-instruction"},"3. ",(0,a.kt)("inlineCode",{parentName:"h2"},"read_result")," Instruction"),(0,a.kt)("p",null,"Now lets add a ",(0,a.kt)("inlineCode",{parentName:"p"},"read_result")," instruction to our program and pass in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"ReadResult")," context."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"First"),", we will deserialize the account data into the\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/switchboard-v2/0.1.22/switchboard_v2/aggregator/struct.AggregatorAccountData.html"},"AggregatorAccountData (docs.rs)"),"\nstruct."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Next"),", we will use the TryInto trait to convert the\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/switchboard-v2/0.1.22/switchboard_v2/decimal/struct.SwitchboardDecimal.html"},"SwitchboardDecimal (docs.rs)"),"\ninto the ",(0,a.kt)("inlineCode",{parentName:"p"},"f64")," primitive because it's easier to work with."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"SwitchboardDecimal")," struct is a basic wrapper around the\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/rust_decimal/1.29.1/rust_decimal/"},"rust-decimal (docs.rs)"),"\nimplementation.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Finally"),", we will verify the feed was updated in the last 300 seconds so we\naren't consuming a stale value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use anchor_lang::prelude::*;\nuse anchor_lang::solana_program::clock;\n\nuse std::convert::TryInto;\n\n#[program]\npub mod anchor_feed_parser {\n    use super::*;\n\n    pub fn read_result(\n        ctx: Context<ReadResult>\n    ) -> anchor_lang::Result<()> {\n        let feed = &ctx.accounts.switchboard_aggregator.load()?;\n\n        // get result\n        let val: f64 = feed.get_result()?.try_into()?;\n\n        // check whether the feed has been updated in the last 300 seconds\n        feed.check_staleness(clock::Clock::get().unwrap().unix_timestamp, 300)\n            .map_err(|_| error!(FeedErrorCode::StaleFeed))?;\n\n        msg!("Current feed result is {}!", val);\n\n        // Your custom logic here\n\n        Ok(())\n    }\n}\n\n#[error_code]\n#[derive(Eq, PartialEq)]\npub enum FeedErrorCode {\n    #[msg("Switchboard feed has not been updated in 5 minutes")]\n    StaleFeed,\n}\n\n')),(0,a.kt)("h2",{id:"4-off-chain-read-the-result"},"4. Off-Chain: Read the result!"),(0,a.kt)("p",null,"We will need to build a Solana transaction that contains our aggregator address\nto read."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import * as anchor from "@coral-xyz/anchor";\nimport { sleep } from "@switchboard-xyz/common";\nimport {\n  AggregatorAccount,\n  SwitchboardProgram,\n} from "@switchboard-xyz/solana.js";\nimport assert from "assert";\nimport { AnchorFeedParser } from "../target/types/anchor_feed_parser";\n\ndescribe("anchor-feed-parser test", () => {\n  const provider = anchor.AnchorProvider.env();\n  anchor.setProvider(provider);\n\n  const feedParserProgram: anchor.Program<AnchorFeedParser> =\n    anchor.workspace.AnchorFeedParser;\n\n  let switchboard: SwitchboardProgram;\n  let aggregatorAccount: AggregatorAccount;\n\n  it("Reads a Switchboard data feed", async () => {\n    const signature = await feedParserProgram.methods\n      .readResult()\n      .accounts({ switchboardAggregator: aggregatorAccount.publicKey })\n      .rpc();\n\n    // wait for RPC\n    await sleep(2000);\n\n    const logs = await provider.connection.getParsedTransaction(\n      signature,\n      "confirmed"\n    );\n\n    console.log(JSON.stringify(logs?.meta?.logMessages, undefined, 2));\n\n    const match = JSON.stringify(logs?.meta?.logMessages ?? []).match(\n      new RegExp(/Current feed result is (?<feed_result>\\d+)/)\n    );\n    const feedResult = Number(match?.groups?.feed_result ?? null);\n    console.log(`Feed Result: ${feedResult}`);\n  });\n});\n')))}p.isMDXComponent=!0}}]);