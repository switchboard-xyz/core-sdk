"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9253],{54852:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(49231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),p=r,f=d["".concat(l,".").concat(p)]||d[p]||m[p]||o;return n?a.createElement(f,s(s({ref:t},u),{},{components:n})):a.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},16109:(e,t,n)=>{var a=n(10287);t.Z=void 0;var r=a(n(88706)),o=n(20264),s=(0,r.default)((0,o.jsx)("path",{d:"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"}),"ContentCopy");t.Z=s},53242:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(49231),r=n(19841);const o={tabItem:"tabItem_B1C6"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:n},t)}},79793:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(95634),r=n(49231),o=n(19841),s=n(49949),i=n(4345),l=n(54162);const c={tabList:"tabList_wB6B",tabItem:"tabItem_i0b_"};function u(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:m}=(0,s.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),a=u[n].value;a!==i&&(m(t),l(a))},f=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:f,onClick:p},s,{className:(0,o.Z)("tabs__item",c.tabItem,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function d(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function m(e){const t=(0,i.Y)(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",c.tabList)},r.createElement(u,(0,a.Z)({},e,t)),r.createElement(d,(0,a.Z)({},e,t)))}function p(e){const t=(0,l.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},4345:(e,t,n)=>{n.d(t,{Y:()=>m});var a=n(49231),r=n(19409),o=n(18048),s=n(54657),i=n(70583);function l(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??l(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:n}=e;const s=(0,r.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(s.location.search);t.set(i,e),s.replace({...s.location,search:t.toString()})}),[i,s])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=c(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[m,p]=d({queryString:n,groupId:r}),[f,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,i.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),b=(()=>{const e=m??f;return u({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),h(e)}),[p,h,o]),tabValues:o}}},46441:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(16109),r=n(7179),o=n(73943),s=n(92994),i=n(49231);function l(e){let t={textTransform:"none",color:"var(--ifm-color-primary-light)",fontWeight:800,margin:0};e.sx&&(t={...t,...e.sx});return i.createElement(r.Z,{title:"copy to clipboard","aria-label":"copy to clipboard",arrow:!0},i.createElement(o.Z,{variant:"text",size:"small",startIcon:i.createElement(a.Z,{sx:{fill:"var(--ifm-color-primary-darkest)"},fontSize:"small"}),onClick:()=>{const t=document.createElement("textarea");t.value=e.address,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}},i.createElement(s.Z,{sx:t,color:"textSecondary"},function(e,t){if(!t||0===t||0===e.length||e.length<t)return e;const n=t,a=Math.floor(e.length/2),r=n%2==0?a-n/2:a-Math.floor(n/2)-1,o=n%2==0?a+n/2:a-Math.floor(n/2);return`${e.slice(0,r)}...${e.slice(o,e.length)}`}(e.address,e.trim))))}},45983:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(63102),r=n(86953),o=n(40862),s=n(49231);const i=e=>{const{colorMode:t}=(0,a.I)(),n=(0,r.Z)("dark"===t&&e.darkImg?e.darkImg:e.img);let i="inherit";e.lightBg&&"dark"!==t&&(i=e.lightBg),e.darkBg&&"dark"===t&&(i=e.darkBg);let l={};return e.sx&&(l={backgroundColor:i,m:"auto",display:"flex",...l,...e.sx}),s.createElement(o.Z,{component:"img",sx:l,src:n})}},24420:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(95634),r=(n(49231),n(54852));n(45983),n(46441),n(6289),n(49451),n(79793),n(53242);const o={title:"Ex. 02: Randomness Callback",sidebar_position:101,hide_title:!0,slug:"/solana/functions/examples/randomness-callback"},s="Randomness Callback",i={unversionedId:"solana/functions/randomness-callback",id:"solana/functions/randomness-callback",title:"Ex. 02: Randomness Callback",description:"Switchboard Functions let you specify custom parameters with each invokation. This allows you to create",source:"@site/docs/solana/functions/randomness-callback.mdx",sourceDirName:"solana/functions",slug:"/solana/functions/examples/randomness-callback",permalink:"/solana/functions/examples/randomness-callback",draft:!1,tags:[],version:"current",sidebarPosition:101,frontMatter:{title:"Ex. 02: Randomness Callback",sidebar_position:101,hide_title:!0,slug:"/solana/functions/examples/randomness-callback"},sidebar:"gettingStartedSidebar",previous:{title:"Ex. 01: Basic Oracle Example",permalink:"/solana/functions/examples/basic-oracle-example"},next:{title:"Priority Fees",permalink:"/solana/feeds/priority-fees"}},l={},c=[{value:"Define Switchboard interface in your program",id:"define-switchboard-interface-in-your-program",level:2},{value:"Write a custom function in Rust",id:"write-a-custom-function-in-rust",level:2},{value:"Deploy function to Docker container",id:"deploy-function-to-docker-container",level:2},{value:"Create Switchboard function account",id:"create-switchboard-function-account",level:2},{value:"Create user and request account",id:"create-user-and-request-account",level:2},{value:"Request randomness",id:"request-randomness",level:2}],u={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"randomness-callback"},"Randomness Callback"),(0,r.kt)("p",null,"Switchboard Functions let you specify custom parameters with each invokation. This allows you to create\npermanent user accounts for your function or one-time-use ",(0,r.kt)("inlineCode",{parentName:"p"},"FunctionRequestAccount"),"'s. This design decision\nmay come down to whether you need parallel function requests for users. For example, a DEX may want individual\nrequest accounts so a user can have multiple trades in progress whereas a decentralized casino may want a\npermanent request account for each user since they can only spin the roulette wheel one at a time."),(0,r.kt)("p",null,"In this example we will build a program which allows a user to request randomness then await the result\noff-chain and determine if the user is correct."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Integration Checklist:")),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Define Switchboard interface in your program"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Write a custom function in Rust"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Deploy function to Docker container"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Create Switchboard function account"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Create user and request account"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Request randomness")),(0,r.kt)("h2",{id:"define-switchboard-interface-in-your-program"},"Define Switchboard interface in your program"),(0,r.kt)("p",null,"Besides ",(0,r.kt)("inlineCode",{parentName:"p"},"user_init"),", we will need two instructions: ",(0,r.kt)("inlineCode",{parentName:"p"},"user_guess")," to initiate the request then ",(0,r.kt)("inlineCode",{parentName:"p"},"user_settle")," to finish the request."),(0,r.kt)("h2",{id:"write-a-custom-function-in-rust"},"Write a custom function in Rust"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::str::FromStr;\n\npub use switchboard_solana::get_ixn_discriminator;\npub use switchboard_solana::prelude::*;\n\nmod params;\npub use params::*;\n\n#[tokio::main(worker_threads = 12)]\nasync fn main() {\n    // First, initialize the runner instance with a freshly generated Gramine keypair\n    let runner = FunctionRunner::new_from_cluster(Cluster::Devnet, None).unwrap();\n\n    // parse and validate user provided request params\n    let params = ContainerParams::decode(&runner.fn_request_data.container_params).unwrap();\n\n    // Determine the final result\n    let mut bytes: [u8; 1] = [0u8; 1];\n    Gramine::read_rand(&mut bytes).expect("gramine failed to generate randomness");\n    let result = (bytes[0] % params.max_guess) + 1;\n\n    // derive pubkeys to build ixn\n    let (house_pubkey, _house_bump) =\n        Pubkey::find_program_address(&[b"CUSTOMRANDOMNESS"], &params.program_id);\n    let mint = anchor_spl::token::spl_token::native_mint::ID;\n    let house_escrow =\n        anchor_spl::associated_token::get_associated_token_address(&house_pubkey, &mint);\n    let user_escrow =\n        anchor_spl::associated_token::get_associated_token_address(&params.user_key, &mint);\n\n    // build ixn data from discriminator and result\n    let mut ixn_data = get_ixn_discriminator("user_settle").to_vec();\n    ixn_data.push(result);\n\n    let user_settle_ixn = Instruction {\n        program_id: params.program_id,\n        data: ixn_data,\n        accounts: vec![\n            AccountMeta::new_readonly(house_pubkey, false),\n            AccountMeta::new(params.user_key, false),\n            AccountMeta::new_readonly(runner.function, false),\n            AccountMeta::new_readonly(runner.fn_request_key, false),\n            AccountMeta::new_readonly(runner.signer, true),\n            AccountMeta::new_readonly(anchor_spl::token::ID, false),\n            AccountMeta::new_readonly(mint, false),\n            AccountMeta::new(house_escrow, false),\n            AccountMeta::new(user_escrow, false),\n        ],\n    };\n\n    // Then, write your own Rust logic and build a Vec of instructions.\n    // Should  be under 700 bytes after serialization\n    let ixs: Vec<solana_program::instruction::Instruction> = vec![user_settle_ixn];\n\n    // Finally, emit the signed quote and partially signed transaction to the functionRunner oracle\n    // The functionRunner oracle will use the last outputted word to stdout as the serialized result. This is what gets executed on-chain.\n    runner.emit(ixs).await.unwrap();\n}\n')),(0,r.kt)("h2",{id:"deploy-function-to-docker-container"},"Deploy function to Docker container"),(0,r.kt)("h2",{id:"create-switchboard-function-account"},"Create Switchboard function account"),(0,r.kt)("h2",{id:"create-user-and-request-account"},"Create user and request account"),(0,r.kt)("h2",{id:"request-randomness"},"Request randomness"))}m.isMDXComponent=!0}}]);