"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1290],{54852:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(49231);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(a),m=r,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return a?n.createElement(g,l(l({ref:t},d),{},{components:a})):n.createElement(g,l({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2004:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(49231),r=a(19841);const o={tabItem:"tabItem_Z7jx"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},t)}},66081:(e,t,a)=>{a.d(t,{Z:()=>w});var n=a(48041),r=a(49231),o=a(19841),l=a(51556),i=a(19409),s=a(86449),u=a(80828),d=a(70621);function c(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function p(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function k(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=p(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[s,u]=g({queryString:a,groupId:n}),[c,k]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,d.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),f=(()=>{const e=s??c;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),k(e)}),[u,k,o]),tabValues:o}}var f=a(68213);const h={tabList:"tabList_YkLP",tabItem:"tabItem_dswv"};function b(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),p=e=>{const t=e.currentTarget,a=d.indexOf(t),n=u[a].value;n!==i&&(c(t),s(n))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},l,{className:(0,o.Z)("tabs__item",h.tabItem,l?.className,{"tabs__item--active":i===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;if(a=Array.isArray(a)?a:[a],t){const e=a.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function N(e){const t=k(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",h.tabList)},r.createElement(b,(0,n.Z)({},e,t)),r.createElement(y,(0,n.Z)({},e,t)))}function w(e){const t=(0,f.Z)();return r.createElement(N,(0,n.Z)({key:String(t)},e))}},26365:(e,t,a)=>{a.d(t,{Z:()=>f});var n=a(68868),r=a(49231),o=a(63607),l=a(69681),i=a(44018),s=a(27429),u=a(82764),d=a(15733),c=a(57236),p=a(65137);const m=(0,c.Z)(u.Z)((e=>{let{theme:t,dark:a}=e;return{display:"flex",flexDirection:"row",justifyItems:"baseline",background:a?"rgba(42, 56, 68, 1)":"rgba(255, 255, 255, 0.6)",border:(a?.15:.1)+"rem solid var(--ifm-navbar-link-color)",borderRadius:"13.2px",boxShadow:"0 6px 7px 5px rgba(107 107 107, 0.03)",boxSizing:"border-box",width:"100%",height:"100%",verticalAlign:"middle",textDecoration:"none",[t.breakpoints.down(300)]:{paddingLeft:""},transition:"transform 0.15s ease-in-out","&&&:hover":{background:a?"rgba(42, 56, 68, 1)":"white",transform:"scale3d(1.05, 1.05, 1)"}}})),g=(0,c.Z)(s.Z)((e=>{let{theme:t}=e;return{display:"flex",maxHeight:"96px"}}));function k(e){let{title:t,image:a,imageDark:n,description:s,to:u,sx:c}=e;const{colorMode:k}=(0,p.I)();return r.createElement(d.Z,{href:u,style:{textDecoration:"none"}},r.createElement(m,{dark:"dark"===k?1:0,sx:c},r.createElement(o.Z,{sx:{height:"100%",width:"100%"}},r.createElement(g,{avatar:r.createElement("div",{style:{height:48,width:48,display:"flex",alignItems:"center",justifyContent:"center"}},"dark"===k&&n?n:a),title:t,titleTypographyProps:{fontSize:"1.25rem",color:"var(--ifm-navbar-link-color)",fontWeight:"var(--ifm-font-weight-bold)"}}),s?r.createElement(r.Fragment,null,r.createElement(i.Z,{sx:{marginBottom:"1rem"}}),r.createElement(l.Z,{variant:"body2",color:"textSecondary",component:"p",sx:{color:"var(--ifm-navbar-link-color)",fontSize:"1.1rem"}},s)):r.createElement(r.Fragment,null))))}function f(e){let{items:t,cols:a,sx:o,direction:l,justifyContent:i,alignItems:s}=e;return r.createElement(n.ZP,{container:!0,spacing:3,direction:l??"row",justifyContent:i,alignItems:s},t.map((e=>r.createElement(n.ZP,{key:e.title,item:!0,style:{flexGrow:1},xs:12,md:6,lg:Math.floor(12/a??2)},r.createElement(k,{title:e.title,image:e.image,imageDark:e.imageDark,to:e.to,description:e.description,sx:o})))))}},72223:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>U,contentTitle:()=>_,default:()=>H,frontMatter:()=>F,metadata:()=>B,toc:()=>Q});var n=a(48041),r=(a(49231),a(54852)),o=a(66081),l=a(2004);const i={toc:[]},s="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(s,(0,n.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following code shows how to add a history buffer to an aggregator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  AggregatorAccount,\n  AggregatorHistoryBuffer,\n} from "@switchboard-xyz/solana.js";\n\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorPubkey);\nconst aggregator = await aggregatorAccount.loadData();\n\nconst [historyBuffer, addHistorySignature] =\n  await AggregatorHistoryBuffer.create(program, {\n    aggregatorAccount,\n    maxSamples: 10000,\n  });\nconst history = await historyBuffer.loadData();\n')))}u.isMDXComponent=!0;const d={toc:[]},c="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following code shows how to create an aggregator, permission, and a lease\nwith a pre-funded escrow:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { QueueAccount } from "@switchboard-xyz/solana.js";\n\nconst queueAccount = new QueueAccount(program, queuePubkey);\n\nconst [aggregatorAccount, aggregatorInitSignatures] =\n  await queueAccount.createFeed({\n    batchSize: 1,\n    minRequiredOracleResults: 1,\n    minRequiredJobResults: 1,\n    minUpdateDelaySeconds: 60,\n    fundAmount: 2.5, // deposit 2.5 wSOL into the leaseAccount escrow\n    jobs: [\n      { pubkey: jobAccount.publicKey },\n      {\n        weight: 2,\n        data: OracleJob.encodeDelimited(\n          OracleJob.fromObject({\n            tasks: [\n              {\n                valueTask: {\n                  value: 1,\n                },\n              },\n            ],\n          })\n        ).finish(),\n      },\n    ],\n  });\nconst aggregator = await aggregatorAccount.loadData();\n')))}p.isMDXComponent=!0;const m={toc:[]},g="wrapper";function k(e){let{components:t,...a}=e;return(0,r.kt)(g,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following code shows how to create a new oracle queue on Solana:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { QueueAccount } from "@switchboard-xyz/solana.js";\n\nconst [queueAccount, txnSignature] = await QueueAccount.create(program, {\n  name: "My Queue",\n  metadata: "Top Secret",\n  queueSize: 100,\n  reward: 0.00001337,\n  minStake: 10,\n  oracleTimeout: 60,\n  slashingEnabled: false,\n  unpermissionedFeeds: true,\n  unpermissionedVrf: true,\n  enableBufferRelayers: false,\n});\nconst queue = await queueAccount.loadData();\n')))}k.isMDXComponent=!0;const f={toc:[]},h="wrapper";function b(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following parameters can be provided when initializing a new oracle queue:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"field"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the oracle queue on-chain for easier identification.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"metadata")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Metadata for the oracle queue on-chain for easier identification.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"authority")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"The authority for the oracle queue which permits an authority to modify a queues config or approve permissions for oracles, aggregators, VRF, or buffer relayer accounts.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"queueSize")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"The maximum number of active oracles a queue can support. Defaults to 500")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"minStake")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of wrapped SOL required to be staked by each oracle to remain on the queue. Ex. a provided value of 5 would require 5 wSOL in the oracles staking wallet.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"reward")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"The number of tokens to pay oracles from an aggregators lease escrow each time an oracle response is accepted on-chain. Ex: a provided value of 0.0000125 would correspond to 12500 tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"slashingEnabled")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether oracles are penalized for responding outside the accepted results ",(0,r.kt)("inlineCode",{parentName:"td"},"varianceToleranceMultiplier"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unpermissionedFeeds")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, aggregators and buffer relayers will not need to acquire ",(0,r.kt)("inlineCode",{parentName:"td"},"PERMIT_ORACLE_QUEUE_USAGE")," permissions to request updates from a queue's oracles.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unpermissionedVrf")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, VRF accounts will not need to acquire ",(0,r.kt)("inlineCode",{parentName:"td"},"PERMIT_VRF_REQUESTS")," permissions to request randomness from a queue's oracles.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"enableBufferRelayers")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, buffer relayers are permitted to use an oracle queue. Note, they still need to acquire any necessary ",(0,r.kt)("inlineCode",{parentName:"td"},"PERMIT_ORACLE_QUEUE_USAGE")," permissions first.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"feedProbationPeriod")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"oracleTimeout")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"varianceToleranceMultiplier")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"consecutiveFeedFailureLimit")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"consecutiveOracleFailureLimit")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"keypair")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional keypair to use for the queue's pubkey. Useful to spin up consistent environments on localnet. If not provided one will be generated.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dataBufferKeypair")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional keypair to use for a queues dataBuffer pubkey.")))))}b.isMDXComponent=!0;const y={toc:[]},N="wrapper";function w(e){let{components:t,...a}=e;return(0,r.kt)(N,(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following code will create a new oracle for a given queue. Optionally\nprovide the enable flag with the queueAuthority keypair to auto-approve the\noracle for the queue."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { QueueAccount } from "@switchboard-xyz/solana.js";\n\nconst queueAccount = new QueueAccount(program, queuePubkey);\n\nconst [oracleAccount, oracleInitSignature] = await queueAccount.createOracle({\n  name: "My Oracle",\n  metadata: "Oracle #1",\n  stakeAmount: 10,\n});\nconst oracle = await oracleAccount.loadData();\n\nawait oracleAccount.heartbeat();\n')))}w.isMDXComponent=!0;const v={toc:[]},x="wrapper";function T(e){let{components:t,...a}=e;return(0,r.kt)(x,(0,n.Z)({},v,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following parameters can be provided when initializing an oracle on a queue:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"field"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the oracle on-chain for easier identification.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"metadata")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Metadata for the oracle on-chain for easier identification.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"authority")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"The authority for the oracle and is required to sign any transactions on behalf of the oracle. Defaults to payer pubkey if not provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stakingWalletKeypair")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Keypair used for the oracle's staking wallet and is used in the PDA derivation scheme.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stakeAmount")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Wrap any necessary SOL and fund the oracle's staking wallet. Needed if a queue has a ",(0,r.kt)("inlineCode",{parentName:"td"},"minStake")," requirement.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"disableWrap")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Will not wrap any missing SOL. Assumes a previous instruction will handle it.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"funderTokenWallet")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Public key of a wrapped SOL token account that will fund the staking wallet. Defaults to payers wrapped SOL associated wallet if not provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"funderAuthority")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Keypair that is used to approve any token transfers on behalf of the ",(0,r.kt)("inlineCode",{parentName:"td"},"funderTokenWallet"),". Defaults to payer if not provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"enable")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If the ",(0,r.kt)("inlineCode",{parentName:"td"},"queueAuthority")," keypair is provided or the payer is the queue authority, enable ",(0,r.kt)("inlineCode",{parentName:"td"},"PERMIT_ORACLE_HEARTBEAT")," permissions for the oracle.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"queueAuthority")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Keypair of the queue authority that will approve permissions for the oracle. Defaults to payer keypair if not provided.")))))}T.isMDXComponent=!0;const A={toc:[]},C="wrapper";function E(e){let{components:t,...a}=e;return(0,r.kt)(C,(0,n.Z)({},A,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following code shows how to load the Switchboard program on Solana and\ninitialize the RPC connection with an optional payer keypair:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Connection } from "@solana/web3.js";\nimport {\n  SwitchboardProgram,\n  TransactionObject,\n} from "@switchboard-xyz/solana.js";\n\nconst program = await SwitchboardProgram.load(\n  "mainnet-beta",\n  new Connection("https://api.mainnet-beta.solana.com"),\n  payerKeypair /** Optional, READ-ONLY if not provided */\n);\n')))}E.isMDXComponent=!0;const D={toc:[]},q="wrapper";function S(e){let{components:t,...a}=e;return(0,r.kt)(q,(0,n.Z)({},D,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following parameters can be used to initialize the SwitchboardProgram class:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"field"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cluster")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"The version of the Switchboard program to connect to. Must be ",(0,r.kt)("inlineCode",{parentName:"td"},"mainnet-beta"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"devnet"),", or ",(0,r.kt)("inlineCode",{parentName:"td"},"localnet"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"connection")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"The Solana connection object to connect to an RPC server.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"payerKeypair")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Keypair of account that will pay for any transactions. If not provided then Switchboard will be in READ-ONLY mode.")))))}S.isMDXComponent=!0;const j={toc:[]},O="wrapper";function P(e){let{components:t,...a}=e;return(0,r.kt)(O,(0,n.Z)({},j,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following code shows how to read the latest accepted result for a data feed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import Big from "big.js";\nimport { AggregatorAccount } from "@switchboard-xyz/solana.js";\n\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorPubkey);\n\nconst result: Big | null = await aggregatorAccount.fetchLatestValue();\nif (result === null) {\n  throw new Error("Aggregator holds no value");\n}\nconsole.log(result.toString());\n')))}P.isMDXComponent=!0;const Z={toc:[]},I="wrapper";function L(e){let{components:t,...a}=e;return(0,r.kt)(I,(0,n.Z)({},Z,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following code shows how to call open round and request a new update for a\nfeed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { AggregatorAccount } from "@switchboard-xyz/solana.js";\n\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorPubkey);\n\nawait aggregatorAccount.openRound();\n')))}L.isMDXComponent=!0;const M={toc:[]},R="wrapper";function z(e){let{components:t,...a}=e;return(0,r.kt)(R,(0,n.Z)({},M,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following code shows how to watch a feed for changes and invoke a callback\neach time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import Big from "big.js";\nimport { AggregatorAccount } from "@switchboard-xyz/solana.js";\n\nconst aggregatorAccount = new AggregatorAccount(program, aggregatorPubkey);\n\nconst ws = aggregatorAccount.onChange((aggregator) => {\n  const result = AggregatorAccount.decodeLatestValue(aggregator);\n  if (result !== null) {\n    console.log(result.toString());\n  }\n});\n')))}z.isMDXComponent=!0;var V=a(26365),X=a(43939);const F={sidebar_position:20,title:"@switchboard-xyz/solana.js"},_=void 0,B={unversionedId:"solana/dev/javascript",id:"solana/dev/javascript",title:"@switchboard-xyz/solana.js",description:"<img",source:"@site/docs/solana/dev/javascript.mdx",sourceDirName:"solana/dev",slug:"/solana/dev/javascript",permalink:"/solana/dev/javascript",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"@switchboard-xyz/solana.js"},sidebar:"solana",previous:{title:"Rust",permalink:"/solana/dev/rust"},next:{title:"switchboardpy",permalink:"/solana/dev/python"}},U={},Q=[{value:"Quick Links",id:"quick-links",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Load the Switchboard Program",id:"load-the-switchboard-program",level:3},{value:"Create a queue",id:"create-a-queue",level:3},{value:"Add an oracle",id:"add-an-oracle",level:3},{value:"Add a data feed",id:"add-a-data-feed",level:3},{value:"Update a Data Feed",id:"update-a-data-feed",level:3},{value:"Read a Data Feed",id:"read-a-data-feed",level:3},{value:"History Buffer",id:"history-buffer",level:3},{value:"Watch Switchboard",id:"watch-switchboard",level:3}],W={toc:Q},K="wrapper";function H(e){let{components:t,...a}=e;return(0,r.kt)(K,(0,n.Z)({},W,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("img",{style:{padding:"0 5px"},alt:"Test Status",src:"https://github.com/switchboard-xyz/sbv2-solana/actions/workflows/solana-js-test.yml/badge.svg"}),(0,r.kt)("a",{style:{padding:"0 5px"},href:"https://www.npmjs.com/package/@switchboard-xyz/solana.js"},(0,r.kt)("img",{alt:"NPM Badge",src:"https://img.shields.io/github/package-json/v/switchboard-xyz/sbv2-solana?color=red&filename=javascript%2Fsolana.js%2Fpackage.json&label=%40switchboard-xyz%2Fsolana.js&logo=npm"})),(0,r.kt)("p",null,"A library of utility functions to interact with the Switchboardv2 program"),(0,r.kt)("h2",{id:"quick-links"},"Quick Links"),(0,r.kt)(V.Z,{cols:2,items:[{to:"https://github.com/switchboard-xyz/sbv2-solana/tree/main/javascript/solana.js",title:"Github",description:"View the Github repo",image:(0,r.kt)("img",{src:(0,X.Z)("/img/icons/github/light.svg")}),imageDark:(0,r.kt)("img",{src:(0,X.Z)("/img/icons/github/dark.svg")})},{to:"https://docs.switchboard.xyz/api/@switchboard-xyz/solana.js/",title:"Typedocs",description:"View the Typedocs",image:(0,r.kt)("img",{src:(0,X.Z)("/img/icons/typedoc/logo.svg")}),imageDark:(0,r.kt)("img",{src:(0,X.Z)("/img/icons/typedoc/logo.svg")})}],mdxType:"RoundedCardGroup"}),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @switchboard-xyz/solana.js\n"))),(0,r.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @switchboard-xyz/solana.js\n")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Check out the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/switchboard-xyz/sbv2-solana/tree/main/javascript/solana.js/test"},"@switchboard-xyz/solana.js test directory"),"\nfor more examples."),(0,r.kt)("h3",{id:"load-the-switchboard-program"},"Load the Switchboard Program"),(0,r.kt)(E,{mdxType:"LoadSwitchboardProgram"}),(0,r.kt)(S,{mdxType:"LoadSwitchboardProgramParams"}),(0,r.kt)("h3",{id:"create-a-queue"},"Create a queue"),(0,r.kt)(k,{mdxType:"CreateAQueue"}),(0,r.kt)(b,{mdxType:"CreateAQueueParams"}),(0,r.kt)("h3",{id:"add-an-oracle"},"Add an oracle"),(0,r.kt)(w,{mdxType:"CreateAnOracle"}),(0,r.kt)(T,{mdxType:"CreateAnOracleParams"}),(0,r.kt)("h3",{id:"add-a-data-feed"},"Add a data feed"),(0,r.kt)(p,{mdxType:"CreateAFeed"}),(0,r.kt)("h3",{id:"update-a-data-feed"},"Update a Data Feed"),(0,r.kt)(L,{mdxType:"RequestFeedUpdate"}),(0,r.kt)("h3",{id:"read-a-data-feed"},"Read a Data Feed"),(0,r.kt)(P,{mdxType:"ReadAFeed"}),(0,r.kt)("h3",{id:"history-buffer"},"History Buffer"),(0,r.kt)(u,{mdxType:"AddHistory"}),(0,r.kt)("h3",{id:"watch-switchboard"},"Watch Switchboard"),(0,r.kt)(z,{mdxType:"WatchAFeed"}))}H.isMDXComponent=!0}}]);